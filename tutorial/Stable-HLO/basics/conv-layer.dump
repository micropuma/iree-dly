// -----// IR Dump After CheckVHLOStableHloMixUsage (iree-check-vhlostablehlo-mix-usage) //----- //
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
    %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
    %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
    %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
    return %3 : tensor<1x10xf32>
  }
}


// -----// IR Dump After VhloToVersionPass (vhlo-to-version) //----- //
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
    %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
    %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
    %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
    return %3 : tensor<1x10xf32>
  }
}


// -----// IR Dump After VhloLegalizeToStablehloPass (vhlo-legalize-to-stablehlo) //----- //
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
    %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
    %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
    %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
    return %3 : tensor<1x10xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
  %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
  %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
  return %3 : tensor<1x10xf32>
}

// -----// IR Dump After StableHLOCanonicalize (iree-stablehlo-canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
  %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
  %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
  return %3 : tensor<1x10xf32>
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
  %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
  %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
  return %3 : tensor<1x10xf32>
}

// -----// IR Dump After LegalizeStableHLOCustomCalls (iree-stablehlo-legalize-custom-calls) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
  %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
  %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
  return %3 : tensor<1x10xf32>
}

// -----// IR Dump After LegalizeControlFlow (iree-stablehlo-legalize-control-flow) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
  %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
  %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
  return %3 : tensor<1x10xf32>
}

// -----// IR Dump After FlattenTuplesInSCF (iree-stablehlo-preprocessing-flatten-scf-tuples) //----- //
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
    %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<1x784xf32>
    %1 = stablehlo.dot %0, %arg1 : (tensor<1x784xf32>, tensor<784x10xf32>) -> tensor<1x10xf32>
    %2 = stablehlo.add %1, %arg2 : tensor<1x10xf32>
    %3 = stablehlo.maximum %2, %cst : tensor<1x10xf32>
    return %3 : tensor<1x10xf32>
  }
}


// -----// IR Dump After StableHLOToStableHLOPreprocessing (iree-stablehlo-to-stablehlo-preprocessing) //----- //
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
    %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
    %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
    %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
    %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
    %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
    return %4 : tensor<1x10xf32>
  }
}


// -----// IR Dump After StableHLOCanonicalize (iree-stablehlo-canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After ShapeToShapeLowering (shape-to-shape-lowering) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After ConvertShapeToStandard (convert-shape-to-std) //----- //
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
    %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
    %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
    %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
    %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
    %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
    return %4 : tensor<1x10xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After StableHLOCanonicalize (iree-stablehlo-canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After Inliner (inline) //----- //
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
    %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
    %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
    %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
    %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
    %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
    return %4 : tensor<1x10xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After StableHLOCanonicalize (iree-stablehlo-canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After LegalizeShapeComputations (iree-stablehlo-legalize-shape-computations) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After ConvertStableHloToLinalgExt (iree-stablehlo-to-linalg-ext) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After LegalizeChlo (iree-stablehlo-legalize-chlo) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = stablehlo.constant dense<0.000000e+00> : tensor<1x10xf32>
  %0 = stablehlo.reshape %arg0 : (tensor<28x28xf32>) -> tensor<784xf32>
  %1 = stablehlo.dot %0, %arg1 : (tensor<784xf32>, tensor<784x10xf32>) -> tensor<10xf32>
  %2 = stablehlo.reshape %1 : (tensor<10xf32>) -> tensor<1x10xf32>
  %3 = stablehlo.add %2, %arg2 : tensor<1x10xf32>
  %4 = stablehlo.maximum %3, %cst : tensor<1x10xf32>
  return %4 : tensor<1x10xf32>
}

// -----// IR Dump After ConvertStableHloToIreeInputDialects (iree-stablehlo-to-iree-input) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = arith.constant 0.000000e+00 : f32
  %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %0 = tensor.empty() : tensor<10xf32>
  %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
  %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %3 = tensor.empty() : tensor<1x10xf32>
  %4 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %7 = arith.addf %in, %in_1 : f32
    linalg.yield %7 : f32
  } -> tensor<1x10xf32>
  %5 = tensor.empty() : tensor<1x10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %7 = arith.maximumf %in, %in_1 : f32
    linalg.yield %7 : f32
  } -> tensor<1x10xf32>
  return %6 : tensor<1x10xf32>
}

// -----// IR Dump After StableHLOCanonicalize (iree-stablehlo-canonicalize) //----- //
func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = arith.constant 0.000000e+00 : f32
  %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %0 = tensor.empty() : tensor<10xf32>
  %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
  %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %3 = tensor.empty() : tensor<1x10xf32>
  %4 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %7 = arith.addf %in, %in_1 : f32
    linalg.yield %7 : f32
  } -> tensor<1x10xf32>
  %5 = tensor.empty() : tensor<1x10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %7 = arith.maximumf %in, %in_1 : f32
    linalg.yield %7 : f32
  } -> tensor<1x10xf32>
  return %6 : tensor<1x10xf32>
}

// -----// IR Dump After VerifyCompilerStableHloInputLegality (iree-stablehlo-verify-compiler-input-legality) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  func.func @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After IREEImportPublicPass (iree-import-public) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    util.return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After ImportMLProgramPass (iree-import-ml-program) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    util.return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After SanitizeModuleNamesPass (iree-sanitize-module-names) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    util.return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After ConvertMeshToFlowPass (iree-convert-mesh-to-flow) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    util.return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After DemoteF64ToF32Pass (iree-input-conversion-demote-f64-to-f32) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    util.return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::ABI::ConvertStreamableOpsPass (iree-abi-convert-streamable-ops) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    util.return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::ABI::WrapEntryPointsPass (iree-abi-wrap-entry-points) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = util.call @_main(%0, %1, %2) : (tensor<28x28xf32>, tensor<784x10xf32>, tensor<1x10xf32>) -> tensor<1x10xf32>
    %4 = hal.tensor.export %3 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
  util.func private @_main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %0 = tensor.empty() : tensor<10xf32>
    %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
    %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %3 = tensor.empty() : tensor<1x10xf32>
    %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.addf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    %5 = tensor.empty() : tensor<1x10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %7 = arith.maximumf %in, %in_1 : f32
      linalg.yield %7 : f32
    } -> tensor<1x10xf32>
    util.return %6 : tensor<1x10xf32>
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @_main(%arg0: tensor<28x28xf32>, %arg1: tensor<784x10xf32>, %arg2: tensor<1x10xf32>) -> tensor<1x10xf32> {
  %cst = arith.constant 0.000000e+00 : f32
  %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %arg0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %0 = tensor.empty() : tensor<10xf32>
  %1 = linalg.fill ins(%cst : f32) outs(%0 : tensor<10xf32>) -> tensor<10xf32>
  %2 = linalg.vecmat ins(%collapsed, %arg1 : tensor<784xf32>, tensor<784x10xf32>) outs(%1 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %3 = tensor.empty() : tensor<1x10xf32>
  %4 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %arg2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%3 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %7 = arith.addf %in, %in_1 : f32
    linalg.yield %7 : f32
  } -> tensor<1x10xf32>
  %5 = tensor.empty() : tensor<1x10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%4, %cst_0 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%5 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %7 = arith.maximumf %in, %in_1 : f32
    linalg.yield %7 : f32
  } -> tensor<1x10xf32>
  util.return %6 : tensor<1x10xf32>
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = util.call @_main(%0, %1, %2) : (tensor<28x28xf32>, tensor<784x10xf32>, tensor<1x10xf32>) -> tensor<1x10xf32>
  %4 = hal.tensor.export %3 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %11 = arith.addf %in, %in_1 : f32
    linalg.yield %11 : f32
  } -> tensor<1x10xf32>
  %8 = tensor.empty() : tensor<1x10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%8 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %11 = arith.maximumf %in, %in_1 : f32
    linalg.yield %11 : f32
  } -> tensor<1x10xf32>
  %10 = hal.tensor.export %9 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %10 : !hal.buffer_view
}

// -----// IR Dump After Inliner (inline) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %11 = arith.addf %in, %in_1 : f32
      linalg.yield %11 : f32
    } -> tensor<1x10xf32>
    %8 = tensor.empty() : tensor<1x10xf32>
    %9 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%8 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %11 = arith.maximumf %in, %in_1 : f32
      linalg.yield %11 : f32
    } -> tensor<1x10xf32>
    %10 = hal.tensor.export %9 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %10 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %11 = arith.addf %in, %in_1 : f32
    linalg.yield %11 : f32
  } -> tensor<1x10xf32>
  %8 = tensor.empty() : tensor<1x10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%8 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %11 = arith.maximumf %in, %in_1 : f32
    linalg.yield %11 : f32
  } -> tensor<1x10xf32>
  %10 = hal.tensor.export %9 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %10 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
#map = affine_map<(d0, d1) -> (d0, d1)>
module {
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After AssignLegacyTargetDevicesPass (iree-hal-assign-legacy-target-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0, d1) -> (d0, d1)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {hal.device.targets = [#device_target_cuda]} {
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After MaterializeTargetDevicesPass (iree-hal-materialize-target-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0, d1) -> (d0, d1)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After ResolveDevicePromisesPass (iree-hal-resolve-device-promises) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0, d1) -> (d0, d1)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After ResolveDeviceAliasesPass (iree-hal-resolve-device-aliases) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0, d1) -> (d0, d1)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyDevicesPass (iree-hal-verify-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0, d1) -> (d0, d1)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After LinalgQuantizedConvToConvPass (iree-global-opt-quantized-conv-to-conv) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After LinalgQuantizedMatmulToMatmulPass (iree-global-opt-quantized-matmul-to-matmul) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After RemoveZeroExtentTensorsPass (iree-global-opt-remove-zero-extent-tensors) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After DetachElementwiseFromNamedOpsPass (iree-global-opt-detach-elementwise-from-named-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After LinalgNamedOpConversionPass (linalg-named-op-conversion) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After EraseUnusedLinalgOperandsPass (iree-global-opt-erase-unused-linalg-operands) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0, d1) -> (d0, d1)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After ExpandTensorShapesPass (iree-global-opt-expand-tensor-shapes) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0, d1) -> (d0, d1)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %6 = tensor.empty() : tensor<1x10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.addf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %10 = arith.maximumf %in, %in_1 : f32
      linalg.yield %10 : f32
    } -> tensor<1x10xf32>
    %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After ConvertElementwiseToLinalgPass (convert-elementwise-to-linalg) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After RaiseSpecialOpsPass (iree-global-opt-raise-special-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After DecomposeConcatPass (iree-global-opt-decompose-concat) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After GeneralizeLinalgNamedOpsPass (iree-global-opt-generalize-linalg-named-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<1x10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.addf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%7, %cst : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %10 = arith.maximumf %in, %in_1 : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %9 = hal.tensor.export %8 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After FoldUnitExtentDimsPass (iree-dispatch-creation-fold-unit-extent-dims) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = tensor.empty() : tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%6 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %11 = arith.addf %in, %in_2 : f32
      linalg.yield %11 : f32
    } -> tensor<10xf32>
    %8 = tensor.empty() : tensor<10xf32>
    %9 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%7, %cst : tensor<10xf32>, tensor<10xf32>) outs(%8 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %11 = arith.maximumf %in, %in_2 : f32
      linalg.yield %11 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %9 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %10 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %10 : !hal.buffer_view
  }
}


// -----// IR Dump After DemoteContractionInputsToBF16Pass (iree-global-opt-demote-contraction-inputs-to-bf16) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = tensor.empty() : tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%6 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %11 = arith.addf %in, %in_2 : f32
    linalg.yield %11 : f32
  } -> tensor<10xf32>
  %8 = tensor.empty() : tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%7, %cst : tensor<10xf32>, tensor<10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %11 = arith.maximumf %in, %in_2 : f32
    linalg.yield %11 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %9 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %10 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %10 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = tensor.empty() : tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%6 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %11 = arith.addf %in, %in_2 : f32
    linalg.yield %11 : f32
  } -> tensor<10xf32>
  %8 = tensor.empty() : tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%7, %cst : tensor<10xf32>, tensor<10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %11 = arith.maximumf %in, %in_2 : f32
    linalg.yield %11 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %9 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %10 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %10 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After SetEncodingPass (iree-dispatch-creation-set-encoding) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = iree_encoding.set_encoding %collapsed : tensor<784xf32> -> tensor<784xf32, #iree_encoding.encoding<operand_index = 0 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>
  %5 = iree_encoding.set_encoding %1 : tensor<784x10xf32> -> tensor<784x10xf32, #iree_encoding.encoding<operand_index = 1 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>
  %6 = tensor.empty() : tensor<10xf32, #iree_encoding.encoding<operand_index = 2 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>
  %7 = linalg.fill ins(%cst_0 : f32) outs(%6 : tensor<10xf32, #iree_encoding.encoding<operand_index = 2 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>) -> tensor<10xf32, #iree_encoding.encoding<operand_index = 2 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>
  %8 = linalg.vecmat ins(%4, %5 : tensor<784xf32, #iree_encoding.encoding<operand_index = 0 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>, tensor<784x10xf32, #iree_encoding.encoding<operand_index = 1 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>) outs(%7 : tensor<10xf32, #iree_encoding.encoding<operand_index = 2 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>) -> tensor<10xf32, #iree_encoding.encoding<operand_index = 2 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>>
  %9 = iree_encoding.unset_encoding %8 : tensor<10xf32, #iree_encoding.encoding<operand_index = 2 : index, op_type =  matmul, element_types = [f32, f32, f32], user_indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], round_dims_to = array<i64: 1, 32, 32>>> -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %13 = arith.addf %in, %in_2 : f32
    linalg.yield %13 : f32
  } -> tensor<10xf32>
  %11 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%10, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %13 = arith.maximumf %in, %in_2 : f32
    linalg.yield %13 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %11 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %12 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %12 : !hal.buffer_view
}

// -----// IR Dump After MaterializeEncodingIntoNopPass (iree-codegen-materialize-encoding-into-nop) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = tensor.empty() : tensor<10xf32>
  %5 = linalg.fill ins(%cst_0 : f32) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %6 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%5 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %10 = arith.addf %in, %in_2 : f32
    linalg.yield %10 : f32
  } -> tensor<10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%7, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %10 = arith.maximumf %in, %in_2 : f32
    linalg.yield %10 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %8 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %9 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = tensor.empty() : tensor<10xf32>
  %5 = linalg.fill ins(%cst_0 : f32) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %6 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%5 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %10 = arith.addf %in, %in_2 : f32
    linalg.yield %10 : f32
  } -> tensor<10xf32>
  %8 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%7, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %10 = arith.maximumf %in, %in_2 : f32
    linalg.yield %10 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %8 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %9 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %9 : !hal.buffer_view
}

// -----// IR Dump After MaterializeHomogeneousEncodingsPass (iree-global-opt-materialize-homogeneous-encodings) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = tensor.empty() : tensor<10xf32>
    %5 = linalg.fill ins(%cst_0 : f32) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %6 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%5 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %10 = arith.addf %in, %in_2 : f32
      linalg.yield %10 : f32
    } -> tensor<10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%7, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %10 = arith.maximumf %in, %in_2 : f32
      linalg.yield %10 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %8 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %9 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = tensor.empty() : tensor<10xf32>
    %5 = linalg.fill ins(%cst_0 : f32) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %6 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%5 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %10 = arith.addf %in, %in_2 : f32
      linalg.yield %10 : f32
    } -> tensor<10xf32>
    %8 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%7, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %10 = arith.maximumf %in, %in_2 : f32
      linalg.yield %10 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %8 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %9 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %9 : !hal.buffer_view
  }
}


// -----// IR Dump After CSE (cse) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After SimplifyPackUnpackPass (iree-global-opt-simplify-pack-unpack) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After DataLayoutPropagationPass (iree-global-opt-data-layout-propagation) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After GeneralizeLinalgNamedOpsPass (iree-global-opt-generalize-linalg-named-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After GlobalLoopInvariantCodeMotionPass (iree-global-opt-loop-invariant-code-motion) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After HoistIntoGlobals (iree-util-hoist-into-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After JitGlobalsPass (iree-consteval-jit-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After RaiseSpecialOpsPass (iree-global-opt-raise-special-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After InjectTensorTracingPass (iree-flow-inject-tensor-tracing) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After TensorPadToTensorInsertSlicePass (iree-dispatch-creation-tensor-pad-to-tensor-insert-slice) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After FixedPointIterator (iree-util-fixed-point-iterator) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
    %cst_0 = arith.constant 0.000000e+00 : f32
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
    %3 = tensor.empty() : tensor<10xf32>
    %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
    %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
    %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.addf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %7 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %9 = arith.maximumf %in, %in_2 : f32
      linalg.yield %9 : f32
    } -> tensor<10xf32>
    %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
    %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After FusionPreprocessingPass (iree-dispatch-creation-fusion-preprocessing) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant dense<0.000000e+00> : tensor<10xf32>
  %cst_0 = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst_0 : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_1 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_1 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.addf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%6, %cst : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_2: f32, %out: f32):
    %9 = arith.maximumf %in, %in_2 : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After ElementwiseOpFusionPass (iree-dispatch-creation-elementwise-op-fusion) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After BubbleUpExpandShapesPass (iree-dispatch-creation-bubble-up-expand-shapes) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %9 = arith.addf %in, %in_0 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = hal.tensor.export %7 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After BubbleUpExtractSlicesPass (iree-dispatch-creation-bubble-up-extract-slices) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %9 = arith.addf %in, %in_0 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = hal.tensor.export %7 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %9 = arith.addf %in, %in_0 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = hal.tensor.export %7 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %9 = arith.addf %in, %in_0 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = hal.tensor.export %7 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After ElementwiseOpFusionPass (iree-dispatch-creation-elementwise-op-fusion) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %9 = arith.addf %in, %in_0 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = hal.tensor.export %7 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %9 = arith.addf %in, %in_0 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = hal.tensor.export %7 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = tensor.empty() : tensor<1x10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded, %2 : tensor<1x10xf32>, tensor<1x10xf32>) outs(%6 : tensor<1x10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %9 = arith.addf %in, %in_0 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<1x10xf32>
  %8 = hal.tensor.export %7 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After SinkReshapesPass (iree-dispatch-creation-sink-reshapes) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = tensor.empty() : tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%6 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %9 = arith.addf %in, %in_1 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = tensor.empty() : tensor<10xf32>
  %7 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%6 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %9 = arith.addf %in, %in_1 : f32
    %10 = arith.maximumf %9, %cst : f32
    linalg.yield %10 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %7 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %8 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After FuseMultiUseElementwiseProducerPass (iree-dispatch-creation-fuse-multi-use-elementwise-producer) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After SplitReductionPass (iree-dispatch-creation-split-reduction-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After TransposeGenericOpsPass (iree-dispatch-creation-transpose-generic-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After FormScalarDispatchesPass (iree-dispatch-creation-form-scalar-dispatches) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %5 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_1: f32, %out: f32):
    %8 = arith.addf %in, %in_1 : f32
    %9 = arith.maximumf %8, %cst : f32
    linalg.yield %9 : f32
  } -> tensor<10xf32>
  %expanded = tensor.expand_shape %6 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %7 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After FormDispatchRegionsPass (iree-dispatch-creation-form-dispatch-regions) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %5 = flow.dispatch.region -> (tensor<10xf32>) {
    %7 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
    %8 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%7, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %9 = arith.addf %in, %in_1 : f32
      %10 = arith.maximumf %9, %cst : f32
      linalg.yield %10 : f32
    } -> tensor<10xf32>
    flow.return %8 : tensor<10xf32>
  }
  %expanded = tensor.expand_shape %5 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %6 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %6 : !hal.buffer_view
}

// -----// IR Dump After CloneProducersIntoDispatchRegionsPass (iree-dispatch-creation-clone-producers-into-dispatch-regions) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %4 = flow.dispatch.region -> (tensor<10xf32>) {
    %6 = tensor.empty() : tensor<10xf32>
    %cst_1 = arith.constant 0.000000e+00 : f32
    %7 = linalg.fill ins(%cst_1 : f32) outs(%6 : tensor<10xf32>) -> tensor<10xf32>
    %8 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
    %9 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%8, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%6 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %10 = arith.addf %in, %in_2 : f32
      %11 = arith.maximumf %10, %cst_1 : f32
      linalg.yield %11 : f32
    } -> tensor<10xf32>
    flow.return %9 : tensor<10xf32>
  }
  %expanded = tensor.expand_shape %4 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %5 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After CollapseDimensionsPass (iree-dispatch-creation-collapse-dimensions) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %4 = flow.dispatch.region -> (tensor<10xf32>) {
    %6 = tensor.empty() : tensor<10xf32>
    %cst_1 = arith.constant 0.000000e+00 : f32
    %7 = linalg.fill ins(%cst_1 : f32) outs(%6 : tensor<10xf32>) -> tensor<10xf32>
    %8 = linalg.vecmat ins(%collapsed, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
    %9 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%8, %collapsed_0 : tensor<10xf32>, tensor<10xf32>) outs(%6 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %10 = arith.addf %in, %in_2 : f32
      %11 = arith.maximumf %10, %cst_1 : f32
      linalg.yield %11 : f32
    } -> tensor<10xf32>
    flow.return %9 : tensor<10xf32>
  }
  %expanded = tensor.expand_shape %4 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %5 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ConvertDispatchRegionsToWorkgroupsPass (iree-dispatch-creation-convert-dispatch-regions-to-workgroups) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %cst = arith.constant 0.000000e+00 : f32
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %collapsed = tensor.collapse_shape %0 [[0, 1]] : tensor<28x28xf32> into tensor<784xf32>
  %3 = tensor.empty() : tensor<10xf32>
  %collapsed_0 = tensor.collapse_shape %2 [[0, 1]] : tensor<1x10xf32> into tensor<10xf32>
  %4 = flow.dispatch.workgroups(%collapsed, %1, %collapsed_0) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %6 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %7 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %8 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %9 = tensor.empty() : tensor<10xf32>
    %cst_1 = arith.constant 0.000000e+00 : f32
    %10 = linalg.fill ins(%cst_1 : f32) outs(%9 : tensor<10xf32>) -> tensor<10xf32>
    %11 = linalg.vecmat ins(%6, %7 : tensor<784xf32>, tensor<784x10xf32>) outs(%10 : tensor<10xf32>) -> tensor<10xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %8 : tensor<10xf32>, tensor<10xf32>) outs(%9 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_2: f32, %out: f32):
      %13 = arith.addf %in, %in_2 : f32
      %14 = arith.maximumf %13, %cst_1 : f32
      linalg.yield %14 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %12, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  }
  %expanded = tensor.expand_shape %4 [[0, 1]] output_shape [1, 10] : tensor<10xf32> into tensor<1x10xf32>
  %5 = hal.tensor.export %expanded "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ConvertTensorToFlowPass (iree-dispatch-creation-convert-tensor-to-flow) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After MaterializeDefaultWorkgroupCountRegionPass (iree-dispatch-creation-materialize-default-workgroup-count-region) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  } count() -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    flow.return %x, %y, %z : index, index, index
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After VerifyInputLegalityPass (iree-verify-input-legality) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
        (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
      %cst = arith.constant 0.000000e+00 : f32
      %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
      %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
      %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
      %11 = tensor.empty() : tensor<10xf32>
      %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
      %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
      %14 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
      ^bb0(%in: f32, %in_0: f32, %out: f32):
        %15 = arith.addf %in, %in_0 : f32
        %16 = arith.maximumf %15, %cst : f32
        linalg.yield %16 : f32
      } -> tensor<10xf32>
      flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
      flow.return
    } count() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After CaptureDynamicDimsPass (iree-flow-capture-dynamic-dims) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  } count() -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    flow.return %x, %y, %z : index, index, index
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  } count() -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    flow.return %x, %y, %z : index, index, index
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  } count() -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    flow.return %x, %y, %z : index, index, index
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After InitializeEmptyTensorsPass (iree-flow-initialize-empty-tensors) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
      (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
    %cst = arith.constant 0.000000e+00 : f32
    %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %11 = tensor.empty() : tensor<10xf32>
    %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
    %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
    %14 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %15 = arith.addf %in, %in_0 : f32
      %16 = arith.maximumf %15, %cst : f32
      linalg.yield %16 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    flow.return
  } count() -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    flow.return %x, %y, %z : index, index, index
  }
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After OutlineDispatchExternsPass (iree-flow-outline-dispatch-externs) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch.workgroups(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32> =
        (%arg3: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg4: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg5: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg6: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
      %cst = arith.constant 0.000000e+00 : f32
      %8 = flow.dispatch.tensor.load %arg3, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
      %9 = flow.dispatch.tensor.load %arg4, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
      %10 = flow.dispatch.tensor.load %arg5, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
      %11 = tensor.empty() : tensor<10xf32>
      %12 = linalg.fill ins(%cst : f32) outs(%11 : tensor<10xf32>) -> tensor<10xf32>
      %13 = linalg.vecmat ins(%8, %9 : tensor<784xf32>, tensor<784x10xf32>) outs(%12 : tensor<10xf32>) -> tensor<10xf32>
      %14 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%13, %10 : tensor<10xf32>, tensor<10xf32>) outs(%11 : tensor<10xf32>) {
      ^bb0(%in: f32, %in_0: f32, %out: f32):
        %15 = arith.addf %in, %in_0 : f32
        %16 = arith.maximumf %15, %cst : f32
        linalg.yield %16 : f32
      } -> tensor<10xf32>
      flow.dispatch.tensor.store %14, %arg6, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
      flow.return
    } count() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After OutlineDispatchRegionsPass (iree-flow-outline-dispatch-regions) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After AnnotateDispatchesPass (iree-flow-annotate-dispatches) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After StripDebugOps (iree-util-strip-debug-ops) //----- //
flow.executable private @main_dispatch_0 {
  flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    flow.return %x, %y, %z : index, index, index
  }
  builtin.module {
    func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
      %cst = arith.constant 0.000000e+00 : f32
      %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
      %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
      %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
      %3 = tensor.empty() : tensor<10xf32>
      %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
      %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
      %6 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
      ^bb0(%in: f32, %in_0: f32, %out: f32):
        %7 = arith.addf %in, %in_0 : f32
        %8 = arith.maximumf %7, %cst : f32
        linalg.yield %8 : f32
      } -> tensor<10xf32>
      flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
      return
    }
  }
}

// -----// IR Dump After DeduplicateExecutablesPass (iree-flow-deduplicate-executables) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After InjectTensorTracingPass (iree-flow-inject-tensor-tracing) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CleanupTensorShapesPass (iree-flow-cleanup-tensor-shapes) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After OutlineConstantsPass (iree-flow-outline-constants) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CanonicalizerPass (iree-flow-canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After FixedPointIterator (iree-util-fixed-point-iterator) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyInputPass (iree-stream-verify-input) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
  %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
  %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
  %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
  %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
  %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
  %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
  %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
  util.return %7 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  flow.executable private @main_dispatch_0 {
    flow.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      flow.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !flow.dispatch.tensor<readonly:tensor<784xf32>>, %arg1: !flow.dispatch.tensor<readonly:tensor<784x10xf32>>, %arg2: !flow.dispatch.tensor<readonly:tensor<10xf32>>, %arg3: !flow.dispatch.tensor<writeonly:tensor<10xf32>>) {
        %cst = arith.constant 0.000000e+00 : f32
        %0 = flow.dispatch.tensor.load %arg0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %1 = flow.dispatch.tensor.load %arg1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %2 = flow.dispatch.tensor.load %arg2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %3 = tensor.empty() : tensor<10xf32>
        %4 = linalg.fill ins(%cst : f32) outs(%3 : tensor<10xf32>) -> tensor<10xf32>
        %5 = linalg.vecmat ins(%0, %1 : tensor<784xf32>, tensor<784x10xf32>) outs(%4 : tensor<10xf32>) -> tensor<10xf32>
        %6 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%5, %2 : tensor<10xf32>, tensor<10xf32>) outs(%3 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %7 = arith.addf %in, %in_0 : f32
          %8 = arith.maximumf %7, %cst : f32
          linalg.yield %8 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %6, %arg3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %0 = hal.tensor.import %arg0 "input0" : !hal.buffer_view -> tensor<28x28xf32>
    %1 = hal.tensor.import %arg1 "input1" : !hal.buffer_view -> tensor<784x10xf32>
    %2 = hal.tensor.import %arg2 "input2" : !hal.buffer_view -> tensor<1x10xf32>
    %3 = flow.tensor.reshape %0 : tensor<28x28xf32> -> tensor<784xf32>
    %4 = flow.tensor.reshape %2 : tensor<1x10xf32> -> tensor<10xf32>
    %5 = flow.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%3, %1, %4) : (tensor<784xf32>, tensor<784x10xf32>, tensor<10xf32>) -> tensor<10xf32>
    %6 = flow.tensor.reshape %5 : tensor<10xf32> -> tensor<1x10xf32>
    %7 = hal.tensor.export %6 "output0" : tensor<1x10xf32> -> !hal.buffer_view
    util.return %7 : !hal.buffer_view
  }
}


// -----// IR Dump After ConvertToStreamPass (iree-stream-conversion) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %cst = arith.constant 0.000000e+00 : f32
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    %c28 = arith.constant 28 : index
    %c28_0 = arith.constant 28 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28_0]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
    %element_type_f32_1 = hal.element_type<f32> : i32
    %dense_row_major_2 = hal.encoding_type<dense_row_major> : i32
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32_1) encoding(%dense_row_major_2)
    %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
    %element_type_f32_3 = hal.element_type<f32> : i32
    %dense_row_major_4 = hal.encoding_type<dense_row_major> : i32
    %c1 = arith.constant 1 : index
    %c10_5 = arith.constant 10 : index
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10_5]) type(%element_type_f32_3) encoding(%dense_row_major_4)
    %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
    %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
    %10 = stream.tensor.clone on(#hal.device.affinity<@__device_0>) %2 : tensor<28x28xf32> in !stream.resource<*>{%0} -> tensor<784xf32> in !stream.resource<*>{%9}
    %11 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %12 = stream.tensor.clone on(#hal.device.affinity<@__device_0>) %8 : tensor<1x10xf32> in !stream.resource<*>{%6} -> tensor<10xf32> in !stream.resource<*>{%11}
    %c0 = arith.constant 0 : index
    %13 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %14 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%10[%c0 to %9 for %9], %5[%c0 to %3 for %3], %12[%c0 to %11 for %11]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%11}) -> !stream.resource<*>{%13}
    %15 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %16 = stream.tensor.clone on(#hal.device.affinity<@__device_0>) %14 : tensor<10xf32> in !stream.resource<*>{%13} -> tensor<1x10xf32> in !stream.resource<*>{%15}
    %17 = stream.async.transfer %16 : !stream.resource<*>{%15} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%15}
    %18 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %17 : tensor<1x10xf32> in !stream.resource<external>{%15} -> !hal.buffer_view
    util.return %18 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyLoweringToTensorsPass (iree-stream-verify-lowering-to-tensors) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %cst = arith.constant 0.000000e+00 : f32
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    %c28 = arith.constant 28 : index
    %c28_0 = arith.constant 28 : index
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28_0]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
    %element_type_f32_1 = hal.element_type<f32> : i32
    %dense_row_major_2 = hal.encoding_type<dense_row_major> : i32
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32_1) encoding(%dense_row_major_2)
    %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
    %element_type_f32_3 = hal.element_type<f32> : i32
    %dense_row_major_4 = hal.encoding_type<dense_row_major> : i32
    %c1 = arith.constant 1 : index
    %c10_5 = arith.constant 10 : index
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10_5]) type(%element_type_f32_3) encoding(%dense_row_major_4)
    %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
    %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
    %10 = stream.tensor.clone on(#hal.device.affinity<@__device_0>) %2 : tensor<28x28xf32> in !stream.resource<*>{%0} -> tensor<784xf32> in !stream.resource<*>{%9}
    %11 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %12 = stream.tensor.clone on(#hal.device.affinity<@__device_0>) %8 : tensor<1x10xf32> in !stream.resource<*>{%6} -> tensor<10xf32> in !stream.resource<*>{%11}
    %c0 = arith.constant 0 : index
    %13 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %14 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%10[%c0 to %9 for %9], %5[%c0 to %3 for %3], %12[%c0 to %11 for %11]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%11}) -> !stream.resource<*>{%13}
    %15 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %16 = stream.tensor.clone on(#hal.device.affinity<@__device_0>) %14 : tensor<10xf32> in !stream.resource<*>{%13} -> tensor<1x10xf32> in !stream.resource<*>{%15}
    %17 = stream.async.transfer %16 : !stream.resource<*>{%15} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%15}
    %18 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %17 : tensor<1x10xf32> in !stream.resource<external>{%15} -> !hal.buffer_view
    util.return %18 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
  %element_type_f32_0 = hal.element_type<f32> : i32
  %dense_row_major_1 = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32_0) encoding(%dense_row_major_1)
  %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
  %element_type_f32_2 = hal.element_type<f32> : i32
  %dense_row_major_3 = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32_2) encoding(%dense_row_major_3)
  %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
  %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
  %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %11 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %12 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%11}
  %13 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %14 = stream.async.transfer %12 : !stream.resource<*>{%13} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%13}
  %15 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %14 : tensor<1x10xf32> in !stream.resource<external>{%13} -> !hal.buffer_view
  util.return %15 : !hal.buffer_view
}

// -----// IR Dump After Inliner (inline) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
    %element_type_f32_0 = hal.element_type<f32> : i32
    %dense_row_major_1 = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32_0) encoding(%dense_row_major_1)
    %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
    %element_type_f32_2 = hal.element_type<f32> : i32
    %dense_row_major_3 = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32_2) encoding(%dense_row_major_3)
    %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
    %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
    %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %11 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %12 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%11}
    %13 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %14 = stream.async.transfer %12 : !stream.resource<*>{%13} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%13}
    %15 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %14 : tensor<1x10xf32> in !stream.resource<external>{%13} -> !hal.buffer_view
    util.return %15 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
  %element_type_f32_0 = hal.element_type<f32> : i32
  %dense_row_major_1 = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32_0) encoding(%dense_row_major_1)
  %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
  %element_type_f32_2 = hal.element_type<f32> : i32
  %dense_row_major_3 = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32_2) encoding(%dense_row_major_3)
  %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
  %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
  %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %11 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %12 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%11}
  %13 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %14 = stream.async.transfer %12 : !stream.resource<*>{%13} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%13}
  %15 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %14 : tensor<1x10xf32> in !stream.resource<external>{%13} -> !hal.buffer_view
  util.return %15 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
  %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
  %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
  %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
  %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
  util.return %13 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
  %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
  %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
  %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
  %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
  util.return %13 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
  %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
  %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
  %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
  %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
  util.return %13 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
  %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
  %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
  %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
  %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
  %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
  %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
  %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
  %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
  util.return %13 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
    %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
    %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
    %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
    %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    util.return %13 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
    %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
    %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
    %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
    %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    util.return %13 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
    %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
    %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
    %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
    %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    util.return %13 : !hal.buffer_view
  }
}


// -----// IR Dump After CombineInitializers (iree-util-combine-initializers) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<28x28xf32> : index
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%0}
    %2 = stream.async.transfer %1 : !stream.resource<external>{%0} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%0}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %3 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784x10xf32> : index
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%3}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%3} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%3}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %6 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<1x10xf32> : index
    %7 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%6}
    %8 = stream.async.transfer %7 : !stream.resource<external>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%6}
    %9 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<784xf32> : index
    %10 = stream.tensor.sizeof on(#hal.device.affinity<@__device_0>) tensor<10xf32> : index
    %11 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%2[%c0 to %9 for %9], %5[%c0 to %3 for %3], %8[%c0 to %10 for %10]) : (!stream.resource<*>{%9}, !stream.resource<*>{%3}, !stream.resource<*>{%10}) -> !stream.resource<*>{%10}
    %12 = stream.async.transfer %11 : !stream.resource<*>{%6} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%6}
    %13 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %12 : tensor<1x10xf32> in !stream.resource<external>{%6} -> !hal.buffer_view
    util.return %13 : !hal.buffer_view
  }
}


// -----// IR Dump After EncodeHostTensorsPass (iree-stream-encode-host-tensors) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After EncodeDeviceTensorsPass (iree-stream-encode-device-tensors) //----- //
stream.executable private @main_dispatch_0 {
  stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    stream.return %x, %y, %z : index, index, index
  }
  builtin.module {
    func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
      %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
      %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
      %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
      %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
      %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
      %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
      %7 = tensor.empty() : tensor<10xf32>
      %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
      %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
      %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
      ^bb0(%in: f32, %in_0: f32, %out: f32):
        %11 = arith.addf %in, %in_0 : f32
        %12 = arith.maximumf %11, %cst : f32
        linalg.yield %12 : f32
      } -> tensor<10xf32>
      flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
      return
    }
  }
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
    %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
    %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
    %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
    %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
    %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
    %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyLoweringToAsyncResourcesPass (iree-stream-verify-lowering-to-async-resources) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
    %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
    %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After MaterializeCopyOnWritePass (iree-stream-materialize-copy-on-write) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After ElideAsyncCopiesPass (iree-stream-elide-async-copies) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
    %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
    %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
    %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After EmplaceAllocationsPass (iree-stream-emplace-allocations) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  %1 = stream.async.transfer %0 : !stream.resource<external>{%c3136} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  %3 = stream.async.transfer %2 : !stream.resource<external>{%c31360} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %4 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %5 = stream.async.transfer %4 : !stream.resource<external>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<*>{%c40}
  %6 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%1[%c0 to %c3136 for %c3136], %3[%c0 to %c31360 for %c31360], %5[%c0 to %c40 for %c40]) : (!stream.resource<*>{%c3136}, !stream.resource<*>{%c31360}, !stream.resource<*>{%c40}) -> !stream.resource<*>{%c40}
  %7 = stream.async.transfer %6 : !stream.resource<*>{%c40} from(#hal.device.affinity<@__device_0>) -> to(#hal.device.affinity<@__device_0>) !stream.resource<external>{%c40}
  %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %8 : !hal.buffer_view
}

// -----// IR Dump After RefineUsagePass (iree-stream-refine-usage) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyAsyncAccessRangesPass (iree-stream-verify-async-access-ranges) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %3 = stream.async.dispatch on(#hal.device.affinity<@__device_0>) @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%0[%c0 to %c3136 for %c3136], %1[%c0 to %c31360 for %c31360], %2[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After ScheduleExecutionPass (iree-stream-schedule-execution) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
    %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    stream.yield %5 : !stream.resource<external>{%c40}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After ScheduleConcurrencyPass (iree-stream-schedule-concurrency) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
    %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    stream.yield %5 : !stream.resource<external>{%c40}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After PropagateTimepointsPass (iree-stream-propagate-timepoints) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %3 = stream.timepoint.immediate => !stream.timepoint
    %4 = stream.timepoint.immediate => !stream.timepoint
    %5 = stream.timepoint.immediate => !stream.timepoint
    %6 = stream.timepoint.join max(%3, %4, %5) => !stream.timepoint
    %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) await(%6) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
      %9 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
      stream.yield %9 : !stream.resource<external>{%c40}
    } => !stream.timepoint
    %7 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
    %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After MaterializeBuiltinsPass (iree-stream-materialize-builtins) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %3 = stream.timepoint.immediate => !stream.timepoint
    %4 = stream.timepoint.immediate => !stream.timepoint
    %5 = stream.timepoint.immediate => !stream.timepoint
    %6 = stream.timepoint.join max(%3, %4, %5) => !stream.timepoint
    %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) await(%6) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
      %9 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
      stream.yield %9 : !stream.resource<external>{%c40}
    } => !stream.timepoint
    %7 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
    %8 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %7 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %8 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
    %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    stream.yield %5 : !stream.resource<external>{%c40}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
    %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    stream.yield %5 : !stream.resource<external>{%c40}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
    %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    stream.yield %5 : !stream.resource<external>{%c40}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
    %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    stream.yield %5 : !stream.resource<external>{%c40}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
    %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
    stream.yield %5 : !stream.resource<external>{%c40}
  } => !stream.timepoint
  %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
  %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %4 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
      %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
      stream.yield %5 : !stream.resource<external>{%c40}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
      %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
      stream.yield %5 : !stream.resource<external>{%c40}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
      %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
      stream.yield %5 : !stream.resource<external>{%c40}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyLoweringToAsyncPass (iree-stream-verify-lowering-to-async) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %results, %result_timepoint = stream.async.execute on(#hal.device.affinity<@__device_0>) with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40} {
      %5 = stream.async.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%arg3[%c0 to %c3136 for %c3136], %arg4[%c0 to %c31360 for %c31360], %arg5[%c0 to %c40 for %c40]) : (!stream.resource<external>{%c3136}, !stream.resource<external>{%c31360}, !stream.resource<external>{%c40}) -> !stream.resource<external>{%c40}
      stream.yield %5 : !stream.resource<external>{%c40}
    } => !stream.timepoint
    %3 = stream.timepoint.await %result_timepoint => %results : !stream.resource<external>{%c40}
    %4 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %3 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %4 : !hal.buffer_view
  }
}


// -----// IR Dump After ScheduleAllocationPass (iree-stream-schedule-allocation) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %c0_0 = arith.constant 0 : index
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After PackConstantsPass (iree-stream-pack-constants) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %c0_0 = arith.constant 0 : index
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After LayoutSlicesPass (iree-stream-layout-slices) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %c0_0 = arith.constant 0 : index
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After PropagateSubranges (iree-util-propagate-subranges) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %c0_0 = arith.constant 0 : index
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyLoweringToCmdPass (iree-stream-verify-lowering-to-cmd) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After ElideTimepointsPass (iree-stream-elide-timepoints) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {iree.fixedpoint.iteration = 0 : index, stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FixedPointIterator (iree-util-fixed-point-iterator) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseDispatchBindingsPass (iree-stream-fuse-dispatch-bindings) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding, %arg4: index, %arg5: index, %arg6: index, %arg7: index) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%arg4] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%arg5] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%arg6] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%arg7] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %c0_0 = arith.constant 0 : index
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0, %c0, %c0, %c0 : index, index, index, index) {
        ro %arg3[%c0_0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0_0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0_0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After AnnotateDispatchArgumentsPass (iree-stream-annotate-dispatch-arguments) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}, %arg4: index {stream.values = [0 : index]}, %arg5: index {stream.values = [0 : index]}, %arg6: index {stream.values = [0 : index]}, %arg7: index {stream.values = [0 : index]}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%arg4] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%arg5] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%arg6] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%arg7] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %c0_0 = arith.constant 0 : index
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0, %c0, %c0, %c0 : index, index, index, index) {
        ro %arg3[%c0_0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0_0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0_0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After AnnotateDispatchAssumptionsPass (iree-stream-annotate-dispatch-assumptions) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}, %arg4: index {stream.values = [0 : index]}, %arg5: index {stream.values = [0 : index]}, %arg6: index {stream.values = [0 : index]}, %arg7: index {stream.values = [0 : index]}) {
        %0:4 = util.assume.int 
            %arg4<umin = 0, umax = 0>, 
            %arg5<umin = 0, umax = 0>, 
            %arg6<umin = 0, umax = 0>, 
            %arg7<umin = 0, umax = 0>
          : index, index, index, index
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %1 = stream.binding.subspan %arg0[%0#0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %2 = stream.binding.subspan %arg1[%0#1] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %3 = stream.binding.subspan %arg2[%0#2] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %4 = stream.binding.subspan %arg3[%0#3] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %5 = flow.dispatch.tensor.load %1, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %7 = flow.dispatch.tensor.load %3, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %8 = tensor.empty() : tensor<10xf32>
        %9 = linalg.fill ins(%cst : f32) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.vecmat ins(%5, %6 : tensor<784xf32>, tensor<784x10xf32>) outs(%9 : tensor<10xf32>) -> tensor<10xf32>
        %11 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%10, %7 : tensor<10xf32>, tensor<10xf32>) outs(%8 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %12 = arith.addf %in, %in_0 : f32
          %13 = arith.maximumf %12, %cst : f32
          linalg.yield %13 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %11, %4, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %c0_0 = arith.constant 0 : index
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0, %c0, %c0, %c0 : index, index, index, index) {
        ro %arg3[%c0_0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0_0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0_0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After PackDispatchOperandsPass (iree-stream-pack-dispatch-operands) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
        %c32_i64 = arith.constant 32 : i64
        %0 = arith.extui %arg5 : i32 to i64
        %1 = arith.shli %0, %c32_i64 : i64
        %2 = arith.extui %arg4 : i32 to i64
        %3 = arith.ori %2, %1 : i64
        %4 = arith.index_castui %3 {stream.values = [0 : index]} : i64 to index
        %c32_i64_0 = arith.constant 32 : i64
        %5 = arith.extui %arg7 : i32 to i64
        %6 = arith.shli %5, %c32_i64_0 : i64
        %7 = arith.extui %arg6 : i32 to i64
        %8 = arith.ori %7, %6 : i64
        %9 = arith.index_castui %8 {stream.values = [0 : index]} : i64 to index
        %c32_i64_1 = arith.constant 32 : i64
        %10 = arith.extui %arg9 : i32 to i64
        %11 = arith.shli %10, %c32_i64_1 : i64
        %12 = arith.extui %arg8 : i32 to i64
        %13 = arith.ori %12, %11 : i64
        %14 = arith.index_castui %13 {stream.values = [0 : index]} : i64 to index
        %c32_i64_2 = arith.constant 32 : i64
        %15 = arith.extui %arg11 : i32 to i64
        %16 = arith.shli %15, %c32_i64_2 : i64
        %17 = arith.extui %arg10 : i32 to i64
        %18 = arith.ori %17, %16 : i64
        %19 = arith.index_castui %18 {stream.values = [0 : index]} : i64 to index
        %20:4 = util.assume.int 
            %4<umin = 0, umax = 0>, 
            %9<umin = 0, umax = 0>, 
            %14<umin = 0, umax = 0>, 
            %19<umin = 0, umax = 0>
          : index, index, index, index
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %21 = stream.binding.subspan %arg0[%20#0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %22 = stream.binding.subspan %arg1[%20#1] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %23 = stream.binding.subspan %arg2[%20#2] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %24 = stream.binding.subspan %arg3[%20#3] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %25 = flow.dispatch.tensor.load %21, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %26 = flow.dispatch.tensor.load %22, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %27 = flow.dispatch.tensor.load %23, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %28 = tensor.empty() : tensor<10xf32>
        %29 = linalg.fill ins(%cst : f32) outs(%28 : tensor<10xf32>) -> tensor<10xf32>
        %30 = linalg.vecmat ins(%25, %26 : tensor<784xf32>, tensor<784x10xf32>) outs(%29 : tensor<10xf32>) -> tensor<10xf32>
        %31 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%30, %27 : tensor<10xf32>, tensor<10xf32>) outs(%28 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_3: f32, %out: f32):
          %32 = arith.addf %in, %in_3 : f32
          %33 = arith.maximumf %32, %cst : f32
          linalg.yield %33 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %31, %24, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %c0_0 = arith.constant 0 : index
    %c0_i64 = arith.constant 0 : i64
    %c0_i32 = arith.constant 0 : i32
    %c32_i64 = arith.constant 32 : i64
    %c0_i64_1 = arith.constant 0 : i64
    %c0_i32_2 = arith.constant 0 : i32
    %c0_i64_3 = arith.constant 0 : i64
    %c0_i32_4 = arith.constant 0 : i32
    %c32_i64_5 = arith.constant 32 : i64
    %c0_i64_6 = arith.constant 0 : i64
    %c0_i32_7 = arith.constant 0 : i32
    %c0_i64_8 = arith.constant 0 : i64
    %c0_i32_9 = arith.constant 0 : i32
    %c32_i64_10 = arith.constant 32 : i64
    %c0_i64_11 = arith.constant 0 : i64
    %c0_i32_12 = arith.constant 0 : i32
    %c0_i64_13 = arith.constant 0 : i64
    %c0_i32_14 = arith.constant 0 : i32
    %c32_i64_15 = arith.constant 32 : i64
    %c0_i64_16 = arith.constant 0 : i64
    %c0_i32_17 = arith.constant 0 : i32
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32_2, %c0_i32_4, %c0_i32_7, %c0_i32_9, %c0_i32_12, %c0_i32_14, %c0_i32_17 : i32, i32, i32, i32, i32, i32, i32, i32) {
        ro %arg3[%c0_0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0_0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0_0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0_0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0_i32 = arith.constant 0 : i32
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0_i32 = arith.constant 0 : i32
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0_i32 = arith.constant 0 : i32
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0_i32 = arith.constant 0 : i32
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c0_i32 = arith.constant 0 : i32
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
        %cst = arith.constant 0.000000e+00 : f32
        %c32_i64 = arith.constant 32 : i64
        %0 = arith.extui %arg5 : i32 to i64
        %1 = arith.shli %0, %c32_i64 : i64
        %2 = arith.extui %arg4 : i32 to i64
        %3 = arith.ori %2, %1 : i64
        %4 = arith.index_castui %3 {stream.values = [0 : index]} : i64 to index
        %5 = arith.extui %arg7 : i32 to i64
        %6 = arith.shli %5, %c32_i64 : i64
        %7 = arith.extui %arg6 : i32 to i64
        %8 = arith.ori %7, %6 : i64
        %9 = arith.index_castui %8 {stream.values = [0 : index]} : i64 to index
        %10 = arith.extui %arg9 : i32 to i64
        %11 = arith.shli %10, %c32_i64 : i64
        %12 = arith.extui %arg8 : i32 to i64
        %13 = arith.ori %12, %11 : i64
        %14 = arith.index_castui %13 {stream.values = [0 : index]} : i64 to index
        %15 = arith.extui %arg11 : i32 to i64
        %16 = arith.shli %15, %c32_i64 : i64
        %17 = arith.extui %arg10 : i32 to i64
        %18 = arith.ori %17, %16 : i64
        %19 = arith.index_castui %18 {stream.values = [0 : index]} : i64 to index
        %20:4 = util.assume.int 
            %4<umin = 0, umax = 0>, 
            %9<umin = 0, umax = 0>, 
            %14<umin = 0, umax = 0>, 
            %19<umin = 0, umax = 0>
          : index, index, index, index
        %21 = stream.binding.subspan %arg0[%20#0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %22 = stream.binding.subspan %arg1[%20#1] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %23 = stream.binding.subspan %arg2[%20#2] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %24 = stream.binding.subspan %arg3[%20#3] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %25 = flow.dispatch.tensor.load %21, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %26 = flow.dispatch.tensor.load %22, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %27 = flow.dispatch.tensor.load %23, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %28 = tensor.empty() : tensor<10xf32>
        %29 = linalg.fill ins(%cst : f32) outs(%28 : tensor<10xf32>) -> tensor<10xf32>
        %30 = linalg.vecmat ins(%25, %26 : tensor<784xf32>, tensor<784x10xf32>) outs(%29 : tensor<10xf32>) -> tensor<10xf32>
        %31 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%30, %27 : tensor<10xf32>, tensor<10xf32>) outs(%28 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %32 = arith.addf %in, %in_0 : f32
          %33 = arith.maximumf %32, %cst : f32
          linalg.yield %33 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %31, %24, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0_i32 = arith.constant 0 : i32
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
        %cst = arith.constant 0.000000e+00 : f32
        %c32_i64 = arith.constant 32 : i64
        %0 = arith.extui %arg5 : i32 to i64
        %1 = arith.shli %0, %c32_i64 : i64
        %2 = arith.extui %arg4 : i32 to i64
        %3 = arith.ori %2, %1 : i64
        %4 = arith.index_castui %3 {stream.values = [0 : index]} : i64 to index
        %5 = arith.extui %arg7 : i32 to i64
        %6 = arith.shli %5, %c32_i64 : i64
        %7 = arith.extui %arg6 : i32 to i64
        %8 = arith.ori %7, %6 : i64
        %9 = arith.index_castui %8 {stream.values = [0 : index]} : i64 to index
        %10 = arith.extui %arg9 : i32 to i64
        %11 = arith.shli %10, %c32_i64 : i64
        %12 = arith.extui %arg8 : i32 to i64
        %13 = arith.ori %12, %11 : i64
        %14 = arith.index_castui %13 {stream.values = [0 : index]} : i64 to index
        %15 = arith.extui %arg11 : i32 to i64
        %16 = arith.shli %15, %c32_i64 : i64
        %17 = arith.extui %arg10 : i32 to i64
        %18 = arith.ori %17, %16 : i64
        %19 = arith.index_castui %18 {stream.values = [0 : index]} : i64 to index
        %20:4 = util.assume.int 
            %4<umin = 0, umax = 0>, 
            %9<umin = 0, umax = 0>, 
            %14<umin = 0, umax = 0>, 
            %19<umin = 0, umax = 0>
          : index, index, index, index
        %21 = stream.binding.subspan %arg0[%20#0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %22 = stream.binding.subspan %arg1[%20#1] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %23 = stream.binding.subspan %arg2[%20#2] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %24 = stream.binding.subspan %arg3[%20#3] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %25 = flow.dispatch.tensor.load %21, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %26 = flow.dispatch.tensor.load %22, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %27 = flow.dispatch.tensor.load %23, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %28 = tensor.empty() : tensor<10xf32>
        %29 = linalg.fill ins(%cst : f32) outs(%28 : tensor<10xf32>) -> tensor<10xf32>
        %30 = linalg.vecmat ins(%25, %26 : tensor<784xf32>, tensor<784x10xf32>) outs(%29 : tensor<10xf32>) -> tensor<10xf32>
        %31 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%30, %27 : tensor<10xf32>, tensor<10xf32>) outs(%28 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %32 = arith.addf %in, %in_0 : f32
          %33 = arith.maximumf %32, %cst : f32
          linalg.yield %33 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %31, %24, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0_i32 = arith.constant 0 : i32
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
        %cst = arith.constant 0.000000e+00 : f32
        %c32_i64 = arith.constant 32 : i64
        %0 = arith.extui %arg5 : i32 to i64
        %1 = arith.shli %0, %c32_i64 : i64
        %2 = arith.extui %arg4 : i32 to i64
        %3 = arith.ori %2, %1 : i64
        %4 = arith.index_castui %3 {stream.values = [0 : index]} : i64 to index
        %5 = arith.extui %arg7 : i32 to i64
        %6 = arith.shli %5, %c32_i64 : i64
        %7 = arith.extui %arg6 : i32 to i64
        %8 = arith.ori %7, %6 : i64
        %9 = arith.index_castui %8 {stream.values = [0 : index]} : i64 to index
        %10 = arith.extui %arg9 : i32 to i64
        %11 = arith.shli %10, %c32_i64 : i64
        %12 = arith.extui %arg8 : i32 to i64
        %13 = arith.ori %12, %11 : i64
        %14 = arith.index_castui %13 {stream.values = [0 : index]} : i64 to index
        %15 = arith.extui %arg11 : i32 to i64
        %16 = arith.shli %15, %c32_i64 : i64
        %17 = arith.extui %arg10 : i32 to i64
        %18 = arith.ori %17, %16 : i64
        %19 = arith.index_castui %18 {stream.values = [0 : index]} : i64 to index
        %20:4 = util.assume.int 
            %4<umin = 0, umax = 0>, 
            %9<umin = 0, umax = 0>, 
            %14<umin = 0, umax = 0>, 
            %19<umin = 0, umax = 0>
          : index, index, index, index
        %21 = stream.binding.subspan %arg0[%20#0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %22 = stream.binding.subspan %arg1[%20#1] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %23 = stream.binding.subspan %arg2[%20#2] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %24 = stream.binding.subspan %arg3[%20#3] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %25 = flow.dispatch.tensor.load %21, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %26 = flow.dispatch.tensor.load %22, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %27 = flow.dispatch.tensor.load %23, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %28 = tensor.empty() : tensor<10xf32>
        %29 = linalg.fill ins(%cst : f32) outs(%28 : tensor<10xf32>) -> tensor<10xf32>
        %30 = linalg.vecmat ins(%25, %26 : tensor<784xf32>, tensor<784x10xf32>) outs(%29 : tensor<10xf32>) -> tensor<10xf32>
        %31 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%30, %27 : tensor<10xf32>, tensor<10xf32>) outs(%28 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %32 = arith.addf %in, %in_0 : f32
          %33 = arith.maximumf %32, %cst : f32
          linalg.yield %33 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %31, %24, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0_i32 = arith.constant 0 : i32
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32(%c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32 : i32, i32, i32, i32, i32, i32, i32, i32) {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FoldUniformOperandsPass (iree-stream-fold-uniform-operands) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %c0_i32 = arith.constant 0 : i32
        %cst = arith.constant 0.000000e+00 : f32
        %c32_i64 = arith.constant 32 : i64
        %0 = arith.extui %c0_i32 : i32 to i64
        %1 = arith.shli %0, %c32_i64 : i64
        %2 = arith.extui %c0_i32 : i32 to i64
        %3 = arith.ori %2, %1 : i64
        %4 = arith.index_castui %3 {stream.values = [0 : index]} : i64 to index
        %5 = arith.extui %c0_i32 : i32 to i64
        %6 = arith.shli %5, %c32_i64 : i64
        %7 = arith.extui %c0_i32 : i32 to i64
        %8 = arith.ori %7, %6 : i64
        %9 = arith.index_castui %8 {stream.values = [0 : index]} : i64 to index
        %10 = arith.extui %c0_i32 : i32 to i64
        %11 = arith.shli %10, %c32_i64 : i64
        %12 = arith.extui %c0_i32 : i32 to i64
        %13 = arith.ori %12, %11 : i64
        %14 = arith.index_castui %13 {stream.values = [0 : index]} : i64 to index
        %15 = arith.extui %c0_i32 : i32 to i64
        %16 = arith.shli %15, %c32_i64 : i64
        %17 = arith.extui %c0_i32 : i32 to i64
        %18 = arith.ori %17, %16 : i64
        %19 = arith.index_castui %18 {stream.values = [0 : index]} : i64 to index
        %20:4 = util.assume.int 
            %4<umin = 0, umax = 0>, 
            %9<umin = 0, umax = 0>, 
            %14<umin = 0, umax = 0>, 
            %19<umin = 0, umax = 0>
          : index, index, index, index
        %21 = stream.binding.subspan %arg0[%20#0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %22 = stream.binding.subspan %arg1[%20#1] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %23 = stream.binding.subspan %arg2[%20#2] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %24 = stream.binding.subspan %arg3[%20#3] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %25 = flow.dispatch.tensor.load %21, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %26 = flow.dispatch.tensor.load %22, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %27 = flow.dispatch.tensor.load %23, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %28 = tensor.empty() : tensor<10xf32>
        %29 = linalg.fill ins(%cst : f32) outs(%28 : tensor<10xf32>) -> tensor<10xf32>
        %30 = linalg.vecmat ins(%25, %26 : tensor<784xf32>, tensor<784x10xf32>) outs(%29 : tensor<10xf32>) -> tensor<10xf32>
        %31 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%30, %27 : tensor<10xf32>, tensor<10xf32>) outs(%28 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %32 = arith.addf %in, %in_0 : f32
          %33 = arith.maximumf %32, %cst : f32
          linalg.yield %33 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %31, %24, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c0_i32 = arith.constant 0 : i32
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After OptimizeIntArithmetic (iree-util-optimize-int-arithmetic) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After AssignLegacyTargetDevicesPass (iree-hal-assign-legacy-target-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After MaterializeTargetDevicesPass (iree-hal-materialize-target-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After ResolveDevicePromisesPass (iree-hal-resolve-device-promises) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After ResolveDeviceAliasesPass (iree-hal-resolve-device-aliases) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyDevicesPass (iree-hal-verify-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
  %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
  %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
    stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
      ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
      ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
      ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
      wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
    }
  } => !stream.timepoint
  %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
  %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
  util.return %5 : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After VerifyDevicesPass (iree-hal-verify-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  stream.executable private @main_dispatch_0 {
    stream.executable.export public @main_dispatch_0_vecmat_10x784_f32 workgroups() -> (index, index, index) {
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      stream.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !stream.binding {stream.alignment = 64 : index}, %arg1: !stream.binding {stream.alignment = 64 : index}, %arg2: !stream.binding {stream.alignment = 64 : index}, %arg3: !stream.binding {stream.alignment = 64 : index}) {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = stream.binding.subspan %arg1[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = stream.binding.subspan %arg2[%c0] : !stream.binding -> !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = stream.binding.subspan %arg3[%c0] : !stream.binding -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After MaterializeInterfacesPass (iree-hal-materialize-interfaces) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) {
      ^bb0(%arg0: !hal.device):
        %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
        hal.return %x, %y, %z : index, index, index
      }
      builtin.module {
        func.func @main_dispatch_0_vecmat_10x784_f32() {
          %cst = arith.constant 0.000000e+00 : f32
          %c0 = arith.constant 0 : index
          %0 = hal.interface.binding.subspan layout(#pipeline_layout) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
          %1 = hal.interface.binding.subspan layout(#pipeline_layout) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
          %2 = hal.interface.binding.subspan layout(#pipeline_layout) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
          %3 = hal.interface.binding.subspan layout(#pipeline_layout) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
          %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
          %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
          %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
          %7 = tensor.empty() : tensor<10xf32>
          %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
          %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
          %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
          ^bb0(%in: f32, %in_0: f32, %out: f32):
            %11 = arith.addf %in, %in_0 : f32
            %12 = arith.maximumf %11, %cst : f32
            linalg.yield %12 : f32
          } -> tensor<10xf32>
          flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
          return
        }
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After PruneExecutablesPass (iree-hal-prune-executables) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#map = affine_map<(d0) -> (d0)>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module attributes {stream.affinity.default = #hal.device.affinity<@__device_0>} {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) {
      ^bb0(%arg0: !hal.device):
        %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
        hal.return %x, %y, %z : index, index, index
      }
      builtin.module {
        func.func @main_dispatch_0_vecmat_10x784_f32() {
          %cst = arith.constant 0.000000e+00 : f32
          %c0 = arith.constant 0 : index
          %0 = hal.interface.binding.subspan layout(#pipeline_layout) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
          %1 = hal.interface.binding.subspan layout(#pipeline_layout) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
          %2 = hal.interface.binding.subspan layout(#pipeline_layout) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
          %3 = hal.interface.binding.subspan layout(#pipeline_layout) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
          %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
          %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
          %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
          %7 = tensor.empty() : tensor<10xf32>
          %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
          %9 = linalg.vecmat ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) -> tensor<10xf32>
          %10 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
          ^bb0(%in: f32, %in_0: f32, %out: f32):
            %11 = arith.addf %in, %in_0 : f32
            %12 = arith.maximumf %11, %cst : f32
            linalg.yield %12 : f32
          } -> tensor<10xf32>
          flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
          return
        }
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %0 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg0 : !hal.buffer_view -> tensor<28x28xf32> in !stream.resource<external>{%c3136}
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %1 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg1 : !hal.buffer_view -> tensor<784x10xf32> in !stream.resource<external>{%c31360}
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %2 = stream.tensor.import on(#hal.device.affinity<@__device_0>) %arg2 : !hal.buffer_view -> tensor<1x10xf32> in !stream.resource<external>{%c40}
    %result, %result_timepoint = stream.resource.alloca uninitialized on(#hal.device.affinity<@__device_0>) : !stream.resource<external>{%c40} => !stream.timepoint
    %3 = stream.cmd.execute on(#hal.device.affinity<@__device_0>) await(%result_timepoint) => with(%0 as %arg3: !stream.resource<external>{%c3136}, %1 as %arg4: !stream.resource<external>{%c31360}, %2 as %arg5: !stream.resource<external>{%c40}, %result as %arg6: !stream.resource<external>{%c40}) {
      stream.cmd.dispatch @main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32 {
        ro %arg3[%c0 for %c3136] : !stream.resource<external>{%c3136},
        ro %arg4[%c0 for %c31360] : !stream.resource<external>{%c31360},
        ro %arg5[%c0 for %c40] : !stream.resource<external>{%c40},
        wo %arg6[%c0 for %c40] : !stream.resource<external>{%c40}
      }
    } => !stream.timepoint
    %4 = stream.timepoint.await %3 => %result : !stream.resource<external>{%c40}
    %5 = stream.tensor.export on(#hal.device.affinity<@__device_0>) %4 : tensor<1x10xf32> in !stream.resource<external>{%c40} -> !hal.buffer_view
    util.return %5 : !hal.buffer_view
  }
}


// -----// IR Dump After GPUGeneralizeNamedOpsPass (iree-codegen-gpu-generalize-named-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After TypePropagationPass (iree-codegen-type-propagation) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After BubbleUpOrdinalOpsPass (iree-codegen-bubble-up-ordinal-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After BufferizeCopyOnlyDispatchesPass (iree-codegen-bufferize-copy-only-dispatches) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After DecomposeSoftmaxPass (iree-codegen-decompose-softmax) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After MaterializeEncodingIntoNopPass (iree-codegen-materialize-encoding-into-nop) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After BufferizeCopyOnlyDispatchesPass (iree-codegen-bufferize-copy-only-dispatches) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After BlockDynamicDimensionsPass (iree-codegen-block-dynamic-dimensions) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConfigTrackingCanonicalizerPass (iree-codegen-config-tracking-canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After MaterializeUserConfigsPass (iree-codegen-materialize-user-configs) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %cst = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
    %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
    %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
    %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %7 = tensor.empty() : tensor<10xf32>
    %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
    %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %11 = arith.mulf %in, %in_0 : f32
      %12 = arith.addf %out, %11 : f32
      linalg.yield %12 : f32
    } -> tensor<10xf32>
    %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %11 = arith.addf %in, %in_0 : f32
      %12 = arith.maximumf %11, %cst : f32
      linalg.yield %12 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    return
  }
}

// -----// IR Dump After LLVMGPUSelectLoweringStrategyPass (iree-llvmgpu-select-lowering-strategy) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
    %cst = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
    %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
    %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
    %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %7 = tensor.empty() : tensor<10xf32>
    %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
    %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %11 = arith.mulf %in, %in_0 : f32
      %12 = arith.addf %out, %11 : f32
      linalg.yield %12 : f32
    } -> tensor<10xf32>
    %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %11 = arith.addf %in, %in_0 : f32
      %12 = arith.maximumf %11, %cst : f32
      linalg.yield %12 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    return
  }
}

// -----// IR Dump After ConfigureTargetExecutableVariantsPass (iree-hal-configure-target-executable-variants) //----- //
hal.executable.variant public @cuda_nvptx_fb target(<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>) {
  hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) {
  ^bb0(%arg0: !hal.device):
    %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
    hal.return %x, %y, %z : index, index, index
  }
  builtin.module {
    func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
      %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
      %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
      %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
      %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
      %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
      %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
      %7 = tensor.empty() : tensor<10xf32>
      %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
      %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_0: f32, %out: f32):
        %11 = arith.mulf %in, %in_0 : f32
        %12 = arith.addf %out, %11 : f32
        linalg.yield %12 : f32
      } -> tensor<10xf32>
      %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
      ^bb0(%in: f32, %in_0: f32, %out: f32):
        %11 = arith.addf %in, %in_0 : f32
        %12 = arith.maximumf %11, %cst : f32
        linalg.yield %12 : f32
      } -> tensor<10xf32>
      flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
      return
    }
  }
}

// -----// IR Dump After ConfigureExecutablesPass (iree-hal-configure-executables) //----- //
hal.executable private @main_dispatch_0 {
  hal.executable.variant public @cuda_nvptx_fb target(<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>) {
    hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) {
    ^bb0(%arg0: !hal.device):
      %x, %y, %z = flow.dispatch.workgroup_count_from_slice 
      hal.return %x, %y, %z : index, index, index
    }
    builtin.module {
      func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
        %cst = arith.constant 0.000000e+00 : f32
        %c0 = arith.constant 0 : index
        %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
        %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
        %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
        %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
        %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
        %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
        %7 = tensor.empty() : tensor<10xf32>
        %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
        %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.mulf %in, %in_0 : f32
          %12 = arith.addf %out, %11 : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
        ^bb0(%in: f32, %in_0: f32, %out: f32):
          %11 = arith.addf %in, %in_0 : f32
          %12 = arith.maximumf %11, %cst : f32
          linalg.yield %12 : f32
        } -> tensor<10xf32>
        flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
        return
      }
    }
  }
}

// -----// IR Dump After LowerExecutableUsingTransformDialectPass (iree-codegen-lower-executable-using-transform-dialect) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
    %cst = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
    %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
    %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
    %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
    %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
    %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
    %7 = tensor.empty() : tensor<10xf32>
    %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
    %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %11 = arith.mulf %in, %in_0 : f32
      %12 = arith.addf %out, %11 : f32
      linalg.yield %12 : f32
    } -> tensor<10xf32>
    %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
    ^bb0(%in: f32, %in_0: f32, %out: f32):
      %11 = arith.addf %in, %in_0 : f32
      %12 = arith.maximumf %11, %cst : f32
      linalg.yield %12 : f32
    } -> tensor<10xf32>
    flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
    return
  }
}

// -----// IR Dump After TileAndDistributeToWorkgroupsUsingForallOpPass (iree-codegen-tile-and-distribute-to-workgroups-using-forall-op) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConfigTrackingCanonicalizerPass (iree-codegen-config-tracking-canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GPUPromoteMatmulOperandsPass (iree-codegen-gpu-promote-matmul-operands) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After PackToIntrinsicsPass (iree-gpu-pack-to-intrinsics) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After DecomposeBoundaryPackUnPackOpsPass (iree-codegen-decompose-boundary-pack-unpack-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConcretizeMmaShapesPass (iree-gpu-concretize-mma-shapes) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After PropagateReshapesByExpansionPass (iree-codegen-propagate-reshapes-by-expansion) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%4, %5 : tensor<784xf32>, tensor<784x10xf32>) outs(%8 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.mulf %in, %in_0 : f32
    %12 = arith.addf %out, %11 : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GPUApplyTilingLevelPass (iree-codegen-gpu-apply-tiling-level) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConfigTrackingCanonicalizerPass (iree-codegen-config-tracking-canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After DecomposePackUnPackOpsPass (iree-codegen-decompose-pack-unpack-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConcretizeMmaShapesPass (iree-gpu-concretize-mma-shapes) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After PropagateReshapesByExpansionPass (iree-codegen-propagate-reshapes-by-expansion) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConfigTrackingCanonicalizerPass (iree-codegen-config-tracking-canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %extracted_slice_0 = tensor.extract_slice %5[%arg0, 0] [4, 10] [1, 1] : tensor<784x10xf32> to tensor<4x10xf32>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x10xf32>) outs(%arg1 : tensor<10xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %12 = arith.mulf %in, %in_1 : f32
      %13 = arith.addf %out, %12 : f32
      linalg.yield %13 : f32
    } -> tensor<10xf32>
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GPUApplyTilingLevelPass (iree-codegen-gpu-apply-tiling-level) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConfigTrackingCanonicalizerPass (iree-codegen-config-tracking-canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GPUApplyTilingLevelPass (iree-codegen-gpu-apply-tiling-level) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After DistributeMmaToLanesPass (iree-gpu-distribute-mma-to-lanes) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After NormalizeLoopBoundsPass (iree-codegen-normalize-loop-bounds) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After ConfigTrackingCanonicalizerPass (iree-codegen-config-tracking-canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After IREELoopInvariantCodeMotionPass (iree-loop-invariant-code-motion) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After OptimizeTensorInsertExtractSlicesPass (iree-codegen-optimize-tensor-insert-extract-slices) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = linalg.fill ins(%cst : f32) outs(%7 : tensor<10xf32>) -> tensor<10xf32>
  %9 = scf.for %arg0 = %c0 to %c784 step %c4 iter_args(%arg1 = %8) -> (tensor<10xf32>) {
    %extracted_slice = tensor.extract_slice %4[%arg0] [4] [1] : tensor<784xf32> to tensor<4xf32>
    %11 = scf.forall (%arg2) in (10) shared_outs(%arg3 = %arg1) -> (tensor<10xf32>) {
      %extracted_slice_0 = tensor.extract_slice %5[%arg0, %arg2] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %extracted_slice_1 = tensor.extract_slice %arg3[%arg2] [1] [1] : tensor<10xf32> to tensor<1xf32>
      %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice, %extracted_slice_0 : tensor<4xf32>, tensor<4x1xf32>) outs(%extracted_slice_1 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_2: f32, %out: f32):
        %13 = arith.mulf %in, %in_2 : f32
        %14 = arith.addf %out, %13 : f32
        linalg.yield %14 : f32
      } -> tensor<1xf32>
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %12 into %arg3[%arg2] [1] [1] : tensor<1xf32> into tensor<10xf32>
      }
    } {mapping = [#gpu.thread<linear_dim_0>]}
    scf.yield %11 : tensor<10xf32>
  }
  %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%9, %6 : tensor<10xf32>, tensor<10xf32>) outs(%7 : tensor<10xf32>) {
  ^bb0(%in: f32, %in_0: f32, %out: f32):
    %11 = arith.addf %in, %in_0 : f32
    %12 = arith.maximumf %11, %cst : f32
    linalg.yield %12 : f32
  } -> tensor<10xf32>
  flow.dispatch.tensor.store %10, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After FuseAndHoistParallelLoopsPass (iree-gpu-fuse-and-hoist-parallel-loops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GPUGreedilyDistributeToThreadsPass (iree-codegen-gpu-greedily-distribute-to-threads) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After TileLargeTensorsPass (iree-codegen-tile-large-tensors) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After IREELoopInvariantCodeMotionPass (iree-loop-invariant-code-motion) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CombineBarrierRegionsPass (iree-gpu-combine-barrier-regions) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After VectorizeIREEGPUOpsPass (iree-gpu-vectorize-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After DecomposeConvolutionToLowerDimOpsPass (iree-codegen-decompose-convolution-to-lower-dim-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After DecomposeIm2colPass (iree-linalg-ext-decompose-im2col) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After VectorizeIREEVectorExtOpsPass (iree-vector-ext-vectorize-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = linalg.fill ins(%cst : f32) outs(%9 : tensor<1xf32>) -> tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_1 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_2 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"]} ins(%extracted_slice_1, %extracted_slice_2 : tensor<4xf32>, tensor<4x1xf32>) outs(%arg3 : tensor<1xf32>) attrs =  {lowering_config = #iree_gpu.lowering_config<{reduction = [0, 4], thread = [1, 0], workgroup = [32, 0]}>} {
      ^bb0(%in: f32, %in_3: f32, %out: f32):
        %14 = arith.mulf %in, %in_3 : f32
        %15 = arith.addf %out, %14 : f32
        linalg.yield %15 : f32
      } -> tensor<1xf32>
      scf.yield %13 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%11, %extracted_slice : tensor<1xf32>, tensor<1xf32>) outs(%extracted_slice_0 : tensor<1xf32>) {
    ^bb0(%in: f32, %in_1: f32, %out: f32):
      %13 = arith.addf %in, %in_1 : f32
      %14 = arith.maximumf %13, %cst : f32
      linalg.yield %14 : f32
    } -> tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %12 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GenericVectorizationPass (iree-codegen-generic-vectorization) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = vector.transfer_write %cst, %9[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_2 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_3 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %17 = vector.transfer_read %extracted_slice_2[%c0], %cst_0 {in_bounds = [true]} : tensor<4xf32>, vector<4xf32>
      %18 = vector.transfer_read %extracted_slice_3[%c0, %c0], %cst_0 {in_bounds = [true, true]} : tensor<4x1xf32>, vector<4x1xf32>
      %19 = vector.transfer_read %arg3[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
      %20 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %17, %18, %19 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      %21 = vector.transfer_write %20, %arg3[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
      scf.yield %21 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_1 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = vector.transfer_read %11[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
    %13 = vector.transfer_read %extracted_slice[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
    %14 = arith.addf %12, %13 : vector<1xf32>
    %15 = arith.maximumf %14, %cst : vector<1xf32>
    %16 = vector.transfer_write %15, %extracted_slice_1[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %16 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = vector.transfer_write %cst, %9[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_2 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_3 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %17 = vector.transfer_read %extracted_slice_2[%c0], %cst_0 {in_bounds = [true]} : tensor<4xf32>, vector<4xf32>
      %18 = vector.transfer_read %extracted_slice_3[%c0, %c0], %cst_0 {in_bounds = [true, true]} : tensor<4x1xf32>, vector<4x1xf32>
      %19 = vector.transfer_read %arg3[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
      %20 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %17, %18, %19 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      %21 = vector.transfer_write %20, %arg3[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
      scf.yield %21 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_1 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = vector.transfer_read %11[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
    %13 = vector.transfer_read %extracted_slice[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
    %14 = arith.addf %12, %13 : vector<1xf32>
    %15 = arith.maximumf %14, %cst : vector<1xf32>
    %16 = vector.transfer_write %15, %extracted_slice_1[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %16 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = tensor.empty() : tensor<1xf32>
    %10 = vector.transfer_write %cst, %9[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    %11 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %10) -> (tensor<1xf32>) {
      %extracted_slice_2 = tensor.extract_slice %4[%arg2] [4] [1] : tensor<784xf32> to tensor<4xf32>
      %extracted_slice_3 = tensor.extract_slice %5[%arg2, %arg0] [4, 1] [1, 1] : tensor<784x10xf32> to tensor<4x1xf32>
      %17 = vector.transfer_read %extracted_slice_2[%c0], %cst_0 {in_bounds = [true]} : tensor<4xf32>, vector<4xf32>
      %18 = vector.transfer_read %extracted_slice_3[%c0, %c0], %cst_0 {in_bounds = [true, true]} : tensor<4x1xf32>, vector<4x1xf32>
      %19 = vector.transfer_read %arg3[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
      %20 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %17, %18, %19 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      %21 = vector.transfer_write %20, %arg3[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
      scf.yield %21 : tensor<1xf32>
    }
    %extracted_slice = tensor.extract_slice %6[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %extracted_slice_1 = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %12 = vector.transfer_read %11[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
    %13 = vector.transfer_read %extracted_slice[%c0], %cst_0 {in_bounds = [true]} : tensor<1xf32>, vector<1xf32>
    %14 = arith.addf %12, %13 : vector<1xf32>
    %15 = arith.maximumf %14, %cst : vector<1xf32>
    %16 = vector.transfer_write %15, %extracted_slice_1[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %16 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After OptimizeTensorInsertExtractSlicesPass (iree-codegen-optimize-tensor-insert-extract-slices) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After CleanupBufferAllocViewPass (iree-codegen-cleanup-buffer-alloc-view) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GPUCombineValueBarriersPass (iree-codegen-gpu-combine-value-barriers) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = tensor.empty() : tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After EliminateEmptyTensorsPass (iree-eliminate-empty-tensors) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = flow.dispatch.tensor.load %3, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<writeonly:tensor<10xf32>> -> tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After EmptyTensorToAllocTensor (empty-tensor-to-alloc-tensor) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = flow.dispatch.tensor.load %3, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<writeonly:tensor<10xf32>> -> tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After GPUInferMemorySpacePass (iree-codegen-gpu-infer-memory-space) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784xf32>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<784x10xf32>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : !flow.dispatch.tensor<readonly:tensor<10xf32>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  %4 = flow.dispatch.tensor.load %0, offsets = [0], sizes = [784], strides = [1] : !flow.dispatch.tensor<readonly:tensor<784xf32>> -> tensor<784xf32>
  %5 = flow.dispatch.tensor.load %1, offsets = [0, 0], sizes = [784, 10], strides = [1, 1] : !flow.dispatch.tensor<readonly:tensor<784x10xf32>> -> tensor<784x10xf32>
  %6 = flow.dispatch.tensor.load %2, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<readonly:tensor<10xf32>> -> tensor<10xf32>
  %7 = flow.dispatch.tensor.load %3, offsets = [0], sizes = [10], strides = [1] : !flow.dispatch.tensor<writeonly:tensor<10xf32>> -> tensor<10xf32>
  %8 = scf.forall (%arg0) in (10) shared_outs(%arg1 = %7) -> (tensor<10xf32>) {
    %9 = scf.for %arg2 = %c0 to %c784 step %c4 iter_args(%arg3 = %cst) -> (vector<1xf32>) {
      %14 = vector.transfer_read %4[%arg2], %cst_0 {in_bounds = [true]} : tensor<784xf32>, vector<4xf32>
      %15 = vector.transfer_read %5[%arg2, %arg0], %cst_0 {in_bounds = [true, true]} : tensor<784x10xf32>, vector<4x1xf32>
      %16 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %14, %15, %arg3 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %16 : vector<1xf32>
    }
    %extracted_slice = tensor.extract_slice %arg1[%arg0] [1] [1] : tensor<10xf32> to tensor<1xf32>
    %10 = vector.transfer_read %6[%arg0], %cst_0 {in_bounds = [true]} : tensor<10xf32>, vector<1xf32>
    %11 = arith.addf %9, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.transfer_write %12, %extracted_slice[%c0] {in_bounds = [true]} : vector<1xf32>, tensor<1xf32>
    scf.forall.in_parallel {
      tensor.parallel_insert_slice %13 into %arg1[%arg0] [1] [1] : tensor<1xf32> into tensor<10xf32>
    }
  } {mapping = [#gpu.thread<linear_dim_0>]}
  flow.dispatch.tensor.store %8, %3, offsets = [0], sizes = [10], strides = [1] : tensor<10xf32> -> !flow.dispatch.tensor<writeonly:tensor<10xf32>>
  return
}

// -----// IR Dump After IREEComprehensiveBufferizePass (iree-codegen-iree-comprehensive-bufferize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %subview_1 = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    memref.copy %subview, %subview_1 : memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  memref.copy %3, %3 : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<10xf32, #hal.descriptor_type<storage_buffer>>
  return
}

// -----// IR Dump After ResolveShapedTypeResultDims (resolve-shaped-type-result-dims) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %subview_1 = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    memref.copy %subview, %subview_1 : memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  memref.copy %3, %3 : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<10xf32, #hal.descriptor_type<storage_buffer>>
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %subview_1 = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    memref.copy %subview, %subview_1 : memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    memref.copy %subview, %subview : memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After CleanupBufferAllocViewPass (iree-codegen-cleanup-buffer-alloc-view) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After NormalizeLoopBoundsPass (iree-codegen-normalize-loop-bounds) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After GPUVerifyDistributionPass (iree-codegen-gpu-verify-distribution) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %0 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %0, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.forall (%arg0) in (10) {
    %4 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %8 = vector.transfer_read %0[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %9 = vector.transfer_read %1[%arg1, %arg0], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %10 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %8, %9, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %10 : vector<1xf32>
    }
    %subview = memref.subview %3[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %5 = vector.transfer_read %2[%arg0], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %6 = arith.addf %4, %5 : vector<1xf32>
    %7 = arith.maximumf %6, %cst : vector<1xf32>
    vector.transfer_write %7, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  } {mapping = [#gpu.thread<linear_dim_0>]}
  return
}

// -----// IR Dump After GPUDistributeForallPass (iree-codegen-gpu-distribute-forall) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %c4 = arith.constant 4 : index
  %c784 = arith.constant 784 : index
  %cst_0 = arith.constant 0.000000e+00 : f32
  %c0 = arith.constant 0 : index
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %c10 = arith.constant 10 : index
  %c10_1 = arith.constant 10 : index
  %c32 = arith.constant 32 : index
  scf.for %arg0 = %0 to %c10_1 step %c32 {
    %5 = affine.delinearize_index %arg0 into (10) : index
    %6 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %10 = vector.transfer_read %1[%arg1], %cst_0 {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %11 = vector.transfer_read %2[%arg1, %5], %cst_0 {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %12 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %10, %11, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %12 : vector<1xf32>
    }
    %subview = memref.subview %4[%5] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %7 = vector.transfer_read %3[%5], %cst_0 {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %8 = arith.addf %6, %7 : vector<1xf32>
    %9 = arith.maximumf %8, %cst : vector<1xf32>
    vector.transfer_write %9, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After VectorizeMemrefCopyPass (iree-codegen-vectorize-memref-copy) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = affine.delinearize_index %arg0 into (10) : index
    %6 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %10 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %11 = vector.transfer_read %2[%arg1, %5], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %12 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %10, %11, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %12 : vector<1xf32>
    }
    %subview = memref.subview %4[%5] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %7 = vector.transfer_read %3[%5], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %8 = arith.addf %6, %7 : vector<1xf32>
    %9 = arith.maximumf %8, %cst_0 : vector<1xf32>
    vector.transfer_write %9, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After UnrollToIntrinsicsPass (iree-gpu-unroll-to-intrinsics) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = affine.delinearize_index %arg0 into (10) : index
    %6 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %10 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %11 = vector.transfer_read %2[%arg1, %5], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %12 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %10, %11, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %12 : vector<1xf32>
    }
    %subview = memref.subview %4[%5] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %7 = vector.transfer_read %3[%5], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %8 = arith.addf %6, %7 : vector<1xf32>
    %9 = arith.maximumf %8, %cst_0 : vector<1xf32>
    vector.transfer_write %9, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %subview = memref.subview %4[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %subview = memref.subview %4[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After LowerIREEGPUOpsPass (iree-gpu-lower-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %subview = memref.subview %4[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After UnrollAnnotatedLoopsPass (iree-codegen-unroll-annotated-loops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %subview = memref.subview %4[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After IREELoopInvariantCodeMotionPass (iree-loop-invariant-code-motion) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %subview = memref.subview %4[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After GPUReduceBankConflictsPass (iree-codegen-gpu-reduce-bank-conflicts) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %subview = memref.subview %4[%arg0] [1] [1] : memref<10xf32, #hal.descriptor_type<storage_buffer>> to memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %subview[%c0] {in_bounds = [true]} : vector<1xf32>, memref<1xf32, strided<[1], offset: ?>, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After FoldMemRefAliasOps (fold-memref-alias-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After OptimizeVectorTransferPass (iree-codegen-optimize-vector-transfer) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After HoistStaticallyBoundAllocationsPass (iree-codegen-hoist-statically-bound-allocations) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After LLVMGPULowerExecutableTargetPass (iree-llvmgpu-lower-executable-target) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() attributes {translation_info = #iree_codegen.translation_info<pipeline = LLVMGPUTileAndFuse workgroup_size = [32, 1, 1] subgroup_size = 32>} {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
  }
  return
}

// -----// IR Dump After ReconcileTranslationInfoPass (iree-codegen-reconcile-translation-info) //----- //
hal.executable.variant public @cuda_nvptx_fb target(<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>) {
  hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
  ^bb0(%arg0: !hal.device):
    %c1 = arith.constant 1 : index
    %c1_0 = arith.constant 1 : index
    %c1_1 = arith.constant 1 : index
    hal.return %c1, %c1_0, %c1_1 : index, index, index
  }
  builtin.module {
    func.func @main_dispatch_0_vecmat_10x784_f32() {
      %c32 = arith.constant 32 : index
      %c10 = arith.constant 10 : index
      %c0 = arith.constant 0 : index
      %cst = arith.constant 0.000000e+00 : f32
      %c784 = arith.constant 784 : index
      %c4 = arith.constant 4 : index
      %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
      %thread_id_x = gpu.thread_id  x
      %thread_id_y = gpu.thread_id  y
      %thread_id_z = gpu.thread_id  z
      %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
      %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #hal.descriptor_type<storage_buffer>>
      memref.assume_alignment %1, 64 : memref<784xf32, #hal.descriptor_type<storage_buffer>>
      %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
      memref.assume_alignment %2, 64 : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>
      %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #hal.descriptor_type<storage_buffer>>
      memref.assume_alignment %3, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
      %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #hal.descriptor_type<storage_buffer>>
      memref.assume_alignment %4, 64 : memref<10xf32, #hal.descriptor_type<storage_buffer>>
      scf.for %arg0 = %0 to %c10 step %c32 {
        %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
          %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #hal.descriptor_type<storage_buffer>>, vector<4xf32>
          %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #hal.descriptor_type<storage_buffer>>, vector<4x1xf32>
          %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
          scf.yield %11 : vector<1xf32>
        }
        %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #hal.descriptor_type<storage_buffer>>, vector<1xf32>
        %7 = arith.addf %5, %6 : vector<1xf32>
        %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
        vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #hal.descriptor_type<storage_buffer>>
      }
      return
    }
  }
}

// -----// IR Dump After ConvertHALDescriptorTypeToGPUAddressSpacePass (iree-codegen-convert-hal-descriptor-type-to-gpu-address-space) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
    %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
    %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
    scf.for %arg0 = %0 to %c10 step %c32 {
      %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
        %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
        %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
        %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
        scf.yield %11 : vector<1xf32>
      }
      %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
      %7 = arith.addf %5, %6 : vector<1xf32>
      %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
      vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
    }
    return
  }
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
    %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
    %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
    scf.for %arg0 = %0 to %c10 step %c32 {
      %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
        %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
        %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
        %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
        scf.yield %11 : vector<1xf32>
      }
      %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
      %7 = arith.addf %5, %6 : vector<1xf32>
      %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
      vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
    }
    return
  }
}

// -----// IR Dump After CSE (cse) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
    %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
    %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
    scf.for %arg0 = %0 to %c10 step %c32 {
      %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
        %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
        %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
        %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
        scf.yield %11 : vector<1xf32>
      }
      %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
      %7 = arith.addf %5, %6 : vector<1xf32>
      %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
      vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
    }
    return
  }
}

// -----// IR Dump After LowerUKernelOpsToCallsPass (iree-codegen-lower-ukernel-ops-to-calls) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
    %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
    %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
    scf.for %arg0 = %0 to %c10 step %c32 {
      %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
        %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
        %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
        %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
        scf.yield %11 : vector<1xf32>
      }
      %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
      %7 = arith.addf %5, %6 : vector<1xf32>
      %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
      vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
    }
    return
  }
}

// -----// IR Dump After LinalgExtToLoopsPass (iree-linalg-ext-to-loops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After MemrefCopyToLinalgPass (iree-codegen-memrefcopy-to-linalg) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After ConvertLinalgToLoopsPass (convert-linalg-to-loops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After PadDynamicAllocPass (iree-codegen-pad-dynamic-alloc) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = affine.apply affine_map<()[s0, s1, s2] -> (s0 + s1 * 32 + s2 * 32)>()[%thread_id_x, %thread_id_y, %thread_id_z]
  %1 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %1, 64 : memref<784xf32, #gpu.address_space<global>>
  %2 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %2, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %3 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %3, 64 : memref<10xf32, #gpu.address_space<global>>
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %0 to %c10 step %c32 {
    %5 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %9 = vector.transfer_read %1[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %10 = vector.transfer_read %2[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %11 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %9, %10, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %11 : vector<1xf32>
    }
    %6 = vector.transfer_read %3[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %7 = arith.addf %5, %6 : vector<1xf32>
    %8 = arith.maximumf %7, %cst_0 : vector<1xf32>
    vector.transfer_write %8, %4[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %c32_1 = arith.constant 32 : index
  %0 = arith.muli %thread_id_y, %c32_1 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %c32_2 = arith.constant 32 : index
  %2 = arith.muli %thread_id_z, %c32_2 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %12 = vector.transfer_read %4[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %13 = vector.transfer_read %5[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %14 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %12, %13, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %14 : vector<1xf32>
    }
    %9 = vector.transfer_read %6[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %10 = arith.addf %8, %9 : vector<1xf32>
    %11 = arith.maximumf %10, %cst_0 : vector<1xf32>
    vector.transfer_write %11, %7[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %12 = vector.transfer_read %4[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %13 = vector.transfer_read %5[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %14 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %12, %13, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %14 : vector<1xf32>
    }
    %9 = vector.transfer_read %6[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %10 = arith.addf %8, %9 : vector<1xf32>
    %11 = arith.maximumf %10, %cst_0 : vector<1xf32>
    vector.transfer_write %11, %7[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %12 = vector.transfer_read %4[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %13 = vector.transfer_read %5[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %14 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %12, %13, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %14 : vector<1xf32>
    }
    %9 = vector.transfer_read %6[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %10 = arith.addf %8, %9 : vector<1xf32>
    %11 = arith.maximumf %10, %cst_0 : vector<1xf32>
    vector.transfer_write %11, %7[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After OneShotBufferize (one-shot-bufferize) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = arith.muli %thread_id_y, %c32 : index
    %1 = arith.addi %thread_id_x, %0 : index
    %2 = arith.muli %thread_id_z, %c32 : index
    %3 = arith.addi %1, %2 : index
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
    %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
    %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
    scf.for %arg0 = %3 to %c10 step %c32 {
      %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
        %12 = vector.transfer_read %4[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
        %13 = vector.transfer_read %5[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
        %14 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %12, %13, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
        scf.yield %14 : vector<1xf32>
      }
      %9 = vector.transfer_read %6[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
      %10 = arith.addf %8, %9 : vector<1xf32>
      %11 = arith.maximumf %10, %cst_0 : vector<1xf32>
      vector.transfer_write %11, %7[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
    }
    return
  }
}

// -----// IR Dump After FoldTensorExtractOpPass (iree-codegen-fold-tensor-extract-op) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %cst = arith.constant 0.000000e+00 : f32
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst_0 = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst_0) -> (vector<1xf32>) {
      %12 = vector.transfer_read %4[%arg1], %cst {in_bounds = [true]} : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %13 = vector.transfer_read %5[%arg1, %arg0], %cst {in_bounds = [true, true]} : memref<784x10xf32, #gpu.address_space<global>>, vector<4x1xf32>
      %14 = vector.contract {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d1, d0)>, affine_map<(d0, d1) -> (d0)>], iterator_types = ["parallel", "reduction"], kind = #vector.kind<add>} %12, %13, %arg2 : vector<4xf32>, vector<4x1xf32> into vector<1xf32>
      scf.yield %14 : vector<1xf32>
    }
    %9 = vector.transfer_read %6[%arg0], %cst {in_bounds = [true]} : memref<10xf32, #gpu.address_space<global>>, vector<1xf32>
    %10 = arith.addf %8, %9 : vector<1xf32>
    %11 = arith.maximumf %10, %cst_0 : vector<1xf32>
    vector.transfer_write %11, %7[%arg0] {in_bounds = [true]} : vector<1xf32>, memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After LLVMGPUVectorLoweringPass (iree-llvmgpu-vector-lowering) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<(d0) -> (d0 + 1)>(%arg1)
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<(d0) -> (d0 + 2)>(%arg1)
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<(d0) -> (d0 + 3)>(%arg1)
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After ExpandGPUOpsPass (iree-codegen-expand-gpu-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<(d0) -> (d0 + 1)>(%arg1)
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<(d0) -> (d0 + 2)>(%arg1)
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<(d0) -> (d0 + 3)>(%arg1)
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After ExtractAddressComputationGPUPass (extract-address-computation-gpu) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %subview_1 = memref.subview %5[%arg1, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %15 = memref.load %subview_1[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<(d0) -> (d0 + 1)>(%arg1)
      %subview_2 = memref.subview %5[%17, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %18 = memref.load %subview_2[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<(d0) -> (d0 + 2)>(%arg1)
      %subview_3 = memref.subview %5[%20, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %21 = memref.load %subview_3[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<(d0) -> (d0 + 3)>(%arg1)
      %subview_4 = memref.subview %5[%23, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %24 = memref.load %subview_4[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %subview = memref.subview %6[%arg0] [1] [1] : memref<10xf32, #gpu.address_space<global>> to memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
    %9 = memref.load %subview[%c0] : memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    %subview_0 = memref.subview %7[%arg0] [1] [1] : memref<10xf32, #gpu.address_space<global>> to memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
    memref.store %13, %subview_0[%c0] : memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After ExpandOps (memref-expand) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %subview_1 = memref.subview %5[%arg1, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %15 = memref.load %subview_1[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<(d0) -> (d0 + 1)>(%arg1)
      %subview_2 = memref.subview %5[%17, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %18 = memref.load %subview_2[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<(d0) -> (d0 + 2)>(%arg1)
      %subview_3 = memref.subview %5[%20, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %21 = memref.load %subview_3[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<(d0) -> (d0 + 3)>(%arg1)
      %subview_4 = memref.subview %5[%23, %arg0] [1, 1] [1, 1] : memref<784x10xf32, #gpu.address_space<global>> to memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %24 = memref.load %subview_4[%c0, %c0] : memref<1x1xf32, strided<[10, 1], offset: ?>, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %subview = memref.subview %6[%arg0] [1] [1] : memref<10xf32, #gpu.address_space<global>> to memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
    %9 = memref.load %subview[%c0] : memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    %subview_0 = memref.subview %7[%arg0] [1] [1] : memref<10xf32, #gpu.address_space<global>> to memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
    memref.store %13, %subview_0[%c0] : memref<1xf32, strided<[1], offset: ?>, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After FoldMemRefAliasOps (fold-memref-alias-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<(d0) -> (d0 + 1)>(%arg1)
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<(d0) -> (d0 + 2)>(%arg1)
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<(d0) -> (d0 + 3)>(%arg1)
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<(d0) -> (d0 + 1)>(%arg1)
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<(d0) -> (d0 + 2)>(%arg1)
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<(d0) -> (d0 + 3)>(%arg1)
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After IREELoopInvariantCodeMotionPass (iree-loop-invariant-code-motion) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<(d0) -> (d0 + 1)>(%arg1)
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<(d0) -> (d0 + 2)>(%arg1)
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<(d0) -> (d0 + 3)>(%arg1)
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After DecomposeAffineOpsPass (iree-codegen-decompose-affine-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<()[s0] -> (s0 + 1)>()[%arg1]
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<()[s0] -> (s0 + 2)>()[%arg1]
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<()[s0] -> (s0 + 3)>()[%arg1]
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<()[s0] -> (s0 + 1)>()[%arg1]
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<()[s0] -> (s0 + 2)>()[%arg1]
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<()[s0] -> (s0 + 3)>()[%arg1]
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After IREELoopInvariantCodeMotionPass (iree-loop-invariant-code-motion) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %17 = affine.apply affine_map<()[s0] -> (s0 + 1)>()[%arg1]
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %20 = affine.apply affine_map<()[s0] -> (s0 + 2)>()[%arg1]
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %23 = affine.apply affine_map<()[s0] -> (s0 + 3)>()[%arg1]
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %c1 = arith.constant 1 : index
      %17 = arith.addi %arg1, %c1 : index
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %c2 = arith.constant 2 : index
      %20 = arith.addi %arg1, %c2 : index
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %c3 = arith.constant 3 : index
      %23 = arith.addi %arg1, %c3 : index
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After GPUCheckResourceUsagePass (iree-codegen-gpu-check-resource-usage) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  scf.for %arg0 = %3 to %c10 step %c32 {
    %8 = scf.for %arg1 = %c0 to %c784 step %c4 iter_args(%arg2 = %cst) -> (vector<1xf32>) {
      %14 = vector.load %4[%arg1] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
      %15 = memref.load %5[%arg1, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %16 = vector.broadcast %15 : f32 to vector<1xf32>
      %c1 = arith.constant 1 : index
      %17 = arith.addi %arg1, %c1 : index
      %18 = memref.load %5[%17, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %19 = vector.broadcast %18 : f32 to vector<1xf32>
      %c2 = arith.constant 2 : index
      %20 = arith.addi %arg1, %c2 : index
      %21 = memref.load %5[%20, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %22 = vector.broadcast %21 : f32 to vector<1xf32>
      %c3 = arith.constant 3 : index
      %23 = arith.addi %arg1, %c3 : index
      %24 = memref.load %5[%23, %arg0] : memref<784x10xf32, #gpu.address_space<global>>
      %25 = vector.broadcast %24 : f32 to vector<1xf32>
      %26 = vector.extract %14[0] : f32 from vector<4xf32>
      %27 = vector.splat %26 : vector<1xf32>
      %28 = vector.fma %16, %27, %arg2 : vector<1xf32>
      %29 = vector.extract %14[1] : f32 from vector<4xf32>
      %30 = vector.splat %29 : vector<1xf32>
      %31 = vector.fma %19, %30, %28 : vector<1xf32>
      %32 = vector.extract %14[2] : f32 from vector<4xf32>
      %33 = vector.splat %32 : vector<1xf32>
      %34 = vector.fma %22, %33, %31 : vector<1xf32>
      %35 = vector.extract %14[3] : f32 from vector<4xf32>
      %36 = vector.splat %35 : vector<1xf32>
      %37 = vector.fma %25, %36, %34 : vector<1xf32>
      scf.yield %37 : vector<1xf32>
    }
    %9 = memref.load %6[%arg0] : memref<10xf32, #gpu.address_space<global>>
    %10 = vector.broadcast %9 : f32 to vector<1xf32>
    %11 = arith.addf %8, %10 : vector<1xf32>
    %12 = arith.maximumf %11, %cst : vector<1xf32>
    %13 = vector.extract %12[0] : f32 from vector<1xf32>
    memref.store %13, %7[%arg0] : memref<10xf32, #gpu.address_space<global>>
  }
  return
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb5
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2, ^bb6
^bb2:  // pred: ^bb1
  cf.br ^bb3(%c0, %cst : index, vector<1xf32>)
^bb3(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb2, ^bb4
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb4, ^bb5
^bb4:  // pred: ^bb3
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %c1 = arith.constant 1 : index
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %c2 = arith.constant 2 : index
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %c3 = arith.constant 3 : index
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb3(%37, %36 : index, vector<1xf32>)
^bb5:  // pred: ^bb3
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb6:  // pred: ^bb1
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After ConvertComplexToStandard (convert-complex-to-standard) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After ConvertBf16ArithToF32Pass (iree-convert-bf16-arith-to-f32) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After ConvertBf16ToUInt16BuffersPass (iree-codegen-convert-bf16-to-uint16-buffers) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After PolynomialApproximationPass (iree-codegen-polynomial-approximation) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After ExpandOps (memref-expand) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After FoldMemRefAliasOps (fold-memref-alias-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After EmulateNarrowTypePass (iree-codegen-emulate-narrow-type) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After AffineExpandIndexOps (affine-expand-index-ops) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After CSE (cse) //----- //
func.func @main_dispatch_0_vecmat_10x784_f32() {
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c32 = arith.constant 32 : index
  %c10 = arith.constant 10 : index
  %c0 = arith.constant 0 : index
  %c784 = arith.constant 784 : index
  %c4 = arith.constant 4 : index
  %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
  %thread_id_x = gpu.thread_id  x
  %thread_id_y = gpu.thread_id  y
  %thread_id_z = gpu.thread_id  z
  %0 = arith.muli %thread_id_y, %c32 : index
  %1 = arith.addi %thread_id_x, %0 : index
  %2 = arith.muli %thread_id_z, %c32 : index
  %3 = arith.addi %1, %2 : index
  %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
  memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
  %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
  memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
  %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
  %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
  memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
  cf.br ^bb1(%3 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
  %9 = arith.cmpi slt, %8, %c10 : index
  cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
  %12 = arith.cmpi slt, %10, %c784 : index
  cf.cond_br %12, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
  %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %15 = vector.broadcast %14 : f32 to vector<1xf32>
  %16 = arith.addi %10, %c1 : index
  %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %18 = vector.broadcast %17 : f32 to vector<1xf32>
  %19 = arith.addi %10, %c2 : index
  %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %21 = vector.broadcast %20 : f32 to vector<1xf32>
  %22 = arith.addi %10, %c3 : index
  %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
  %24 = vector.broadcast %23 : f32 to vector<1xf32>
  %25 = vector.extract %13[0] : f32 from vector<4xf32>
  %26 = vector.splat %25 : vector<1xf32>
  %27 = vector.fma %15, %26, %11 : vector<1xf32>
  %28 = vector.extract %13[1] : f32 from vector<4xf32>
  %29 = vector.splat %28 : vector<1xf32>
  %30 = vector.fma %18, %29, %27 : vector<1xf32>
  %31 = vector.extract %13[2] : f32 from vector<4xf32>
  %32 = vector.splat %31 : vector<1xf32>
  %33 = vector.fma %21, %32, %30 : vector<1xf32>
  %34 = vector.extract %13[3] : f32 from vector<4xf32>
  %35 = vector.splat %34 : vector<1xf32>
  %36 = vector.fma %24, %35, %33 : vector<1xf32>
  %37 = arith.addi %10, %c4 : index
  cf.br ^bb2(%37, %36 : index, vector<1xf32>)
^bb4:  // pred: ^bb2
  %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
  %39 = vector.broadcast %38 : f32 to vector<1xf32>
  %40 = arith.addf %11, %39 : vector<1xf32>
  %41 = arith.maximumf %40, %cst : vector<1xf32>
  %42 = vector.extract %41[0] : f32 from vector<1xf32>
  memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
  %43 = arith.addi %8, %c32 : index
  cf.br ^bb1(%43 : index)
^bb5:  // pred: ^bb1
  return
}

// -----// IR Dump After StripDebugInfo (strip-debuginfo) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = arith.muli %thread_id_y, %c32 : index
    %1 = arith.addi %thread_id_x, %0 : index
    %2 = arith.muli %thread_id_z, %c32 : index
    %3 = arith.addi %1, %2 : index
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
    %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
    %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
    cf.br ^bb1(%3 : index)
  ^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
    %9 = arith.cmpi slt, %8, %c10 : index
    cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
  ^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
    %12 = arith.cmpi slt, %10, %c784 : index
    cf.cond_br %12, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
    %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %15 = vector.broadcast %14 : f32 to vector<1xf32>
    %16 = arith.addi %10, %c1 : index
    %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %18 = vector.broadcast %17 : f32 to vector<1xf32>
    %19 = arith.addi %10, %c2 : index
    %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %21 = vector.broadcast %20 : f32 to vector<1xf32>
    %22 = arith.addi %10, %c3 : index
    %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %24 = vector.broadcast %23 : f32 to vector<1xf32>
    %25 = vector.extract %13[0] : f32 from vector<4xf32>
    %26 = vector.splat %25 : vector<1xf32>
    %27 = vector.fma %15, %26, %11 : vector<1xf32>
    %28 = vector.extract %13[1] : f32 from vector<4xf32>
    %29 = vector.splat %28 : vector<1xf32>
    %30 = vector.fma %18, %29, %27 : vector<1xf32>
    %31 = vector.extract %13[2] : f32 from vector<4xf32>
    %32 = vector.splat %31 : vector<1xf32>
    %33 = vector.fma %21, %32, %30 : vector<1xf32>
    %34 = vector.extract %13[3] : f32 from vector<4xf32>
    %35 = vector.splat %34 : vector<1xf32>
    %36 = vector.fma %24, %35, %33 : vector<1xf32>
    %37 = arith.addi %10, %c4 : index
    cf.br ^bb2(%37, %36 : index, vector<1xf32>)
  ^bb4:  // pred: ^bb2
    %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
    %39 = vector.broadcast %38 : f32 to vector<1xf32>
    %40 = arith.addf %11, %39 : vector<1xf32>
    %41 = arith.maximumf %40, %cst : vector<1xf32>
    %42 = vector.extract %41[0] : f32 from vector<1xf32>
    memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
    %43 = arith.addi %8, %c32 : index
    cf.br ^bb1(%43 : index)
  ^bb5:  // pred: ^bb1
    return
  }
}

// -----// IR Dump After LLVMGPUCastAddressSpaceFunctionPass (iree-llvmgpu-cast-address-space-function) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = arith.muli %thread_id_y, %c32 : index
    %1 = arith.addi %thread_id_x, %0 : index
    %2 = arith.muli %thread_id_z, %c32 : index
    %3 = arith.addi %1, %2 : index
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
    %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
    %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
    cf.br ^bb1(%3 : index)
  ^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
    %9 = arith.cmpi slt, %8, %c10 : index
    cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
  ^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
    %12 = arith.cmpi slt, %10, %c784 : index
    cf.cond_br %12, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
    %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %15 = vector.broadcast %14 : f32 to vector<1xf32>
    %16 = arith.addi %10, %c1 : index
    %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %18 = vector.broadcast %17 : f32 to vector<1xf32>
    %19 = arith.addi %10, %c2 : index
    %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %21 = vector.broadcast %20 : f32 to vector<1xf32>
    %22 = arith.addi %10, %c3 : index
    %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %24 = vector.broadcast %23 : f32 to vector<1xf32>
    %25 = vector.extract %13[0] : f32 from vector<4xf32>
    %26 = vector.splat %25 : vector<1xf32>
    %27 = vector.fma %15, %26, %11 : vector<1xf32>
    %28 = vector.extract %13[1] : f32 from vector<4xf32>
    %29 = vector.splat %28 : vector<1xf32>
    %30 = vector.fma %18, %29, %27 : vector<1xf32>
    %31 = vector.extract %13[2] : f32 from vector<4xf32>
    %32 = vector.splat %31 : vector<1xf32>
    %33 = vector.fma %21, %32, %30 : vector<1xf32>
    %34 = vector.extract %13[3] : f32 from vector<4xf32>
    %35 = vector.splat %34 : vector<1xf32>
    %36 = vector.fma %24, %35, %33 : vector<1xf32>
    %37 = arith.addi %10, %c4 : index
    cf.br ^bb2(%37, %36 : index, vector<1xf32>)
  ^bb4:  // pred: ^bb2
    %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
    %39 = vector.broadcast %38 : f32 to vector<1xf32>
    %40 = arith.addf %11, %39 : vector<1xf32>
    %41 = arith.maximumf %40, %cst : vector<1xf32>
    %42 = vector.extract %41[0] : f32 from vector<1xf32>
    memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
    %43 = arith.addi %8, %c32 : index
    cf.br ^bb1(%43 : index)
  ^bb5:  // pred: ^bb1
    return
  }
}

// -----// IR Dump After DropCompilerHints (iree-util-drop-compiler-hints) //----- //
module {
  func.func @main_dispatch_0_vecmat_10x784_f32() {
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c10 = arith.constant 10 : index
    %c0 = arith.constant 0 : index
    %c784 = arith.constant 784 : index
    %c4 = arith.constant 4 : index
    %cst = arith.constant dense<0.000000e+00> : vector<1xf32>
    %thread_id_x = gpu.thread_id  x
    %thread_id_y = gpu.thread_id  y
    %thread_id_z = gpu.thread_id  z
    %0 = arith.muli %thread_id_y, %c32 : index
    %1 = arith.addi %thread_id_x, %0 : index
    %2 = arith.muli %thread_id_z, %c32 : index
    %3 = arith.addi %1, %2 : index
    %4 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(0) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784xf32, #gpu.address_space<global>>
    memref.assume_alignment %4, 64 : memref<784xf32, #gpu.address_space<global>>
    %5 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(1) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<784x10xf32, #gpu.address_space<global>>
    memref.assume_alignment %5, 64 : memref<784x10xf32, #gpu.address_space<global>>
    %6 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(2) alignment(64) offset(%c0) flags("ReadOnly|Indirect") : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %6, 64 : memref<10xf32, #gpu.address_space<global>>
    %7 = hal.interface.binding.subspan layout(<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) binding(3) alignment(64) offset(%c0) flags(Indirect) : memref<10xf32, #gpu.address_space<global>>
    memref.assume_alignment %7, 64 : memref<10xf32, #gpu.address_space<global>>
    cf.br ^bb1(%3 : index)
  ^bb1(%8: index):  // 2 preds: ^bb0, ^bb4
    %9 = arith.cmpi slt, %8, %c10 : index
    cf.cond_br %9, ^bb2(%c0, %cst : index, vector<1xf32>), ^bb5
  ^bb2(%10: index, %11: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
    %12 = arith.cmpi slt, %10, %c784 : index
    cf.cond_br %12, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %13 = vector.load %4[%10] : memref<784xf32, #gpu.address_space<global>>, vector<4xf32>
    %14 = memref.load %5[%10, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %15 = vector.broadcast %14 : f32 to vector<1xf32>
    %16 = arith.addi %10, %c1 : index
    %17 = memref.load %5[%16, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %18 = vector.broadcast %17 : f32 to vector<1xf32>
    %19 = arith.addi %10, %c2 : index
    %20 = memref.load %5[%19, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %21 = vector.broadcast %20 : f32 to vector<1xf32>
    %22 = arith.addi %10, %c3 : index
    %23 = memref.load %5[%22, %8] : memref<784x10xf32, #gpu.address_space<global>>
    %24 = vector.broadcast %23 : f32 to vector<1xf32>
    %25 = vector.extract %13[0] : f32 from vector<4xf32>
    %26 = vector.splat %25 : vector<1xf32>
    %27 = vector.fma %15, %26, %11 : vector<1xf32>
    %28 = vector.extract %13[1] : f32 from vector<4xf32>
    %29 = vector.splat %28 : vector<1xf32>
    %30 = vector.fma %18, %29, %27 : vector<1xf32>
    %31 = vector.extract %13[2] : f32 from vector<4xf32>
    %32 = vector.splat %31 : vector<1xf32>
    %33 = vector.fma %21, %32, %30 : vector<1xf32>
    %34 = vector.extract %13[3] : f32 from vector<4xf32>
    %35 = vector.splat %34 : vector<1xf32>
    %36 = vector.fma %24, %35, %33 : vector<1xf32>
    %37 = arith.addi %10, %c4 : index
    cf.br ^bb2(%37, %36 : index, vector<1xf32>)
  ^bb4:  // pred: ^bb2
    %38 = memref.load %6[%8] : memref<10xf32, #gpu.address_space<global>>
    %39 = vector.broadcast %38 : f32 to vector<1xf32>
    %40 = arith.addf %11, %39 : vector<1xf32>
    %41 = arith.maximumf %40, %cst : vector<1xf32>
    %42 = vector.extract %41[0] : f32 from vector<1xf32>
    memref.store %42, %7[%8] : memref<10xf32, #gpu.address_space<global>>
    %43 = arith.addi %8, %c32 : index
    cf.br ^bb1(%43 : index)
  ^bb5:  // pred: ^bb1
    return
  }
}

// -----// IR Dump After ConvertToNVVMPass (iree-convert-to-nvvm) //----- //
module {
  llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
    %0 = llvm.mlir.constant(3 : i64) : i64
    %1 = llvm.mlir.constant(2 : i64) : i64
    %2 = llvm.mlir.constant(1 : i64) : i64
    %3 = llvm.mlir.constant(0 : i64) : i64
    %4 = llvm.mlir.constant(0 : i32) : i32
    %5 = llvm.mlir.undef : vector<1xf32>
    %6 = llvm.mlir.constant(63 : index) : i64
    %7 = llvm.mlir.constant(3 : index) : i64
    %8 = llvm.mlir.constant(2 : index) : i64
    %9 = llvm.mlir.constant(1 : index) : i64
    %10 = llvm.mlir.constant(32 : index) : i64
    %11 = llvm.mlir.constant(10 : index) : i64
    %12 = llvm.mlir.constant(0 : index) : i64
    %13 = llvm.mlir.constant(784 : index) : i64
    %14 = llvm.mlir.constant(4 : index) : i64
    %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
    %16 = nvvm.read.ptx.sreg.tid.x : i32
    %17 = llvm.sext %16 : i32 to i64
    %18 = nvvm.read.ptx.sreg.tid.y : i32
    %19 = llvm.sext %18 : i32 to i64
    %20 = nvvm.read.ptx.sreg.tid.z : i32
    %21 = llvm.sext %20 : i32 to i64
    %22 = llvm.mul %19, %10 : i64
    %23 = llvm.add %17, %22 : i64
    %24 = llvm.mul %21, %10 : i64
    %25 = llvm.add %23, %24 : i64
    %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
    %27 = llvm.and %26, %6 : i64
    %28 = llvm.icmp "eq" %27, %12 : i64
    llvm.intr.assume %28 : i1
    %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
    %30 = llvm.and %29, %6 : i64
    %31 = llvm.icmp "eq" %30, %12 : i64
    llvm.intr.assume %31 : i1
    %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
    %33 = llvm.and %32, %6 : i64
    %34 = llvm.icmp "eq" %33, %12 : i64
    llvm.intr.assume %34 : i1
    %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
    %36 = llvm.and %35, %6 : i64
    %37 = llvm.icmp "eq" %36, %12 : i64
    llvm.intr.assume %37 : i1
    llvm.br ^bb1(%25 : i64)
  ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
    %39 = llvm.icmp "slt" %38, %11 : i64
    llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
  ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
    %42 = llvm.icmp "slt" %40, %13 : i64
    llvm.cond_br %42, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
    %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
    %45 = llvm.mul %40, %11 : i64
    %46 = llvm.add %45, %38 : i64
    %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
    %48 = llvm.load %47 : !llvm.ptr<1> -> f32
    %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
    %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
    %51 = llvm.add %40, %9 : i64
    %52 = llvm.mul %51, %11 : i64
    %53 = llvm.add %52, %38 : i64
    %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
    %55 = llvm.load %54 : !llvm.ptr<1> -> f32
    %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
    %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
    %58 = llvm.add %40, %8 : i64
    %59 = llvm.mul %58, %11 : i64
    %60 = llvm.add %59, %38 : i64
    %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
    %62 = llvm.load %61 : !llvm.ptr<1> -> f32
    %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
    %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
    %65 = llvm.add %40, %7 : i64
    %66 = llvm.mul %65, %11 : i64
    %67 = llvm.add %66, %38 : i64
    %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
    %69 = llvm.load %68 : !llvm.ptr<1> -> f32
    %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
    %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
    %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
    %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
    %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
    %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
    %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
    %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
    %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
    %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
    %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
    %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
    %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
    %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
    %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
    %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
    %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
    %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
    %88 = llvm.add %40, %14 : i64
    llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
  ^bb4:  // pred: ^bb2
    %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
    %90 = llvm.load %89 : !llvm.ptr<1> -> f32
    %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
    %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
    %93 = llvm.fadd %41, %92 : vector<1xf32>
    %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
    %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
    %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
    llvm.store %95, %96 : f32, !llvm.ptr<1>
    %97 = llvm.add %38, %10 : i64
    llvm.br ^bb1(%97 : i64)
  ^bb5:  // pred: ^bb1
    llvm.return
  }
}

// -----// IR Dump After TranslateTargetExecutableVariantsPass (iree-hal-translate-target-executable-variants) //----- //
hal.executable.variant public @cuda_nvptx_fb target(<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>) {
  hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
  ^bb0(%arg0: !hal.device):
    %c1 = arith.constant 1 : index
    %c1_0 = arith.constant 1 : index
    %c1_1 = arith.constant 1 : index
    hal.return %c1, %c1_0, %c1_1 : index, index, index
  }
  builtin.module {
    llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
      %0 = llvm.mlir.constant(3 : i64) : i64
      %1 = llvm.mlir.constant(2 : i64) : i64
      %2 = llvm.mlir.constant(1 : i64) : i64
      %3 = llvm.mlir.constant(0 : i64) : i64
      %4 = llvm.mlir.constant(0 : i32) : i32
      %5 = llvm.mlir.undef : vector<1xf32>
      %6 = llvm.mlir.constant(63 : index) : i64
      %7 = llvm.mlir.constant(3 : index) : i64
      %8 = llvm.mlir.constant(2 : index) : i64
      %9 = llvm.mlir.constant(1 : index) : i64
      %10 = llvm.mlir.constant(32 : index) : i64
      %11 = llvm.mlir.constant(10 : index) : i64
      %12 = llvm.mlir.constant(0 : index) : i64
      %13 = llvm.mlir.constant(784 : index) : i64
      %14 = llvm.mlir.constant(4 : index) : i64
      %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
      %16 = nvvm.read.ptx.sreg.tid.x : i32
      %17 = llvm.sext %16 : i32 to i64
      %18 = nvvm.read.ptx.sreg.tid.y : i32
      %19 = llvm.sext %18 : i32 to i64
      %20 = nvvm.read.ptx.sreg.tid.z : i32
      %21 = llvm.sext %20 : i32 to i64
      %22 = llvm.mul %19, %10 : i64
      %23 = llvm.add %17, %22 : i64
      %24 = llvm.mul %21, %10 : i64
      %25 = llvm.add %23, %24 : i64
      %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
      %27 = llvm.and %26, %6 : i64
      %28 = llvm.icmp "eq" %27, %12 : i64
      llvm.intr.assume %28 : i1
      %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
      %30 = llvm.and %29, %6 : i64
      %31 = llvm.icmp "eq" %30, %12 : i64
      llvm.intr.assume %31 : i1
      %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
      %33 = llvm.and %32, %6 : i64
      %34 = llvm.icmp "eq" %33, %12 : i64
      llvm.intr.assume %34 : i1
      %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
      %36 = llvm.and %35, %6 : i64
      %37 = llvm.icmp "eq" %36, %12 : i64
      llvm.intr.assume %37 : i1
      llvm.br ^bb1(%25 : i64)
    ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
      %39 = llvm.icmp "slt" %38, %11 : i64
      llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
    ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
      %42 = llvm.icmp "slt" %40, %13 : i64
      llvm.cond_br %42, ^bb3, ^bb4
    ^bb3:  // pred: ^bb2
      %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
      %45 = llvm.mul %40, %11 : i64
      %46 = llvm.add %45, %38 : i64
      %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %48 = llvm.load %47 : !llvm.ptr<1> -> f32
      %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
      %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
      %51 = llvm.add %40, %9 : i64
      %52 = llvm.mul %51, %11 : i64
      %53 = llvm.add %52, %38 : i64
      %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %55 = llvm.load %54 : !llvm.ptr<1> -> f32
      %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
      %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
      %58 = llvm.add %40, %8 : i64
      %59 = llvm.mul %58, %11 : i64
      %60 = llvm.add %59, %38 : i64
      %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %62 = llvm.load %61 : !llvm.ptr<1> -> f32
      %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
      %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
      %65 = llvm.add %40, %7 : i64
      %66 = llvm.mul %65, %11 : i64
      %67 = llvm.add %66, %38 : i64
      %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %69 = llvm.load %68 : !llvm.ptr<1> -> f32
      %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
      %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
      %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
      %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
      %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
      %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
      %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
      %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
      %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
      %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
      %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
      %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
      %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
      %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
      %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %88 = llvm.add %40, %14 : i64
      llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
    ^bb4:  // pred: ^bb2
      %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %90 = llvm.load %89 : !llvm.ptr<1> -> f32
      %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
      %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
      %93 = llvm.fadd %41, %92 : vector<1xf32>
      %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
      %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      llvm.store %95, %96 : f32, !llvm.ptr<1>
      %97 = llvm.add %38, %10 : i64
      llvm.br ^bb1(%97 : i64)
    ^bb5:  // pred: ^bb1
      llvm.return
    }
  }
}

// -----// IR Dump After TranslateExecutablesPass (iree-hal-translate-executables) //----- //
hal.executable private @main_dispatch_0 {
  hal.executable.variant public @cuda_nvptx_fb target(<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>) {
    hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
    ^bb0(%arg0: !hal.device):
      %c1 = arith.constant 1 : index
      %c1_0 = arith.constant 1 : index
      %c1_1 = arith.constant 1 : index
      hal.return %c1, %c1_0, %c1_1 : index, index, index
    }
    builtin.module {
      llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
        %0 = llvm.mlir.constant(3 : i64) : i64
        %1 = llvm.mlir.constant(2 : i64) : i64
        %2 = llvm.mlir.constant(1 : i64) : i64
        %3 = llvm.mlir.constant(0 : i64) : i64
        %4 = llvm.mlir.constant(0 : i32) : i32
        %5 = llvm.mlir.undef : vector<1xf32>
        %6 = llvm.mlir.constant(63 : index) : i64
        %7 = llvm.mlir.constant(3 : index) : i64
        %8 = llvm.mlir.constant(2 : index) : i64
        %9 = llvm.mlir.constant(1 : index) : i64
        %10 = llvm.mlir.constant(32 : index) : i64
        %11 = llvm.mlir.constant(10 : index) : i64
        %12 = llvm.mlir.constant(0 : index) : i64
        %13 = llvm.mlir.constant(784 : index) : i64
        %14 = llvm.mlir.constant(4 : index) : i64
        %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
        %16 = nvvm.read.ptx.sreg.tid.x : i32
        %17 = llvm.sext %16 : i32 to i64
        %18 = nvvm.read.ptx.sreg.tid.y : i32
        %19 = llvm.sext %18 : i32 to i64
        %20 = nvvm.read.ptx.sreg.tid.z : i32
        %21 = llvm.sext %20 : i32 to i64
        %22 = llvm.mul %19, %10 : i64
        %23 = llvm.add %17, %22 : i64
        %24 = llvm.mul %21, %10 : i64
        %25 = llvm.add %23, %24 : i64
        %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
        %27 = llvm.and %26, %6 : i64
        %28 = llvm.icmp "eq" %27, %12 : i64
        llvm.intr.assume %28 : i1
        %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
        %30 = llvm.and %29, %6 : i64
        %31 = llvm.icmp "eq" %30, %12 : i64
        llvm.intr.assume %31 : i1
        %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
        %33 = llvm.and %32, %6 : i64
        %34 = llvm.icmp "eq" %33, %12 : i64
        llvm.intr.assume %34 : i1
        %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
        %36 = llvm.and %35, %6 : i64
        %37 = llvm.icmp "eq" %36, %12 : i64
        llvm.intr.assume %37 : i1
        llvm.br ^bb1(%25 : i64)
      ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
        %39 = llvm.icmp "slt" %38, %11 : i64
        llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
      ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
        %42 = llvm.icmp "slt" %40, %13 : i64
        llvm.cond_br %42, ^bb3, ^bb4
      ^bb3:  // pred: ^bb2
        %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
        %45 = llvm.mul %40, %11 : i64
        %46 = llvm.add %45, %38 : i64
        %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %48 = llvm.load %47 : !llvm.ptr<1> -> f32
        %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
        %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
        %51 = llvm.add %40, %9 : i64
        %52 = llvm.mul %51, %11 : i64
        %53 = llvm.add %52, %38 : i64
        %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %55 = llvm.load %54 : !llvm.ptr<1> -> f32
        %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
        %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
        %58 = llvm.add %40, %8 : i64
        %59 = llvm.mul %58, %11 : i64
        %60 = llvm.add %59, %38 : i64
        %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %62 = llvm.load %61 : !llvm.ptr<1> -> f32
        %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
        %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
        %65 = llvm.add %40, %7 : i64
        %66 = llvm.mul %65, %11 : i64
        %67 = llvm.add %66, %38 : i64
        %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %69 = llvm.load %68 : !llvm.ptr<1> -> f32
        %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
        %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
        %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
        %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
        %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
        %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
        %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
        %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
        %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
        %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
        %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
        %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
        %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
        %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
        %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %88 = llvm.add %40, %14 : i64
        llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
      ^bb4:  // pred: ^bb2
        %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %90 = llvm.load %89 : !llvm.ptr<1> -> f32
        %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
        %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
        %93 = llvm.fadd %41, %92 : vector<1xf32>
        %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
        %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        llvm.store %95, %96 : f32, !llvm.ptr<1>
        %97 = llvm.add %38, %10 : i64
        llvm.br ^bb1(%97 : i64)
      ^bb5:  // pred: ^bb1
        llvm.return
      }
    }
  }
}

// -----// IR Dump After ConvertToHALPass (iree-hal-conversion) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        %c1_0 = arith.constant 1 : index
        %c1_1 = arith.constant 1 : index
        hal.return %c1, %c1_0, %c1_1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    %__device_0_1 = util.global.load immutable @__device_0 : !hal.device
    %allocator_2 = hal.device.allocator<%__device_0_1 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator_2 : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_3 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    %__device_0_4 = util.global.load immutable @__device_0 : !hal.device
    %allocator_5 = hal.device.allocator<%__device_0_4 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_3 : !hal.buffer> message("tensor") allocator(%allocator_5 : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %__device_0_6 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %fence = hal.fence.create device(%__device_0_6 : !hal.device) flags("None") : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %transient_buffer = hal.device.queue.alloca<%__device_0_6 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %__device_0_7 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64_8 = arith.constant -1 : i64
    %c0_9 = arith.constant 0 : index
    %c1_10 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %1 = hal.device.memoize<%__device_0_7 : !hal.device> affinity(%c-1_i64_8) -> !hal.command_buffer {
      %c4 = arith.constant 4 : index
      %cmd = hal.command_buffer.create device(%__device_0_7 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64_8) bindings(%c4) : !hal.command_buffer
      %2 = hal.command_buffer.device<%cmd : !hal.command_buffer> : !hal.device
      %c1_17 = arith.constant 1 : index
      %c1_18 = arith.constant 1 : index
      %c1_19 = arith.constant 1 : index
      %exe = hal.executable.lookup device(%2 : !hal.device) executable(@main_dispatch_0) : !hal.executable
      %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
      hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1_17, %c1_18, %c1_19]) bindings([
        (%c0_9 : index)[%c0, %c3136], 
        (%c1_10 : index)[%c0, %c31360], 
        (%c2 : index)[%c0, %c40], 
        (%c3 : index)[%c0, %c40]
      ]) flags("None")
      hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
      hal.command_buffer.finalize<%cmd : !hal.command_buffer>
      hal.return %cmd : !hal.command_buffer
    }
    %fence_11 = hal.fence.create device(%__device_0_7 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0_7 : !hal.device> affinity(%c-1_i64_8) wait(%fence) signal(%fence_11) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0_9, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0_9, %c31360], 
      (%buffer_3 : !hal.buffer)[%c0_9, %c40], 
      (%transient_buffer : !hal.buffer)[%c0_9, %c40]
    ])
    %c-1_i32 = arith.constant -1 : i32
    %status = hal.fence.await until([%fence_11]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %dense_row_major_12 = hal.encoding_type<dense_row_major> : i32
    %element_type_f32_13 = hal.element_type<f32> : i32
    %c1_14 = arith.constant 1 : index
    %c10_15 = arith.constant 10 : index
    %c0_16 = arith.constant 0 : index
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0_16, %c40] shape([%c1_14, %c10_15]) type(%element_type_f32_13) encoding(%dense_row_major_12) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After OutlineMemoizeRegionsPass (iree-hal-outline-memoize-regions) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        %c1_0 = arith.constant 1 : index
        %c1_1 = arith.constant 1 : index
        hal.return %c1, %c1_0, %c1_1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c0_0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4 = arith.constant 4 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %0 = hal.command_buffer.device<%cmd : !hal.command_buffer> : !hal.device
    %c1_1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    %c1_3 = arith.constant 1 : index
    %exe = hal.executable.lookup device(%0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1_1, %c1_2, %c1_3]) bindings([
      (%c0 : index)[%c0_0, %c3136], 
      (%c1 : index)[%c0_0, %c31360], 
      (%c2 : index)[%c0_0, %c40], 
      (%c3 : index)[%c0_0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %0 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %1 = scf.if %0 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      %2 = util.null : !hal.command_buffer
      scf.yield %2 : !hal.command_buffer
    }
    util.return %1 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    %__device_0_1 = util.global.load immutable @__device_0 : !hal.device
    %allocator_2 = hal.device.allocator<%__device_0_1 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator_2 : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_3 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    %__device_0_4 = util.global.load immutable @__device_0 : !hal.device
    %allocator_5 = hal.device.allocator<%__device_0_4 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_3 : !hal.buffer> message("tensor") allocator(%allocator_5 : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %__device_0_6 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %fence = hal.fence.create device(%__device_0_6 : !hal.device) flags("None") : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %transient_buffer = hal.device.queue.alloca<%__device_0_6 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %__device_0_7 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64_8 = arith.constant -1 : i64
    %c0_9 = arith.constant 0 : index
    %c1_10 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %1 = util.call @__main_memoize_lookup(%__device_0_7, %c-1_i64_8) : (!hal.device, i64) -> !hal.command_buffer
    %fence_11 = hal.fence.create device(%__device_0_7 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0_7 : !hal.device> affinity(%c-1_i64_8) wait(%fence) signal(%fence_11) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0_9, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0_9, %c31360], 
      (%buffer_3 : !hal.buffer)[%c0_9, %c40], 
      (%transient_buffer : !hal.buffer)[%c0_9, %c40]
    ])
    %c-1_i32 = arith.constant -1 : i32
    %status = hal.fence.await until([%fence_11]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %dense_row_major_12 = hal.encoding_type<dense_row_major> : i32
    %element_type_f32_13 = hal.element_type<f32> : i32
    %c1_14 = arith.constant 1 : index
    %c10_15 = arith.constant 10 : index
    %c0_16 = arith.constant 0 : index
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0_16, %c40] shape([%c1_14, %c10_15]) type(%element_type_f32_13) encoding(%dense_row_major_12) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FixupLegacySyncPass (iree-hal-fixup-legacy-sync) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        %c1_0 = arith.constant 1 : index
        %c1_1 = arith.constant 1 : index
        hal.return %c1, %c1_0, %c1_1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c0_0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4 = arith.constant 4 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %0 = hal.command_buffer.device<%cmd : !hal.command_buffer> : !hal.device
    %c1_1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    %c1_3 = arith.constant 1 : index
    %exe = hal.executable.lookup device(%0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1_1, %c1_2, %c1_3]) bindings([
      (%c0 : index)[%c0_0, %c3136], 
      (%c1 : index)[%c0_0, %c31360], 
      (%c2 : index)[%c0_0, %c40], 
      (%c3 : index)[%c0_0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %0 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %1 = scf.if %0 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      %2 = util.null : !hal.command_buffer
      scf.yield %2 : !hal.command_buffer
    }
    util.return %1 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    %__device_0_1 = util.global.load immutable @__device_0 : !hal.device
    %allocator_2 = hal.device.allocator<%__device_0_1 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator_2 : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_3 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    %__device_0_4 = util.global.load immutable @__device_0 : !hal.device
    %allocator_5 = hal.device.allocator<%__device_0_4 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_3 : !hal.buffer> message("tensor") allocator(%allocator_5 : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %__device_0_6 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %fence = hal.fence.create device(%__device_0_6 : !hal.device) flags("None") : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %transient_buffer = hal.device.queue.alloca<%__device_0_6 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %__device_0_7 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64_8 = arith.constant -1 : i64
    %c0_9 = arith.constant 0 : index
    %c1_10 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %1 = util.call @__main_memoize_lookup(%__device_0_7, %c-1_i64_8) : (!hal.device, i64) -> !hal.command_buffer
    %fence_11 = hal.fence.create device(%__device_0_7 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0_7 : !hal.device> affinity(%c-1_i64_8) wait(%fence) signal(%fence_11) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0_9, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0_9, %c31360], 
      (%buffer_3 : !hal.buffer)[%c0_9, %c40], 
      (%transient_buffer : !hal.buffer)[%c0_9, %c40]
    ])
    %c-1_i32 = arith.constant -1 : i32
    %status = hal.fence.await until([%fence_11]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %dense_row_major_12 = hal.encoding_type<dense_row_major> : i32
    %element_type_f32_13 = hal.element_type<f32> : i32
    %c1_14 = arith.constant 1 : index
    %c10_15 = arith.constant 10 : index
    %c0_16 = arith.constant 0 : index
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0_16, %c40] shape([%c1_14, %c10_15]) type(%element_type_f32_13) encoding(%dense_row_major_12) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After PruneExecutablesPass (iree-hal-prune-executables) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        %c1_0 = arith.constant 1 : index
        %c1_1 = arith.constant 1 : index
        hal.return %c1, %c1_0, %c1_1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c0_0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c4 = arith.constant 4 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %0 = hal.command_buffer.device<%cmd : !hal.command_buffer> : !hal.device
    %c1_1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    %c1_3 = arith.constant 1 : index
    %exe = hal.executable.lookup device(%0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1_1, %c1_2, %c1_3]) bindings([
      (%c0 : index)[%c0_0, %c3136], 
      (%c1 : index)[%c0_0, %c31360], 
      (%c2 : index)[%c0_0, %c40], 
      (%c3 : index)[%c0_0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %0 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %1 = scf.if %0 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      %2 = util.null : !hal.command_buffer
      scf.yield %2 : !hal.command_buffer
    }
    util.return %1 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    %__device_0_1 = util.global.load immutable @__device_0 : !hal.device
    %allocator_2 = hal.device.allocator<%__device_0_1 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator_2 : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_3 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    %__device_0_4 = util.global.load immutable @__device_0 : !hal.device
    %allocator_5 = hal.device.allocator<%__device_0_4 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer_3 : !hal.buffer> message("tensor") allocator(%allocator_5 : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %__device_0_6 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %fence = hal.fence.create device(%__device_0_6 : !hal.device) flags("None") : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %transient_buffer = hal.device.queue.alloca<%__device_0_6 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %__device_0_7 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64_8 = arith.constant -1 : i64
    %c0_9 = arith.constant 0 : index
    %c1_10 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %1 = util.call @__main_memoize_lookup(%__device_0_7, %c-1_i64_8) : (!hal.device, i64) -> !hal.command_buffer
    %fence_11 = hal.fence.create device(%__device_0_7 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0_7 : !hal.device> affinity(%c-1_i64_8) wait(%fence) signal(%fence_11) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0_9, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0_9, %c31360], 
      (%buffer_3 : !hal.buffer)[%c0_9, %c40], 
      (%transient_buffer : !hal.buffer)[%c0_9, %c40]
    ])
    %c-1_i32 = arith.constant -1 : i32
    %status = hal.fence.await until([%fence_11]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %dense_row_major_12 = hal.encoding_type<dense_row_major> : i32
    %element_type_f32_13 = hal.element_type<f32> : i32
    %c1_14 = arith.constant 1 : index
    %c10_15 = arith.constant 10 : index
    %c0_16 = arith.constant 0 : index
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0_16, %c40] shape([%c1_14, %c10_15]) type(%element_type_f32_13) encoding(%dense_row_major_12) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
  %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
  %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
  %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  %__device_0_1 = util.global.load immutable @__device_0 : !hal.device
  %allocator_2 = hal.device.allocator<%__device_0_1 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator_2 : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_3 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  %__device_0_4 = util.global.load immutable @__device_0 : !hal.device
  %allocator_5 = hal.device.allocator<%__device_0_4 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer_3 : !hal.buffer> message("tensor") allocator(%allocator_5 : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %__device_0_6 = util.global.load immutable @__device_0 : !hal.device
  %fence = hal.fence.create device(%__device_0_6 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0_6 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %__device_0_7 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.call @__main_memoize_lookup(%__device_0_7, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_8 = hal.fence.create device(%__device_0_7 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0_7 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_8) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_3 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_8]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %dense_row_major_9 = hal.encoding_type<dense_row_major> : i32
  %element_type_f32_10 = hal.element_type<f32> : i32
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32_10) encoding(%dense_row_major_9) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
  %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %0 = util.null : !hal.command_buffer
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After LLVMGPULinkExecutablesPass (iree-llvmgpu-link-executables) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
hal.executable private @main_dispatch_0 {
  hal.executable.variant public @cuda_nvptx_fb target(<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>) {
    hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
    ^bb0(%arg0: !hal.device):
      %c1 = arith.constant 1 : index
      hal.return %c1, %c1, %c1 : index, index, index
    }
    builtin.module {
      llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
        %0 = llvm.mlir.constant(3 : i64) : i64
        %1 = llvm.mlir.constant(2 : i64) : i64
        %2 = llvm.mlir.constant(1 : i64) : i64
        %3 = llvm.mlir.constant(0 : i64) : i64
        %4 = llvm.mlir.constant(0 : i32) : i32
        %5 = llvm.mlir.undef : vector<1xf32>
        %6 = llvm.mlir.constant(63 : index) : i64
        %7 = llvm.mlir.constant(3 : index) : i64
        %8 = llvm.mlir.constant(2 : index) : i64
        %9 = llvm.mlir.constant(1 : index) : i64
        %10 = llvm.mlir.constant(32 : index) : i64
        %11 = llvm.mlir.constant(10 : index) : i64
        %12 = llvm.mlir.constant(0 : index) : i64
        %13 = llvm.mlir.constant(784 : index) : i64
        %14 = llvm.mlir.constant(4 : index) : i64
        %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
        %16 = nvvm.read.ptx.sreg.tid.x : i32
        %17 = llvm.sext %16 : i32 to i64
        %18 = nvvm.read.ptx.sreg.tid.y : i32
        %19 = llvm.sext %18 : i32 to i64
        %20 = nvvm.read.ptx.sreg.tid.z : i32
        %21 = llvm.sext %20 : i32 to i64
        %22 = llvm.mul %19, %10 : i64
        %23 = llvm.add %17, %22 : i64
        %24 = llvm.mul %21, %10 : i64
        %25 = llvm.add %23, %24 : i64
        %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
        %27 = llvm.and %26, %6 : i64
        %28 = llvm.icmp "eq" %27, %12 : i64
        llvm.intr.assume %28 : i1
        %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
        %30 = llvm.and %29, %6 : i64
        %31 = llvm.icmp "eq" %30, %12 : i64
        llvm.intr.assume %31 : i1
        %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
        %33 = llvm.and %32, %6 : i64
        %34 = llvm.icmp "eq" %33, %12 : i64
        llvm.intr.assume %34 : i1
        %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
        %36 = llvm.and %35, %6 : i64
        %37 = llvm.icmp "eq" %36, %12 : i64
        llvm.intr.assume %37 : i1
        llvm.br ^bb1(%25 : i64)
      ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
        %39 = llvm.icmp "slt" %38, %11 : i64
        llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
      ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
        %42 = llvm.icmp "slt" %40, %13 : i64
        llvm.cond_br %42, ^bb3, ^bb4
      ^bb3:  // pred: ^bb2
        %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
        %45 = llvm.mul %40, %11 : i64
        %46 = llvm.add %45, %38 : i64
        %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %48 = llvm.load %47 : !llvm.ptr<1> -> f32
        %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
        %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
        %51 = llvm.add %40, %9 : i64
        %52 = llvm.mul %51, %11 : i64
        %53 = llvm.add %52, %38 : i64
        %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %55 = llvm.load %54 : !llvm.ptr<1> -> f32
        %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
        %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
        %58 = llvm.add %40, %8 : i64
        %59 = llvm.mul %58, %11 : i64
        %60 = llvm.add %59, %38 : i64
        %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %62 = llvm.load %61 : !llvm.ptr<1> -> f32
        %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
        %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
        %65 = llvm.add %40, %7 : i64
        %66 = llvm.mul %65, %11 : i64
        %67 = llvm.add %66, %38 : i64
        %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %69 = llvm.load %68 : !llvm.ptr<1> -> f32
        %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
        %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
        %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
        %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
        %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
        %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
        %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
        %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
        %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
        %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
        %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
        %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
        %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
        %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
        %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %88 = llvm.add %40, %14 : i64
        llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
      ^bb4:  // pred: ^bb2
        %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        %90 = llvm.load %89 : !llvm.ptr<1> -> f32
        %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
        %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
        %93 = llvm.fadd %41, %92 : vector<1xf32>
        %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
        %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
        %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
        llvm.store %95, %96 : f32, !llvm.ptr<1>
        %97 = llvm.add %38, %10 : i64
        llvm.br ^bb1(%97 : i64)
      ^bb5:  // pred: ^bb1
        llvm.return
      }
    }
  }
}

// -----// IR Dump After LLVMGPUAssignConstantOrdinalsPass (iree-llvmgpu-assign-constant-ordinals) //----- //
hal.executable.variant public @cuda_nvptx_fb target(<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>) {
  hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
  ^bb0(%arg0: !hal.device):
    %c1 = arith.constant 1 : index
    hal.return %c1, %c1, %c1 : index, index, index
  }
  builtin.module {
    llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
      %0 = llvm.mlir.constant(3 : i64) : i64
      %1 = llvm.mlir.constant(2 : i64) : i64
      %2 = llvm.mlir.constant(1 : i64) : i64
      %3 = llvm.mlir.constant(0 : i64) : i64
      %4 = llvm.mlir.constant(0 : i32) : i32
      %5 = llvm.mlir.undef : vector<1xf32>
      %6 = llvm.mlir.constant(63 : index) : i64
      %7 = llvm.mlir.constant(3 : index) : i64
      %8 = llvm.mlir.constant(2 : index) : i64
      %9 = llvm.mlir.constant(1 : index) : i64
      %10 = llvm.mlir.constant(32 : index) : i64
      %11 = llvm.mlir.constant(10 : index) : i64
      %12 = llvm.mlir.constant(0 : index) : i64
      %13 = llvm.mlir.constant(784 : index) : i64
      %14 = llvm.mlir.constant(4 : index) : i64
      %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
      %16 = nvvm.read.ptx.sreg.tid.x : i32
      %17 = llvm.sext %16 : i32 to i64
      %18 = nvvm.read.ptx.sreg.tid.y : i32
      %19 = llvm.sext %18 : i32 to i64
      %20 = nvvm.read.ptx.sreg.tid.z : i32
      %21 = llvm.sext %20 : i32 to i64
      %22 = llvm.mul %19, %10 : i64
      %23 = llvm.add %17, %22 : i64
      %24 = llvm.mul %21, %10 : i64
      %25 = llvm.add %23, %24 : i64
      %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
      %27 = llvm.and %26, %6 : i64
      %28 = llvm.icmp "eq" %27, %12 : i64
      llvm.intr.assume %28 : i1
      %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
      %30 = llvm.and %29, %6 : i64
      %31 = llvm.icmp "eq" %30, %12 : i64
      llvm.intr.assume %31 : i1
      %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
      %33 = llvm.and %32, %6 : i64
      %34 = llvm.icmp "eq" %33, %12 : i64
      llvm.intr.assume %34 : i1
      %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
      %36 = llvm.and %35, %6 : i64
      %37 = llvm.icmp "eq" %36, %12 : i64
      llvm.intr.assume %37 : i1
      llvm.br ^bb1(%25 : i64)
    ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
      %39 = llvm.icmp "slt" %38, %11 : i64
      llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
    ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
      %42 = llvm.icmp "slt" %40, %13 : i64
      llvm.cond_br %42, ^bb3, ^bb4
    ^bb3:  // pred: ^bb2
      %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
      %45 = llvm.mul %40, %11 : i64
      %46 = llvm.add %45, %38 : i64
      %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %48 = llvm.load %47 : !llvm.ptr<1> -> f32
      %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
      %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
      %51 = llvm.add %40, %9 : i64
      %52 = llvm.mul %51, %11 : i64
      %53 = llvm.add %52, %38 : i64
      %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %55 = llvm.load %54 : !llvm.ptr<1> -> f32
      %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
      %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
      %58 = llvm.add %40, %8 : i64
      %59 = llvm.mul %58, %11 : i64
      %60 = llvm.add %59, %38 : i64
      %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %62 = llvm.load %61 : !llvm.ptr<1> -> f32
      %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
      %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
      %65 = llvm.add %40, %7 : i64
      %66 = llvm.mul %65, %11 : i64
      %67 = llvm.add %66, %38 : i64
      %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %69 = llvm.load %68 : !llvm.ptr<1> -> f32
      %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
      %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
      %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
      %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
      %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
      %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
      %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
      %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
      %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
      %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
      %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
      %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
      %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
      %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
      %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %88 = llvm.add %40, %14 : i64
      llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
    ^bb4:  // pred: ^bb2
      %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      %90 = llvm.load %89 : !llvm.ptr<1> -> f32
      %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
      %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
      %93 = llvm.fadd %41, %92 : vector<1xf32>
      %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
      %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
      %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
      llvm.store %95, %96 : f32, !llvm.ptr<1>
      %97 = llvm.add %38, %10 : i64
      llvm.br ^bb1(%97 : i64)
    ^bb5:  // pred: ^bb1
      llvm.return
    }
  }
}

// -----// IR Dump After LinkTargetExecutablesPass (iree-hal-link-target-executables) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After LinkExecutablesPass (iree-hal-link-executables) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %ordinal = hal.executable.export.ordinal target(@main_dispatch_0::@cuda_nvptx_fb::@main_dispatch_0_vecmat_10x784_f32) : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%ordinal] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After ResolveExportOrdinalsPass (iree-hal-resolve-export-ordinals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %exe = hal.executable.lookup device(%arg0 : !hal.device) executable(@main_dispatch_0) : !hal.executable
    %c0_0 = arith.constant 0 : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%exe : !hal.executable)[%c0_0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After MaterializeResourceCachesPass (iree-hal-materialize-resource-caches) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %0 = arith.select %value, %c0, %c-1 : index
    %1 = scf.index_switch %0 -> !hal.executable 
    case 0 {
      %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
      scf.yield %executable : !hal.executable
    }
    default {
      %c14_i32 = arith.constant 14 : i32
      util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      %2 = util.null : !hal.executable
      scf.yield %2 : !hal.executable
    }
    util.global.store %1, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %__device_0_executable_0_main_dispatch_0 = util.global.load @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %c0_0 = arith.constant 0 : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0_0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After MemoizeDeviceQueriesPass (iree-hal-memoize-device-queries) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok : i1
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %ok, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok : i1
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok : i1
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %0 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %1 = scf.index_switch %0 -> !hal.executable 
    case 0 {
      %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
      scf.yield %executable : !hal.executable
    }
    default {
      %c14_i32 = arith.constant 14 : i32
      util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      %2 = util.null : !hal.executable
      scf.yield %2 : !hal.executable
    }
    util.global.store %1, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    %__device_0_executable_0_main_dispatch_0 = util.global.load @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %c0_0 = arith.constant 0 : index
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0_0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.null : !hal.command_buffer
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  %__device_0_executable_0_main_dispatch_0 = util.global.load @__device_0_executable_0_main_dispatch_0 : !hal.executable
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  %__device_0_executable_0_main_dispatch_0 = util.global.load @__device_0_executable_0_main_dispatch_0 : !hal.executable
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %__device_0_executable_0_main_dispatch_0 = util.global.load @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0 = util.global.load @__device_0 : !hal.device
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = scf.index_switch %1 -> !hal.executable 
  case 0 {
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    scf.yield %executable : !hal.executable
  }
  default {
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    scf.yield %0 : !hal.executable
  }
  util.global.store %2, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0 = util.global.load @__device_0 : !hal.device
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = scf.index_switch %1 -> !hal.executable 
  case 0 {
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    scf.yield %executable : !hal.executable
  }
  default {
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    scf.yield %0 : !hal.executable
  }
  util.global.store %2, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = scf.index_switch %1 -> !hal.executable 
  case 0 {
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    scf.yield %executable : !hal.executable
  }
  default {
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    scf.yield %0 : !hal.executable
  }
  util.global.store %2, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %ok, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok : i1
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %ok, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok : i1
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.global.store %ok, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok : i1
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %__device_0_executable_0_main_dispatch_0 = util.global.load @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  %3 = scf.if %2 -> (!hal.executable) {
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    scf.yield %executable : !hal.executable
  } else {
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    scf.yield %0 : !hal.executable
  }
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.global.store %ok, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb_ok : i1
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    %3 = scf.if %2 -> (!hal.executable) {
      %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
      scf.yield %executable : !hal.executable
    } else {
      util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      scf.yield %0 : !hal.executable
    }
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
#device_target_cuda = #hal.device.target<"cuda", [#executable_target_cuda_nvptx_fb]> : !hal.device
module {
  util.global private @__device_0 = #device_target_cuda
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    %3 = scf.if %2 -> (!hal.executable) {
      %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
      scf.yield %executable : !hal.executable
    } else {
      util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      scf.yield %0 : !hal.executable
    }
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After ElideRedundantCommandsPass (iree-hal-elide-redundant-commands) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After ElideRedundantCommandsPass (iree-hal-elide-redundant-commands) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ElideRedundantCommandsPass (iree-hal-elide-redundant-commands) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = scf.if %1 -> (!hal.command_buffer) {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
  } else {
    scf.yield %0 : !hal.command_buffer
  }
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After ElideRedundantCommandsPass (iree-hal-elide-redundant-commands) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After ElideRedundantCommandsPass (iree-hal-elide-redundant-commands) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  %3 = scf.if %2 -> (!hal.executable) {
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    scf.yield %executable : !hal.executable
  } else {
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    scf.yield %0 : !hal.executable
  }
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After ElideRedundantCommandsPass (iree-hal-elide-redundant-commands) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After InitializeDevicesPass (iree-hal-initialize-devices) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    %1:3 = scf.while (%arg0 = %c0, %arg1 = %c0, %arg2 = %0) : (index, index, !hal.device) -> (index, index, !hal.device) {
      %4 = util.cmp.eq %arg2, %0 : !hal.device
      %5 = arith.cmpi slt, %arg0, %device_count : index
      %6 = arith.andi %4, %5 : i1
      scf.condition(%6) %arg0, %arg1, %arg2 : index, index, !hal.device
    } do {
    ^bb0(%arg0: index, %arg1: index, %arg2: !hal.device):
      %device_n = hal.devices.get %arg0 : !hal.device
      %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
      %4 = scf.if %value -> (i1) {
        %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
        scf.yield %value_1 : i1
      } else {
        %false = arith.constant false
        scf.yield %false : i1
      }
      %5 = arith.cmpi eq, %arg1, %c0 : index
      %6 = arith.select %4, %c1, %c0 : index
      %7 = arith.addi %arg1, %6 : index
      %8 = arith.andi %4, %5 : i1
      %9 = arith.select %8, %device_n, %0 : !hal.device
      %10 = arith.addi %arg0, %c1 : index
      scf.yield %10, %7, %9 : index, index, !hal.device
    }
    %2 = util.null : !hal.device
    %3 = util.cmp.eq %1#2, %2 : !hal.device
    scf.if %3 {
      %c18_i32 = arith.constant 18 : i32
      util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    }
    util.global.store %1#2, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    %3 = scf.if %2 -> (!hal.executable) {
      %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
      scf.yield %executable : !hal.executable
    } else {
      util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      scf.yield %0 : !hal.executable
    }
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After AffineExpandIndexOps (affine-expand-index-ops) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    %1:3 = scf.while (%arg0 = %c0, %arg1 = %c0, %arg2 = %0) : (index, index, !hal.device) -> (index, index, !hal.device) {
      %3 = util.cmp.eq %arg2, %0 : !hal.device
      %4 = arith.cmpi slt, %arg0, %device_count : index
      %5 = arith.andi %3, %4 : i1
      scf.condition(%5) %arg0, %arg1, %arg2 : index, index, !hal.device
    } do {
    ^bb0(%arg0: index, %arg1: index, %arg2: !hal.device):
      %device_n = hal.devices.get %arg0 : !hal.device
      %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
      %3 = scf.if %value -> (i1) {
        %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
        scf.yield %value_1 : i1
      } else {
        scf.yield %false : i1
      }
      %4 = arith.cmpi eq, %arg1, %c0 : index
      %5 = arith.select %3, %c1, %c0 : index
      %6 = arith.addi %arg1, %5 : index
      %7 = arith.andi %3, %4 : i1
      %8 = arith.select %7, %device_n, %0 : !hal.device
      %9 = arith.addi %arg0, %c1 : index
      scf.yield %9, %6, %8 : index, index, !hal.device
    }
    %2 = util.cmp.eq %1#2, %0 : !hal.device
    scf.if %2 {
      util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    }
    util.global.store %1#2, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    %3 = scf.if %2 -> (!hal.executable) {
      %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
      scf.yield %executable : !hal.executable
    } else {
      util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      scf.yield %0 : !hal.executable
    }
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
#executable_target_cuda_nvptx_fb = #hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>
#pipeline_layout = #hal.pipeline.layout<bindings = [#hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, "ReadOnly|Indirect">, #hal.pipeline.binding<storage_buffer, Indirect>], flags = Indirect>
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    %1:3 = scf.while (%arg0 = %c0, %arg1 = %c0, %arg2 = %0) : (index, index, !hal.device) -> (index, index, !hal.device) {
      %3 = util.cmp.eq %arg2, %0 : !hal.device
      %4 = arith.cmpi slt, %arg0, %device_count : index
      %5 = arith.andi %3, %4 : i1
      scf.condition(%5) %arg0, %arg1, %arg2 : index, index, !hal.device
    } do {
    ^bb0(%arg0: index, %arg1: index, %arg2: !hal.device):
      %device_n = hal.devices.get %arg0 : !hal.device
      %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
      %3 = scf.if %value -> (i1) {
        %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
        scf.yield %value_1 : i1
      } else {
        scf.yield %false : i1
      }
      %4 = arith.cmpi eq, %arg1, %c0 : index
      %5 = arith.select %3, %c1, %c0 : index
      %6 = arith.addi %arg1, %5 : index
      %7 = arith.andi %3, %4 : i1
      %8 = arith.select %7, %device_n, %0 : !hal.device
      %9 = arith.addi %arg0, %c1 : index
      scf.yield %9, %6, %8 : index, index, !hal.device
    }
    %2 = util.cmp.eq %1#2, %0 : !hal.device
    scf.if %2 {
      util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    }
    util.global.store %1#2, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    %3 = scf.if %2 -> (!hal.executable) {
      %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
      scf.yield %executable : !hal.executable
    } else {
      util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      scf.yield %0 : !hal.executable
    }
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.variant public @cuda_nvptx_fb target(#executable_target_cuda_nvptx_fb) {
      hal.executable.export public @main_dispatch_0_vecmat_10x784_f32 ordinal(0) layout(#pipeline_layout) attributes {subgroup_size = 32 : index, workgroup_size = [32 : index, 1 : index, 1 : index]} {
      ^bb0(%arg0: !hal.device):
        %c1 = arith.constant 1 : index
        hal.return %c1, %c1, %c1 : index, index, index
      }
      builtin.module {
        llvm.func @main_dispatch_0_vecmat_10x784_f32(%arg0: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg1: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg2: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias, llvm.readonly}, %arg3: !llvm.ptr<1> {llvm.align = 16 : i32, llvm.noalias}) {
          %0 = llvm.mlir.constant(3 : i64) : i64
          %1 = llvm.mlir.constant(2 : i64) : i64
          %2 = llvm.mlir.constant(1 : i64) : i64
          %3 = llvm.mlir.constant(0 : i64) : i64
          %4 = llvm.mlir.constant(0 : i32) : i32
          %5 = llvm.mlir.undef : vector<1xf32>
          %6 = llvm.mlir.constant(63 : index) : i64
          %7 = llvm.mlir.constant(3 : index) : i64
          %8 = llvm.mlir.constant(2 : index) : i64
          %9 = llvm.mlir.constant(1 : index) : i64
          %10 = llvm.mlir.constant(32 : index) : i64
          %11 = llvm.mlir.constant(10 : index) : i64
          %12 = llvm.mlir.constant(0 : index) : i64
          %13 = llvm.mlir.constant(784 : index) : i64
          %14 = llvm.mlir.constant(4 : index) : i64
          %15 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xf32>) : vector<1xf32>
          %16 = nvvm.read.ptx.sreg.tid.x : i32
          %17 = llvm.sext %16 : i32 to i64
          %18 = nvvm.read.ptx.sreg.tid.y : i32
          %19 = llvm.sext %18 : i32 to i64
          %20 = nvvm.read.ptx.sreg.tid.z : i32
          %21 = llvm.sext %20 : i32 to i64
          %22 = llvm.mul %19, %10 : i64
          %23 = llvm.add %17, %22 : i64
          %24 = llvm.mul %21, %10 : i64
          %25 = llvm.add %23, %24 : i64
          %26 = llvm.ptrtoint %arg0 : !llvm.ptr<1> to i64
          %27 = llvm.and %26, %6 : i64
          %28 = llvm.icmp "eq" %27, %12 : i64
          llvm.intr.assume %28 : i1
          %29 = llvm.ptrtoint %arg1 : !llvm.ptr<1> to i64
          %30 = llvm.and %29, %6 : i64
          %31 = llvm.icmp "eq" %30, %12 : i64
          llvm.intr.assume %31 : i1
          %32 = llvm.ptrtoint %arg2 : !llvm.ptr<1> to i64
          %33 = llvm.and %32, %6 : i64
          %34 = llvm.icmp "eq" %33, %12 : i64
          llvm.intr.assume %34 : i1
          %35 = llvm.ptrtoint %arg3 : !llvm.ptr<1> to i64
          %36 = llvm.and %35, %6 : i64
          %37 = llvm.icmp "eq" %36, %12 : i64
          llvm.intr.assume %37 : i1
          llvm.br ^bb1(%25 : i64)
        ^bb1(%38: i64):  // 2 preds: ^bb0, ^bb4
          %39 = llvm.icmp "slt" %38, %11 : i64
          llvm.cond_br %39, ^bb2(%12, %15 : i64, vector<1xf32>), ^bb5
        ^bb2(%40: i64, %41: vector<1xf32>):  // 2 preds: ^bb1, ^bb3
          %42 = llvm.icmp "slt" %40, %13 : i64
          llvm.cond_br %42, ^bb3, ^bb4
        ^bb3:  // pred: ^bb2
          %43 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %44 = llvm.load %43 {alignment = 4 : i64} : !llvm.ptr<1> -> vector<4xf32>
          %45 = llvm.mul %40, %11 : i64
          %46 = llvm.add %45, %38 : i64
          %47 = llvm.getelementptr %arg1[%46] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %48 = llvm.load %47 : !llvm.ptr<1> -> f32
          %49 = llvm.insertelement %48, %5[%4 : i32] : vector<1xf32>
          %50 = llvm.shufflevector %49, %5 [0] : vector<1xf32> 
          %51 = llvm.add %40, %9 : i64
          %52 = llvm.mul %51, %11 : i64
          %53 = llvm.add %52, %38 : i64
          %54 = llvm.getelementptr %arg1[%53] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %55 = llvm.load %54 : !llvm.ptr<1> -> f32
          %56 = llvm.insertelement %55, %5[%4 : i32] : vector<1xf32>
          %57 = llvm.shufflevector %56, %5 [0] : vector<1xf32> 
          %58 = llvm.add %40, %8 : i64
          %59 = llvm.mul %58, %11 : i64
          %60 = llvm.add %59, %38 : i64
          %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %62 = llvm.load %61 : !llvm.ptr<1> -> f32
          %63 = llvm.insertelement %62, %5[%4 : i32] : vector<1xf32>
          %64 = llvm.shufflevector %63, %5 [0] : vector<1xf32> 
          %65 = llvm.add %40, %7 : i64
          %66 = llvm.mul %65, %11 : i64
          %67 = llvm.add %66, %38 : i64
          %68 = llvm.getelementptr %arg1[%67] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %69 = llvm.load %68 : !llvm.ptr<1> -> f32
          %70 = llvm.insertelement %69, %5[%4 : i32] : vector<1xf32>
          %71 = llvm.shufflevector %70, %5 [0] : vector<1xf32> 
          %72 = llvm.extractelement %44[%3 : i64] : vector<4xf32>
          %73 = llvm.insertelement %72, %5[%4 : i32] : vector<1xf32>
          %74 = llvm.shufflevector %73, %5 [0] : vector<1xf32> 
          %75 = llvm.intr.fmuladd(%50, %74, %41) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %76 = llvm.extractelement %44[%2 : i64] : vector<4xf32>
          %77 = llvm.insertelement %76, %5[%4 : i32] : vector<1xf32>
          %78 = llvm.shufflevector %77, %5 [0] : vector<1xf32> 
          %79 = llvm.intr.fmuladd(%57, %78, %75) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %80 = llvm.extractelement %44[%1 : i64] : vector<4xf32>
          %81 = llvm.insertelement %80, %5[%4 : i32] : vector<1xf32>
          %82 = llvm.shufflevector %81, %5 [0] : vector<1xf32> 
          %83 = llvm.intr.fmuladd(%64, %82, %79) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %84 = llvm.extractelement %44[%0 : i64] : vector<4xf32>
          %85 = llvm.insertelement %84, %5[%4 : i32] : vector<1xf32>
          %86 = llvm.shufflevector %85, %5 [0] : vector<1xf32> 
          %87 = llvm.intr.fmuladd(%71, %86, %83) : (vector<1xf32>, vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %88 = llvm.add %40, %14 : i64
          llvm.br ^bb2(%88, %87 : i64, vector<1xf32>)
        ^bb4:  // pred: ^bb2
          %89 = llvm.getelementptr %arg2[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          %90 = llvm.load %89 : !llvm.ptr<1> -> f32
          %91 = llvm.insertelement %90, %5[%4 : i32] : vector<1xf32>
          %92 = llvm.shufflevector %91, %5 [0] : vector<1xf32> 
          %93 = llvm.fadd %41, %92 : vector<1xf32>
          %94 = llvm.intr.maximum(%93, %15) : (vector<1xf32>, vector<1xf32>) -> vector<1xf32>
          %95 = llvm.extractelement %94[%3 : i64] : vector<1xf32>
          %96 = llvm.getelementptr %arg3[%38] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, f32
          llvm.store %95, %96 : f32, !llvm.ptr<1>
          %97 = llvm.add %38, %10 : i64
          llvm.br ^bb1(%97 : i64)
        ^bb5:  // pred: ^bb1
          llvm.return
        }
      }
    }
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = scf.if %1 -> (!hal.command_buffer) {
      %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
      scf.yield %__main_memoize_result_0_device_0 : !hal.command_buffer
    } else {
      scf.yield %0 : !hal.command_buffer
    }
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb6
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2(%1, %2, %3 : index, index, !hal.device), ^bb7
^bb2(%7: index, %8: index, %9: !hal.device):  // pred: ^bb1
  %device_n = hal.devices.get %7 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb5(%value_1 : i1)
^bb4:  // pred: ^bb2
  cf.br ^bb5(%false : i1)
^bb5(%10: i1):  // 2 preds: ^bb3, ^bb4
  cf.br ^bb6
^bb6:  // pred: ^bb5
  %11 = arith.cmpi eq, %8, %c0 : index
  %12 = arith.select %10, %c1, %c0 : index
  %13 = arith.addi %8, %12 : index
  %14 = arith.andi %10, %11 : i1
  %15 = arith.select %14, %device_n, %0 : !hal.device
  %16 = arith.addi %7, %c1 : index
  cf.br ^bb1(%16, %13, %15 : index, index, !hal.device)
^bb7:  // pred: ^bb1
  %17 = util.cmp.eq %3, %0 : !hal.device
  cf.cond_br %17, ^bb8, ^bb9
^bb8:  // pred: ^bb7
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb9
^bb9:  // 2 preds: ^bb7, ^bb8
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  cf.br ^bb4
^bb4:  // pred: ^bb3
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  cf.cond_br %1, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  cf.br ^bb3(%__main_memoize_result_0_device_0 : !hal.command_buffer)
^bb2:  // pred: ^bb0
  cf.br ^bb3(%0 : !hal.command_buffer)
^bb3(%2: !hal.command_buffer):  // 2 preds: ^bb1, ^bb2
  cf.br ^bb4
^bb4:  // pred: ^bb3
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SerializeTargetExecutablesPass (iree-hal-serialize-target-executables) //----- //
hal.executable private @main_dispatch_0 {
  hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
}

// -----// IR Dump After SerializeExecutablesPass (iree-hal-serialize-executables) //----- //
hal.executable private @main_dispatch_0 {
  hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
}

// -----// IR Dump After PruneExecutablesPass (iree-hal-prune-executables) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb6
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2(%1, %2, %3 : index, index, !hal.device), ^bb7
  ^bb2(%7: index, %8: index, %9: !hal.device):  // pred: ^bb1
    %device_n = hal.devices.get %7 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb5(%value_1 : i1)
  ^bb4:  // pred: ^bb2
    cf.br ^bb5(%false : i1)
  ^bb5(%10: i1):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %11 = arith.cmpi eq, %8, %c0 : index
    %12 = arith.select %10, %c1, %c0 : index
    %13 = arith.addi %8, %12 : index
    %14 = arith.andi %10, %11 : i1
    %15 = arith.select %14, %device_n, %0 : !hal.device
    %16 = arith.addi %7, %c1 : index
    cf.br ^bb1(%16, %13, %15 : index, index, !hal.device)
  ^bb7:  // pred: ^bb1
    %17 = util.cmp.eq %3, %0 : !hal.device
    cf.cond_br %17, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb9
  ^bb9:  // 2 preds: ^bb7, ^bb8
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    cf.cond_br %1, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    cf.br ^bb3(%__main_memoize_result_0_device_0 : !hal.command_buffer)
  ^bb2:  // pred: ^bb0
    cf.br ^bb3(%0 : !hal.command_buffer)
  ^bb3(%2: !hal.command_buffer):  // 2 preds: ^bb1, ^bb2
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb6
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2(%1, %2, %3 : index, index, !hal.device), ^bb7
  ^bb2(%7: index, %8: index, %9: !hal.device):  // pred: ^bb1
    %device_n = hal.devices.get %7 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb5(%value_1 : i1)
  ^bb4:  // pred: ^bb2
    cf.br ^bb5(%false : i1)
  ^bb5(%10: i1):  // 2 preds: ^bb3, ^bb4
    cf.br ^bb6
  ^bb6:  // pred: ^bb5
    %11 = arith.cmpi eq, %8, %c0 : index
    %12 = arith.select %10, %c1, %c0 : index
    %13 = arith.addi %8, %12 : index
    %14 = arith.andi %10, %11 : i1
    %15 = arith.select %14, %device_n, %0 : !hal.device
    %16 = arith.addi %7, %c1 : index
    cf.br ^bb1(%16, %13, %15 : index, index, !hal.device)
  ^bb7:  // pred: ^bb1
    %17 = util.cmp.eq %3, %0 : !hal.device
    cf.cond_br %17, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb9
  ^bb9:  // 2 preds: ^bb7, ^bb8
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    cf.cond_br %1, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    cf.br ^bb3(%__main_memoize_result_0_device_0 : !hal.command_buffer)
  ^bb2:  // pred: ^bb0
    cf.br ^bb3(%0 : !hal.command_buffer)
  ^bb3(%2: !hal.command_buffer):  // 2 preds: ^bb1, ^bb2
    cf.br ^bb4
  ^bb4:  // pred: ^bb3
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  cf.cond_br %1, ^bb1, ^bb2(%0 : !hal.command_buffer)
^bb1:  // pred: ^bb0
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  cf.br ^bb2(%__main_memoize_result_0_device_0 : !hal.command_buffer)
^bb2(%2: !hal.command_buffer):  // 2 preds: ^bb0, ^bb1
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  cf.cond_br %1, ^bb1, ^bb2(%0 : !hal.command_buffer)
^bb1:  // pred: ^bb0
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  cf.br ^bb2(%__main_memoize_result_0_device_0 : !hal.command_buffer)
^bb2(%2: !hal.command_buffer):  // 2 preds: ^bb0, ^bb1
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %0 = util.null : !hal.command_buffer
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  cf.cond_br %1, ^bb1, ^bb2(%0 : !hal.command_buffer)
^bb1:  // pred: ^bb0
  cf.br ^bb2(%__main_memoize_result_0_device_0 : !hal.command_buffer)
^bb2(%2: !hal.command_buffer):  // 2 preds: ^bb0, ^bb1
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
  %2 = arith.select %1, %__main_memoize_result_0_device_0, %0 : !hal.command_buffer
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2(%1, %2 : index, index), ^bb5
^bb2(%7: index, %8: index):  // pred: ^bb1
  %device_n = hal.devices.get %7 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%9: i1):  // 2 preds: ^bb2, ^bb3
  %10 = arith.cmpi eq, %8, %c0 : index
  %11 = arith.select %9, %c1, %c0 : index
  %12 = arith.addi %8, %11 : index
  %13 = arith.andi %9, %10 : i1
  %14 = arith.select %13, %device_n, %0 : !hal.device
  %15 = arith.addi %7, %c1 : index
  cf.br ^bb1(%15, %12, %14 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  %16 = util.cmp.eq %3, %0 : !hal.device
  cf.cond_br %16, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2(%1, %2 : index, index), ^bb5
^bb2(%7: index, %8: index):  // pred: ^bb1
  %device_n = hal.devices.get %7 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%9: i1):  // 2 preds: ^bb2, ^bb3
  %10 = arith.cmpi eq, %8, %c0 : index
  %11 = arith.select %9, %c1, %c0 : index
  %12 = arith.addi %8, %11 : index
  %13 = arith.andi %9, %10 : i1
  %14 = arith.select %13, %device_n, %0 : !hal.device
  %15 = arith.addi %7, %c1 : index
  cf.br ^bb1(%15, %12, %14 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2(%1, %2 : index, index), ^bb5
^bb2(%7: index, %8: index):  // pred: ^bb1
  %device_n = hal.devices.get %7 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%9: i1):  // 2 preds: ^bb2, ^bb3
  %10 = arith.cmpi eq, %8, %c0 : index
  %11 = arith.select %9, %c1, %c0 : index
  %12 = arith.addi %8, %11 : index
  %13 = arith.andi %9, %10 : i1
  %14 = arith.select %13, %device_n, %0 : !hal.device
  %15 = arith.addi %7, %c1 : index
  cf.br ^bb1(%15, %12, %14 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = arith.select %1, %__main_memoize_result_0_device_0, %0 : !hal.command_buffer
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%arg0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%arg1) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup(%arg0: !hal.device, %arg1: i64) -> !hal.command_buffer {
    %0 = util.null : !hal.command_buffer
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %1 = util.cmp.eq %arg0, %__device_0 : !hal.device
    %2 = arith.select %1, %__main_memoize_result_0_device_0, %0 : !hal.command_buffer
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup(%__device_0, %c-1_i64) : (!hal.device, i64) -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module attributes {iree.fixedpoint.iteration = 0 : index, iree.fixedpoint.modified} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0x0C000000434441310000000006F8FFFF08000000C8000000010000000400000012F8FFFF3C0000002000000001000000010000000800000050000000040000000300000000000000030000000000000003000000000000000200000000000000210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F66333200000082F8FFFF28000000040000008EF8FFFF08000000010000000F000000636F6E762D6C617965722E6D6C697200210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320000000100000004000000E4F8FFFF040000000E0700002F2F0A2F2F2047656E657261746564206279204C4C564D204E56505458204261636B2D456E640A2F2F0A0A2E76657273696F6E20372E360A2E74617267657420736D5F38360A2E616464726573735F73697A652036340A0A092F2F202E676C6F626C096D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320A0A2E76697369626C65202E656E747279206D61696E5F64697370617463685F305F7665636D61745F3130783738345F663332280A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F302C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F312C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F322C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F330A290A2E6D61786E7469642033322C20312C20310A7B0A092E726567202E70726564200925703C333E3B0A092E726567202E623332200925723C323E3B0A092E726567202E663332200925663C31393E3B0A092E726567202E62363420092572643C32323E3B0A0A096D6F762E75333220092572312C20257469642E783B0A09736574702E67742E75333220092570312C202572312C20393B0A0940257031206272612009244C5F5F4242305F343B0A096C642E706172616D2E753634200925726431322C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F335D3B0A096C642E706172616D2E753634200925726431312C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F325D3B0A096C642E706172616D2E753634200925726431302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F315D3B0A096C642E706172616D2E753634200925726432302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F305D3B0A096376742E7536342E7533322009257264312C202572313B0A0973686C2E623634200925726431342C20257264312C20323B0A096164642E733634200925726431352C2025726431342C2025726431303B0A096164642E733634200925726431392C2025726431352C2038303B0A096D6F762E6633322009256631382C20306630303030303030303B0A096D6F762E753634200925726432312C202D343B0A244C5F5F4242305F323A0A096C642E676C6F62616C2E6E632E76342E66333220097B2566342C202566352C202566362C202566377D2C205B25726432305D3B0A096C642E676C6F62616C2E6E632E66333220092566382C205B25726431392B2D38305D3B0A096C642E676C6F62616C2E6E632E66333220092566392C205B25726431392B2D34305D3B0A096C642E676C6F62616C2E6E632E6633322009256631302C205B25726431395D3B0A096C642E676C6F62616C2E6E632E6633322009256631312C205B25726431392B34305D3B0A09666D612E726E2E6633322009256631322C202566382C202566342C20256631383B0A09666D612E726E2E6633322009256631332C202566392C202566352C20256631323B0A09666D612E726E2E6633322009256631342C20256631302C202566362C20256631333B0A09666D612E726E2E6633322009256631382C20256631312C202566372C20256631343B0A096164642E733634200925726432312C2025726432312C20343B0A096164642E733634200925726432302C2025726432302C2031363B0A096164642E733634200925726431392C2025726431392C203136303B0A09736574702E6C742E75363420092570322C2025726432312C203738303B0A0940257032206272612009244C5F5F4242305F323B0A096164642E733634200925726431372C2025726431312C2025726431343B0A096C642E676C6F62616C2E6E632E6633322009256631352C205B25726431375D3B0A096164642E726E2E6633322009256631362C20256631382C20256631353B0A096D61782E4E614E2E6633322009256631372C20256631362C20306630303030303030303B0A096164642E733634200925726431382C2025726431322C2025726431343B0A0973742E676C6F62616C2E66333220095B25726431385D2C20256631373B0A244C5F5F4242305F343A0A097265743B0A0A7D0A000006000800040008000C000400080012001C000000040008000000000014001800"> : vector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup() -> !hal.command_buffer {
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %0 = util.null : !hal.command_buffer
    %__device_0_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %1 = util.cmp.eq %__device_0, %__device_0_0 : !hal.device
    %2 = arith.select %1, %__main_memoize_result_0_device_0, %0 : !hal.command_buffer
    util.return %2 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup() : () -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_lookup() -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %1 = util.cmp.eq %__device_0, %__device_0_0 : !hal.device
  %2 = arith.select %1, %__main_memoize_result_0_device_0, %0 : !hal.command_buffer
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_lookup() -> !hal.command_buffer {
  %0 = util.null : !hal.command_buffer
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %1 = util.cmp.eq %__device_0, %__device_0 : !hal.device
  %2 = arith.select %1, %__main_memoize_result_0_device_0, %0 : !hal.command_buffer
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_lookup() -> !hal.command_buffer {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %0 = util.null : !hal.command_buffer
  %1 = util.cmp.eq %__device_0, %__device_0 : !hal.device
  %2 = arith.select %1, %__main_memoize_result_0_device_0, %0 : !hal.command_buffer
  util.return %2 : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup() : () -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup() : () -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup() : () -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_lookup() -> !hal.command_buffer {
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return %__main_memoize_result_0_device_0 : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %1 = util.call @__main_memoize_lookup() : () -> !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {iree.fixedpoint.iteration = 1 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup() -> !hal.command_buffer {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return %__main_memoize_result_0_device_0 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup() : () -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module attributes {iree.fixedpoint.iteration = 1 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup() -> !hal.command_buffer {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return %__main_memoize_result_0_device_0 : !hal.command_buffer
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %1 = util.call @__main_memoize_lookup() : () -> !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%1) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module attributes {iree.fixedpoint.iteration = 1 : index, iree.fixedpoint.modified} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup() {
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    util.call @__main_memoize_lookup() : () -> ()
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_lookup() {
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_lookup() {
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_lookup() {
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  util.call @__main_memoize_lookup() : () -> ()
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  util.call @__main_memoize_lookup() : () -> ()
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_lookup() {
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  util.call @__main_memoize_lookup() : () -> ()
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  util.call @__main_memoize_lookup() : () -> ()
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {iree.fixedpoint.iteration = 2 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup() {
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    util.call @__main_memoize_lookup() : () -> ()
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module attributes {iree.fixedpoint.iteration = 2 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func private @__main_memoize_lookup() {
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    util.call @__main_memoize_lookup() : () -> ()
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module attributes {iree.fixedpoint.iteration = 2 : index, iree.fixedpoint.modified} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c0 = arith.constant 0 : index
  %c-1 = arith.constant -1 : index
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {iree.fixedpoint.iteration = 3 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module attributes {iree.fixedpoint.iteration = 3 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After IPO (iree-util-ipo) //----- //
module attributes {iree.fixedpoint.iteration = 3 : index} {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FixedPointIterator (iree-util-fixed-point-iterator) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %0 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
  %4 = util.cmp.eq %3, %0 : !hal.device
  %5 = arith.cmpi slt, %1, %device_count : index
  %6 = arith.andi %4, %5 : i1
  cf.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %1 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
  %8 = arith.cmpi eq, %2, %c0 : index
  %9 = arith.select %7, %c1, %c0 : index
  %10 = arith.addi %2, %9 : index
  %11 = arith.andi %7, %8 : i1
  %12 = arith.select %11, %device_n, %0 : !hal.device
  %13 = arith.addi %1, %c1 : index
  cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %4, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %3, @__device_0 : !hal.device
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %c-1 = arith.constant -1 : index
  %c0 = arith.constant 0 : index
  %c14_i32 = arith.constant 14 : i32
  %0 = util.null : !hal.executable
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0 = util.global.load @__device_0 : !hal.device
  %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %2 = arith.cmpi eq, %1, %c0 : index
  cf.cond_br %2, ^bb1, ^bb2
^bb1:  // pred: ^bb0
  %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb3(%executable : !hal.executable)
^bb2:  // pred: ^bb0
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb3(%0 : !hal.executable)
^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
  util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After Inliner (inline) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.initializer {
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok, %value = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  util.initializer {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %0 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0 = util.global.load @__device_0 : !hal.device
    %1 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %2 = arith.cmpi eq, %1, %c0 : index
    cf.cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %executable = hal.executable.create device(%__device_0 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb3(%executable : !hal.executable)
  ^bb2:  // pred: ^bb0
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb3(%0 : !hal.executable)
  ^bb3(%3: !hal.executable):  // 2 preds: ^bb1, ^bb2
    util.global.store %3, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    util.return
  }
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.initializer {
    %0 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %0, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After CombineInitializers (iree-util-combine-initializers) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %0 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %0 : index, index, !hal.device)
  ^bb1(%1: index, %2: index, %3: !hal.device):  // 2 preds: ^bb0, ^bb4
    %4 = util.cmp.eq %3, %0 : !hal.device
    %5 = arith.cmpi slt, %1, %device_count : index
    %6 = arith.andi %4, %5 : i1
    cf.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %1 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%7: i1):  // 2 preds: ^bb2, ^bb3
    %8 = arith.cmpi eq, %2, %c0 : index
    %9 = arith.select %7, %c1, %c0 : index
    %10 = arith.addi %2, %9 : index
    %11 = arith.andi %7, %8 : i1
    %12 = arith.select %11, %device_n, %0 : !hal.device
    %13 = arith.addi %1, %c1 : index
    cf.br ^bb1(%13, %10, %12 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %4, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %3, @__device_0 : !hal.device
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %c-1 = arith.constant -1 : index
    %c0_4 = arith.constant 0 : index
    %c14_i32 = arith.constant 14 : i32
    %14 = util.null : !hal.executable
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0_5 = util.global.load @__device_0 : !hal.device
    %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0_4, %c-1 : index
    %16 = arith.cmpi eq, %15, %c0_4 : index
    cf.cond_br %16, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %executable = hal.executable.create device(%__device_0_5 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb11(%executable : !hal.executable)
  ^bb10:  // pred: ^bb8
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb11(%14 : !hal.executable)
  ^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
    util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After SCFForLoopCanonicalization (scf-for-loop-canonicalization) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After LoopInvariantCodeMotion (loop-invariant-code-motion) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After AffineExpandIndexOps (affine-expand-index-ops) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SCFForLoopCanonicalization (scf-for-loop-canonicalization) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  cf.br ^bb8
^bb8:  // pred: ^bb7
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb9, ^bb10
^bb9:  // pred: ^bb8
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb11(%executable : !hal.executable)
^bb10:  // pred: ^bb8
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb11(%0 : !hal.executable)
^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  cf.br ^bb12
^bb12:  // pred: ^bb11
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SCFForLoopCanonicalization (scf-for-loop-canonicalization) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After LoopInvariantCodeMotion (loop-invariant-code-motion) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After LoopInvariantCodeMotion (loop-invariant-code-motion) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  cf.br ^bb8
^bb8:  // pred: ^bb7
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb9, ^bb10
^bb9:  // pred: ^bb8
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb11(%executable : !hal.executable)
^bb10:  // pred: ^bb8
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb11(%0 : !hal.executable)
^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  cf.br ^bb12
^bb12:  // pred: ^bb11
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  cf.br ^bb8
^bb8:  // pred: ^bb7
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb9, ^bb10
^bb9:  // pred: ^bb8
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb11(%executable : !hal.executable)
^bb10:  // pred: ^bb8
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb11(%0 : !hal.executable)
^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  cf.br ^bb12
^bb12:  // pred: ^bb11
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ArithUnsignedWhenEquivalent (arith-unsigned-when-equivalent) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After AffineExpandIndexOps (affine-expand-index-ops) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After AffineExpandIndexOps (affine-expand-index-ops) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  cf.br ^bb8
^bb8:  // pred: ^bb7
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb9, ^bb10
^bb9:  // pred: ^bb8
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb11(%executable : !hal.executable)
^bb10:  // pred: ^bb8
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb11(%0 : !hal.executable)
^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  cf.br ^bb12
^bb12:  // pred: ^bb11
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  cf.br ^bb8
^bb8:  // pred: ^bb7
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb9, ^bb10
^bb9:  // pred: ^bb8
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb11(%executable : !hal.executable)
^bb10:  // pred: ^bb8
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb11(%0 : !hal.executable)
^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  cf.br ^bb12
^bb12:  // pred: ^bb11
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ArithUnsignedWhenEquivalent (arith-unsigned-when-equivalent) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ArithUnsignedWhenEquivalent (arith-unsigned-when-equivalent) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  cf.br ^bb8
^bb8:  // pred: ^bb7
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb9, ^bb10
^bb9:  // pred: ^bb8
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb11(%executable : !hal.executable)
^bb10:  // pred: ^bb8
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb11(%0 : !hal.executable)
^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  cf.br ^bb12
^bb12:  // pred: ^bb11
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After PropagateSubranges (iree-util-propagate-subranges) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c-1 = arith.constant -1 : index
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %1 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
  ^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
    %5 = util.cmp.eq %4, %1 : !hal.device
    %6 = arith.cmpi slt, %2, %device_count : index
    %7 = arith.andi %5, %6 : i1
    cf.cond_br %7, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %2 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
    %9 = arith.cmpi eq, %3, %c0 : index
    %10 = arith.select %8, %c1, %c0 : index
    %11 = arith.addi %3, %10 : index
    %12 = arith.andi %8, %9 : i1
    %13 = arith.select %12, %device_n, %1 : !hal.device
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %4, @__device_0 : !hal.device
    cf.br ^bb8
  ^bb8:  // pred: ^bb7
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0_4 = util.global.load @__device_0 : !hal.device
    %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %16 = arith.cmpi eq, %15, %c0 : index
    cf.cond_br %16, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb11(%executable : !hal.executable)
  ^bb10:  // pred: ^bb8
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb11(%0 : !hal.executable)
  ^bb11(%17: !hal.executable):  // 2 preds: ^bb9, ^bb10
    util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    cf.br ^bb12
  ^bb12:  // pred: ^bb11
    %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After CSE (cse) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb8, ^bb9
^bb8:  // pred: ^bb7
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb10(%executable : !hal.executable)
^bb9:  // pred: ^bb7
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb10(%0 : !hal.executable)
^bb10(%17: !hal.executable):  // 2 preds: ^bb8, ^bb9
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After CSE (cse) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  util.global.store %4, @__device_0 : !hal.device
  %__device_0 = util.global.load @__device_0 : !hal.device
  %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  %__device_0_4 = util.global.load @__device_0 : !hal.device
  %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  cf.cond_br %16, ^bb8, ^bb9
^bb8:  // pred: ^bb7
  %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb10(%executable : !hal.executable)
^bb9:  // pred: ^bb7
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb10(%0 : !hal.executable)
^bb10(%17: !hal.executable):  // 2 preds: ^bb8, ^bb9
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c-1 = arith.constant -1 : index
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %1 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
  ^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
    %5 = util.cmp.eq %4, %1 : !hal.device
    %6 = arith.cmpi slt, %2, %device_count : index
    %7 = arith.andi %5, %6 : i1
    cf.cond_br %7, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %2 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
    %9 = arith.cmpi eq, %3, %c0 : index
    %10 = arith.select %8, %c1, %c0 : index
    %11 = arith.addi %3, %10 : index
    %12 = arith.andi %8, %9 : i1
    %13 = arith.select %12, %device_n, %1 : !hal.device
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    util.global.store %4, @__device_0 : !hal.device
    %__device_0 = util.global.load @__device_0 : !hal.device
    %ok_2, %value_3 = hal.device.query<%__device_0 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0_query_0_hal_executable_format_cuda_nvptx_fb = util.global.load @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
    %__device_0_4 = util.global.load @__device_0 : !hal.device
    %15 = arith.select %__device_0_query_0_hal_executable_format_cuda_nvptx_fb, %c0, %c-1 : index
    %16 = arith.cmpi eq, %15, %c0 : index
    cf.cond_br %16, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %executable = hal.executable.create device(%__device_0_4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb10(%executable : !hal.executable)
  ^bb9:  // pred: ^bb7
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb10(%0 : !hal.executable)
  ^bb10(%17: !hal.executable):  // 2 preds: ^bb8, ^bb9
    util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.global private @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c-1_i64 = arith.constant -1 : i64
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c-1_i32 = arith.constant -1 : i32
    %c0_i64 = arith.constant 0 : i64
    %0 = util.null : !hal.fence
    %c-1_i64 = arith.constant -1 : i64
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c784 = arith.constant 784 : index
    %c28 = arith.constant 28 : index
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %c-1_i64 = arith.constant -1 : i64
  %c4 = arith.constant 4 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %c3 = arith.constant 3 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %c-1_i32 = arith.constant -1 : i32
  %c0_i64 = arith.constant 0 : i64
  %0 = util.null : !hal.fence
  %c-1_i64 = arith.constant -1 : i64
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c10 = arith.constant 10 : index
  %c784 = arith.constant 784 : index
  %c28 = arith.constant 28 : index
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After SimplifyGlobalAccesses (iree-util-simplify-global-accesses) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  %ok_2, %value_3 = hal.device.query<%4 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  %15 = arith.select %value_3, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  util.global.store %4, @__device_0 : !hal.device
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  cf.cond_br %16, ^bb8, ^bb9
^bb8:  // pred: ^bb7
  %executable = hal.executable.create device(%4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb10(%executable : !hal.executable)
^bb9:  // pred: ^bb7
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb10(%0 : !hal.executable)
^bb10(%17: !hal.executable):  // 2 preds: ^bb8, ^bb9
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
  %c40 = arith.constant 40 : index
  %c31360 = arith.constant 31360 : index
  %c3136 = arith.constant 3136 : index
  %c3 = arith.constant 3 : index
  %c2 = arith.constant 2 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c4 = arith.constant 4 : index
  %c-1_i64 = arith.constant -1 : i64
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
  hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
    (%c0 : index)[%c0, %c3136], 
    (%c1 : index)[%c0, %c31360], 
    (%c2 : index)[%c0, %c40], 
    (%c3 : index)[%c0, %c40]
  ]) flags("None")
  hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
  hal.command_buffer.finalize<%cmd : !hal.command_buffer>
  util.return %cmd : !hal.command_buffer
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c28 = arith.constant 28 : index
  %c784 = arith.constant 784 : index
  %c10 = arith.constant 10 : index
  %c1 = arith.constant 1 : index
  %c0 = arith.constant 0 : index
  %c3136 = arith.constant 3136 : index
  %c31360 = arith.constant 31360 : index
  %c40 = arith.constant 40 : index
  %c-1_i64 = arith.constant -1 : i64
  %0 = util.null : !hal.fence
  %c0_i64 = arith.constant 0 : i64
  %c-1_i32 = arith.constant -1 : i32
  %__device_0 = util.global.load immutable @__device_0 : !hal.device
  %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
  %element_type_f32 = hal.element_type<f32> : i32
  %dense_row_major = hal.encoding_type<dense_row_major> : i32
  hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
  %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
  hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
  %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
  hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
  %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
  %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
  hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
    (%buffer : !hal.buffer)[%c0, %c3136], 
    (%buffer_0 : !hal.buffer)[%c0, %c31360], 
    (%buffer_1 : !hal.buffer)[%c0, %c40], 
    (%transient_buffer : !hal.buffer)[%c0, %c40]
  ])
  %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
  util.status.check_ok %status, "failed to wait on timepoint"
  %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
  util.return %view : !hal.buffer_view
}

// -----// IR Dump After ApplyPatterns (iree-util-apply-patterns) //----- //
util.initializer {
  %0 = util.null : !hal.executable
  %c14_i32 = arith.constant 14 : i32
  %c-1 = arith.constant -1 : index
  %c18_i32 = arith.constant 18 : i32
  %false = arith.constant false
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %1 = util.null : !hal.device
  %device_count = hal.devices.count : index
  cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
  %5 = util.cmp.eq %4, %1 : !hal.device
  %6 = arith.cmpi slt, %2, %device_count : index
  %7 = arith.andi %5, %6 : i1
  cf.cond_br %7, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %device_n = hal.devices.get %2 : !hal.device
  %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
  cf.cond_br %value, ^bb3, ^bb4(%false : i1)
^bb3:  // pred: ^bb2
  %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  cf.br ^bb4(%value_1 : i1)
^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
  %9 = arith.cmpi eq, %3, %c0 : index
  %10 = arith.select %8, %c1, %c0 : index
  %11 = arith.addi %3, %10 : index
  %12 = arith.andi %8, %9 : i1
  %13 = arith.select %12, %device_n, %1 : !hal.device
  %14 = arith.addi %2, %c1 : index
  cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
^bb5:  // pred: ^bb1
  cf.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  cf.br ^bb7
^bb7:  // 2 preds: ^bb5, ^bb6
  %ok_2, %value_3 = hal.device.query<%4 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
  %15 = arith.select %value_3, %c0, %c-1 : index
  %16 = arith.cmpi eq, %15, %c0 : index
  util.global.store %4, @__device_0 : !hal.device
  util.global.store %value_3, @__device_0_query_0_hal_executable_format_cuda_nvptx_fb : i1
  cf.cond_br %16, ^bb8, ^bb9
^bb8:  // pred: ^bb7
  %executable = hal.executable.create device(%4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
  cf.br ^bb10(%executable : !hal.executable)
^bb9:  // pred: ^bb7
  util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  cf.br ^bb10(%0 : !hal.executable)
^bb10(%17: !hal.executable):  // 2 preds: ^bb8, ^bb9
  util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
  %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
  util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.return
}

// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c-1 = arith.constant -1 : index
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %1 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
  ^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
    %5 = util.cmp.eq %4, %1 : !hal.device
    %6 = arith.cmpi slt, %2, %device_count : index
    %7 = arith.andi %5, %6 : i1
    cf.cond_br %7, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %2 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
    %9 = arith.cmpi eq, %3, %c0 : index
    %10 = arith.select %8, %c1, %c0 : index
    %11 = arith.addi %3, %10 : index
    %12 = arith.andi %8, %9 : i1
    %13 = arith.select %12, %device_n, %1 : !hal.device
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %ok_2, %value_3 = hal.device.query<%4 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    %15 = arith.select %value_3, %c0, %c-1 : index
    %16 = arith.cmpi eq, %15, %c0 : index
    util.global.store %4, @__device_0 : !hal.device
    cf.cond_br %16, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %executable = hal.executable.create device(%4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb10(%executable : !hal.executable)
  ^bb9:  // pred: ^bb7
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb10(%0 : !hal.executable)
  ^bb10(%17: !hal.executable):  // 2 preds: ^bb8, ^bb9
    util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module {
  util.global private @__device_0 : !hal.device
  util.initializer {
    %0 = util.null : !hal.executable
    %c14_i32 = arith.constant 14 : i32
    %c-1 = arith.constant -1 : index
    %c18_i32 = arith.constant 18 : i32
    %false = arith.constant false
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %1 = util.null : !hal.device
    %device_count = hal.devices.count : index
    cf.br ^bb1(%c0, %c0, %1 : index, index, !hal.device)
  ^bb1(%2: index, %3: index, %4: !hal.device):  // 2 preds: ^bb0, ^bb4
    %5 = util.cmp.eq %4, %1 : !hal.device
    %6 = arith.cmpi slt, %2, %device_count : index
    %7 = arith.andi %5, %6 : i1
    cf.cond_br %7, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %device_n = hal.devices.get %2 : !hal.device
    %ok, %value = hal.device.query<%device_n : !hal.device> key("hal.device.id" :: "cuda") : i1, i1 = false
    cf.cond_br %value, ^bb3, ^bb4(%false : i1)
  ^bb3:  // pred: ^bb2
    %ok_0, %value_1 = hal.device.query<%device_n : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    cf.br ^bb4(%value_1 : i1)
  ^bb4(%8: i1):  // 2 preds: ^bb2, ^bb3
    %9 = arith.cmpi eq, %3, %c0 : index
    %10 = arith.select %8, %c1, %c0 : index
    %11 = arith.addi %3, %10 : index
    %12 = arith.andi %8, %9 : i1
    %13 = arith.select %12, %device_n, %1 : !hal.device
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14, %11, %13 : index, index, !hal.device)
  ^bb5:  // pred: ^bb1
    cf.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    util.status.check_ok %c18_i32, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    cf.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %ok_2, %value_3 = hal.device.query<%4 : !hal.device> key("hal.executable.format" :: "cuda-nvptx-fb") : i1, i1 = false
    %15 = arith.select %value_3, %c0, %c-1 : index
    %16 = arith.cmpi eq, %15, %c0 : index
    util.global.store %4, @__device_0 : !hal.device
    cf.cond_br %16, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %executable = hal.executable.create device(%4 : !hal.device) target(@main_dispatch_0::@cuda_nvptx_fb) : !hal.executable
    cf.br ^bb10(%executable : !hal.executable)
  ^bb9:  // pred: ^bb7
    util.status.check_ok %c14_i32, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    cf.br ^bb10(%0 : !hal.executable)
  ^bb10(%17: !hal.executable):  // 2 preds: ^bb8, ^bb9
    util.global.store %17, @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %18 = util.call @__main_memoize_apply() : () -> !hal.command_buffer
    util.global.store %18, @__main_memoize_result_0_device_0 : !hal.command_buffer
    util.return
  }
  util.global private @__device_0_executable_0_main_dispatch_0 : !hal.executable
  hal.executable private @main_dispatch_0 {
    hal.executable.binary public @cuda_nvptx_fb attributes {data = dense<"0xvector<2080xi8>, format = "cuda-nvptx-fb"}
  }
  util.func private @__main_memoize_apply() -> !hal.command_buffer attributes {inlining_policy = #util.inline.never} {
    %c40 = arith.constant 40 : index
    %c31360 = arith.constant 31360 : index
    %c3136 = arith.constant 3136 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c-1_i64 = arith.constant -1 : i64
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__device_0_executable_0_main_dispatch_0 = util.global.load immutable @__device_0_executable_0_main_dispatch_0 : !hal.executable
    %cmd = hal.command_buffer.create device(%__device_0 : !hal.device) mode("None") categories("Transfer|Dispatch") affinity(%c-1_i64) bindings(%c4) : !hal.command_buffer
    hal.command_buffer.dispatch<%cmd : !hal.command_buffer> target(%__device_0_executable_0_main_dispatch_0 : !hal.executable)[%c0] workgroups([%c1, %c1, %c1]) bindings([
      (%c0 : index)[%c0, %c3136], 
      (%c1 : index)[%c0, %c31360], 
      (%c2 : index)[%c0, %c40], 
      (%c3 : index)[%c0, %c40]
    ]) flags("None")
    hal.command_buffer.execution_barrier<%cmd : !hal.command_buffer> source("Dispatch|Transfer|CommandRetire") target("CommandIssue|Dispatch|Transfer") flags("None")
    hal.command_buffer.finalize<%cmd : !hal.command_buffer>
    util.return %cmd : !hal.command_buffer
  }
  util.global private @__main_memoize_result_0_device_0 : !hal.command_buffer
  util.func public @main(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = arith.constant 28 : index
    %c784 = arith.constant 784 : index
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c3136 = arith.constant 3136 : index
    %c31360 = arith.constant 31360 : index
    %c40 = arith.constant 40 : index
    %c-1_i64 = arith.constant -1 : i64
    %0 = util.null : !hal.fence
    %c0_i64 = arith.constant 0 : i64
    %c-1_i32 = arith.constant -1 : i32
    %__device_0 = util.global.load immutable @__device_0 : !hal.device
    %__main_memoize_result_0_device_0 = util.global.load immutable @__main_memoize_result_0_device_0 : !hal.command_buffer
    %element_type_f32 = hal.element_type<f32> : i32
    %dense_row_major = hal.encoding_type<dense_row_major> : i32
    hal.buffer_view.assert<%arg0 : !hal.buffer_view> message("input0") shape([%c28, %c28]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer = hal.buffer_view.buffer<%arg0 : !hal.buffer_view> : !hal.buffer
    %allocator = hal.device.allocator<%__device_0 : !hal.device> : !hal.allocator
    hal.buffer.assert<%buffer : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c3136) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg1 : !hal.buffer_view> message("input1") shape([%c784, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_0 = hal.buffer_view.buffer<%arg1 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_0 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c31360) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    hal.buffer_view.assert<%arg2 : !hal.buffer_view> message("input2") shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major)
    %buffer_1 = hal.buffer_view.buffer<%arg2 : !hal.buffer_view> : !hal.buffer
    hal.buffer.assert<%buffer_1 : !hal.buffer> message("tensor") allocator(%allocator : !hal.allocator) minimum_length(%c40) type(DeviceVisible) usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage")
    %fence = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    %transient_buffer = hal.device.queue.alloca<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%0) signal(%fence) pool(%c0_i64) type("DeviceVisible|DeviceLocal") usage("TransferSource|TransferTarget|Transfer|DispatchStorageRead|DispatchStorageWrite|DispatchStorage") : !hal.buffer{%c40}
    %fence_2 = hal.fence.create device(%__device_0 : !hal.device) flags("None") : !hal.fence
    hal.device.queue.execute.indirect<%__device_0 : !hal.device> affinity(%c-1_i64) wait(%fence) signal(%fence_2) commands(%__main_memoize_result_0_device_0) bindings([
      (%buffer : !hal.buffer)[%c0, %c3136], 
      (%buffer_0 : !hal.buffer)[%c0, %c31360], 
      (%buffer_1 : !hal.buffer)[%c0, %c40], 
      (%transient_buffer : !hal.buffer)[%c0, %c40]
    ])
    %status = hal.fence.await until([%fence_2]) timeout_millis(%c-1_i32) : i32
    util.status.check_ok %status, "failed to wait on timepoint"
    %view = hal.buffer_view.create buffer(%transient_buffer : !hal.buffer)[%c0, %c40] shape([%c1, %c10]) type(%element_type_f32) encoding(%dense_row_major) : !hal.buffer_view
    util.return %view : !hal.buffer_view
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::VM::ConversionPass (iree-vm-conversion) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.initializer {
      %null = vm.const.ref.zero : !vm.ref<!hal.executable>
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1 = vm.const.i64 1
      %null_1 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_1 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %req = vm.cmp.eq.ref %4, %null_1 : !vm.ref<!hal.device>
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %5 = vm.and.i32 %req, %slt : i32
      vm.cond_br %5, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %6 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%6) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %buffer = vm.rodata.inline "_utf8_hal_device_id_C1DCB7DBC4F49AE6" {alignment = 1 : i64} : !vm.buffer = "hal.device.id"
      %buffer_2 = vm.rodata.inline "_utf8_cuda_EC9D846C9E731CDE" {alignment = 1 : i64} : !vm.buffer = "cuda"
      %7:2 = vm.call @hal.device.query.i64(%ref, %buffer, %buffer_2) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %7#1 : i64
      %zero_3 = vm.const.i32.zero
      %8 = vm.select.i32 %7#0, %nz, %zero_3 : i32
      %c1_4 = vm.const.i32 1
      vm.cond_br %8, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %buffer_5 = vm.rodata.inline "_utf8_hal_executable_format_EAB228F999C2D3A1" {alignment = 1 : i64} : !vm.buffer = "hal.executable.format"
      %buffer_6 = vm.rodata.inline "_utf8_cuda_nvptx_fb_B15B42B96FDBACC" {alignment = 1 : i64} : !vm.buffer = "cuda-nvptx-fb"
      %9:2 = vm.call @hal.device.query.i64(%ref, %buffer_5, %buffer_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %9#1 : i64
      %zero_8 = vm.const.i32.zero
      %10 = vm.select.i32 %9#0, %nz_7, %zero_8 : i32
      %c1_9 = vm.const.i32 1
      vm.br ^bb4(%10 : i32)
    ^bb4(%11: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %12 = vm.select.i64 %11, %c1, %zero_0 : i64
      %13 = vm.add.i64 %3, %12 : i64
      %14 = vm.and.i32 %11, %eq : i32
      %ref_10 = vm.select.ref %14, %ref, %null_1 : !vm.ref<!hal.device>
      %15 = vm.add.i64 %2, %c1 : i64
      vm.br ^bb1(%15, %13, %ref_10 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %req, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.cond_fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<"cuda", [#hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
      vm.br ^bb7
    ^bb7:  // 2 preds: ^bb5, ^bb6
      %buffer_11 = vm.rodata.inline "_utf8_hal_executable_format_EAB228F999C2D3A1" {alignment = 1 : i64} : !vm.buffer = "hal.executable.format"
      %buffer_12 = vm.rodata.inline "_utf8_cuda_nvptx_fb_B15B42B96FDBACC" {alignment = 1 : i64} : !vm.buffer = "cuda-nvptx-fb"
      %16:2 = vm.call @hal.device.query.i64(%4, %buffer_11, %buffer_12) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_13 = vm.cmp.nz.i64 %16#1 : i64
      %zero_14 = vm.const.i32.zero
      %17 = vm.select.i32 %16#0, %nz_13, %zero_14 : i32
      %c1_15 = vm.const.i32 1
      %18 = vm.select.i64 %17, %zero_0, %c-1 : i64
      %eq_16 = vm.cmp.eq.i64 %18, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_16, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %buffer_17 = vm.rodata.inline "main_dispatch_0_cuda_nvptx_fb" {alignment = 16 : i64} : !vm.buffer = dense<"0xvector<2080xi8>
      %buffer_18 = vm.rodata.inline "_utf8_cuda_nvptx_fb_B15B42B96FDBACC" {alignment = 1 : i64} : !vm.buffer = "cuda-nvptx-fb"
      %null_19 = vm.const.ref.zero : !vm.buffer
      %ref_20 = vm.call @hal.executable.create(%4, %buffer_18, %buffer_17, %null_19) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.br ^bb10(%ref_20 : !vm.ref<!hal.executable>)
    ^bb9:  // pred: ^bb7
      vm.cond_fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      vm.br ^bb10(%null : !vm.ref<!hal.executable>)
    ^bb10(%19: !vm.ref<!hal.executable>):  // 2 preds: ^bb8, ^bb9
      vm.global.store.ref %19, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_21 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_21, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %c3 = vm.const.i64 3
      %c2 = vm.const.i64 2
      %c1 = vm.const.i64 1
      %zero = vm.const.i64.zero
      %c4 = vm.const.i64 4
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %zero_0 = vm.const.i32.zero
      %c3_1 = vm.const.i32 3
      %c4_2 = vm.const.i32 4
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero_0, %c3_1, %c-1, %c4_2) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      %zero_3 = vm.const.i32.zero
      %zero_4 = vm.const.i64 0
      %zero_5 = vm.const.i32.zero
      %c1_6 = vm.const.i32 1
      %c1_7 = vm.const.i32 1
      %c1_8 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %zero_9 = vm.const.i32.zero
      %null_10 = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1_11 = vm.const.i32 1
      %null_12 = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c2_13 = vm.const.i32 2
      %null_14 = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c3_15 = vm.const.i32 3
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero_5, %c1_6, %c1_7, %c1_8, %zero_4, [], [(%zero_3, %zero_9, %null, %zero, %c3136), (%zero_3, %c1_11, %null_10, %zero, %c31360), (%zero_3, %c2_13, %null_12, %zero, %c40), (%zero_3, %c3_15, %null_14, %zero, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      %c28 = vm.const.i32 28
      %c13 = vm.const.i32 13
      %zero_16 = vm.const.i32.zero
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_16) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.ex.file.from_memory(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %access : i32, %buffer : !vm.buffer, %offset : i64, %length : i64, %flags : i32) -> !vm.ref<!hal.file>
    vm.import private @hal.allocator.allocate(%allocator : !vm.ref<!hal.allocator>, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.allocator.import(%allocator : !vm.ref<!hal.allocator>, %try : i32, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %source : !vm.buffer, %offset : i64, %length : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer.subspan(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i64) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.buffer.length(%buffer : !vm.ref<!hal.buffer>) -> i64 attributes {nosideeffects}
    vm.import private @hal.buffer.load(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i32) -> i32
    vm.import private @hal.buffer.store(%value : i32, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.buffer_view.element_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
    vm.import private @hal.buffer_view.encoding_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
    vm.import private @hal.buffer_view.rank(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
    vm.import private @hal.buffer_view.dim(%buffer_view : !vm.ref<!hal.buffer_view>, %index : i32) -> i64 attributes {nosideeffects}
    vm.import private @hal.buffer_view.trace(%key : !vm.buffer, %operands : !vm.ref<!hal.buffer_view> ...)
    vm.import private @hal.channel.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %flags : i32, %id : !vm.buffer, %group : !vm.buffer, %rank : i32, %count : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
    vm.import private @hal.channel.split(%channel : !vm.ref<!hal.channel>, %color : i32, %key : i32, %flags : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
    vm.import private @hal.channel.rank_and_count(%channel : !vm.ref<!hal.channel>) -> (i32, i32) attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.begin_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>, %label : !vm.buffer)
    vm.import private @hal.command_buffer.end_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.fill_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32, %pattern : i32, %pattern_length : i32)
    vm.import private @hal.command_buffer.update_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32)
    vm.import private @hal.command_buffer.copy_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer_slot : i32, %target_buffer_slot : i32, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64)
    vm.import private @hal.command_buffer.collective(%command_buffer : !vm.ref<!hal.command_buffer>, %channel : !vm.ref<!hal.channel>, %op : i32, %param : i32, %send_buffer_slot : i32, %recv_buffer_slot : i32, %send_buffer : !vm.ref<!hal.buffer>, %recv_buffer : !vm.ref<!hal.buffer>, %send_offset : i64, %send_length : i64, %recv_offset : i64, %recv_length : i64, %element_count : i64)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.command_buffer.dispatch.indirect(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroups_buffer_slot : i32, %workgroups_buffer : !vm.ref<!hal.buffer>, %workgroups_offset : i64, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.dealloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %buffer : !vm.ref<!hal.buffer>)
    vm.import private @hal.device.queue.fill(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %pattern : i64, %pattern_length : i32, %flags : i64)
    vm.import private @hal.device.queue.update(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
    vm.import private @hal.device.queue.copy(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
    vm.import private @hal.device.queue.read(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_file : !vm.ref<!hal.file>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i32)
    vm.import private @hal.device.queue.write(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_file : !vm.ref<!hal.file>, %target_offset : i64, %length : i64, %flags : i32)
    vm.import private @hal.device.queue.execute(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffers : !vm.ref<!hal.command_buffer> ...)
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.queue.flush(%device : !vm.ref<!hal.device>, %queue_affinity : i64)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.join(%fences : !vm.ref<!hal.fence> ...) -> !vm.ref<!hal.fence> attributes {nosideeffects}
    vm.import private @hal.fence.query(%fence : !vm.ref<!hal.fence>) -> i32
    vm.import private @hal.fence.signal(%fence : !vm.ref<!hal.fence>)
    vm.import private @hal.fence.fail(%fence : !vm.ref<!hal.fence>, %status : i32)
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1 = vm.const.i64 1
      %zero = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %zero_0 = vm.const.i64.zero
      %c-1_1 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %c553648160 = vm.const.i32 553648160
      %c1_2 = vm.const.i32 1
      %buffer = vm.rodata.inline "_utf8_input0_F74E046E5FFA3735" {alignment = 1 : i64} : !vm.buffer = "input0"
      vm.call.variadic @hal.buffer_view.assert(%arg0, %buffer, %c553648160, %c1_2, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %buffer_4 = vm.rodata.inline "_utf8_tensor_3C6209B4FD120BDC" {alignment = 1 : i64} : !vm.buffer = "tensor"
      %c16 = vm.const.i32 16
      %c3075 = vm.const.i32 3075
      vm.call @hal.buffer.assert(%ref, %buffer_4, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %buffer_5 = vm.rodata.inline "_utf8_input1_E2E5222C371315B9" {alignment = 1 : i64} : !vm.buffer = "input1"
      vm.call.variadic @hal.buffer_view.assert(%arg1, %buffer_5, %c553648160, %c1_2, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %buffer_7 = vm.rodata.inline "_utf8_tensor_3C6209B4FD120BDC" {alignment = 1 : i64} : !vm.buffer = "tensor"
      %c16_8 = vm.const.i32 16
      %c3075_9 = vm.const.i32 3075
      vm.call @hal.buffer.assert(%ref_6, %buffer_7, %ref_3, %c31360, %c16_8, %c3075_9) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %buffer_10 = vm.rodata.inline "_utf8_input2_18A68D379CE18F1A" {alignment = 1 : i64} : !vm.buffer = "input2"
      vm.call.variadic @hal.buffer_view.assert(%arg2, %buffer_10, %c553648160, %c1_2, [%c1, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_11 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %buffer_12 = vm.rodata.inline "_utf8_tensor_3C6209B4FD120BDC" {alignment = 1 : i64} : !vm.buffer = "tensor"
      %c16_13 = vm.const.i32 16
      %c3075_14 = vm.const.i32 3075
      vm.call @hal.buffer.assert(%ref_11, %buffer_12, %ref_3, %c40, %c16_13, %c3075_14) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %zero_15 = vm.const.i32.zero
      %ref_16 = vm.call @hal.fence.create(%__device_0, %zero_15) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %zero_17 = vm.const.i32.zero
      %c48 = vm.const.i32 48
      %c3075_18 = vm.const.i32 3075
      %ref_19 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_16, %zero_17, %c48, %c3075_18, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %zero_20 = vm.const.i32.zero
      %ref_21 = vm.call @hal.fence.create(%__device_0, %zero_20) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_16, %ref_21, %__main_memoize_result_0_device_0, [(%ref, %zero, %c3136), (%ref_6, %zero, %c31360), (%ref_11, %zero, %c40), (%ref_19, %zero, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_1, [%ref_21]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_fail %0, "failed to wait on timepoint"
      %ref_22 = vm.call.variadic @hal.buffer_view.create(%ref_19, %zero, %c40, %c553648160, %c1_2, [%c1, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_22 : !vm.ref<!hal.buffer_view>
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::VM::ReifyRodataTablesPass (iree-vm-reify-rodata-tables) //----- //
vm.module public @module {
  vm.global.ref private @__device_0 : !vm.ref<!hal.device>
  vm.initializer {
    %null = vm.const.ref.zero : !vm.ref<!hal.executable>
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1 = vm.const.i64 1
    %null_1 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_1 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %req = vm.cmp.eq.ref %4, %null_1 : !vm.ref<!hal.device>
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %5 = vm.and.i32 %req, %slt : i32
    vm.cond_br %5, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %6 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%6) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %buffer = vm.rodata.inline "_utf8_hal_device_id_C1DCB7DBC4F49AE6" {alignment = 1 : i64} : !vm.buffer = "hal.device.id"
    %buffer_2 = vm.rodata.inline "_utf8_cuda_EC9D846C9E731CDE" {alignment = 1 : i64} : !vm.buffer = "cuda"
    %7:2 = vm.call @hal.device.query.i64(%ref, %buffer, %buffer_2) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %7#1 : i64
    %zero_3 = vm.const.i32.zero
    %8 = vm.select.i32 %7#0, %nz, %zero_3 : i32
    %c1_4 = vm.const.i32 1
    vm.cond_br %8, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %buffer_5 = vm.rodata.inline "_utf8_hal_executable_format_EAB228F999C2D3A1" {alignment = 1 : i64} : !vm.buffer = "hal.executable.format"
    %buffer_6 = vm.rodata.inline "_utf8_cuda_nvptx_fb_B15B42B96FDBACC" {alignment = 1 : i64} : !vm.buffer = "cuda-nvptx-fb"
    %9:2 = vm.call @hal.device.query.i64(%ref, %buffer_5, %buffer_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %9#1 : i64
    %zero_8 = vm.const.i32.zero
    %10 = vm.select.i32 %9#0, %nz_7, %zero_8 : i32
    %c1_9 = vm.const.i32 1
    vm.br ^bb4(%10 : i32)
  ^bb4(%11: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %12 = vm.select.i64 %11, %c1, %zero_0 : i64
    %13 = vm.add.i64 %3, %12 : i64
    %14 = vm.and.i32 %11, %eq : i32
    %ref_10 = vm.select.ref %14, %ref, %null_1 : !vm.ref<!hal.device>
    %15 = vm.add.i64 %2, %c1 : i64
    vm.br ^bb1(%15, %13, %ref_10 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %req, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.cond_fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<"cuda", [#hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    vm.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %buffer_11 = vm.rodata.inline "_utf8_hal_executable_format_EAB228F999C2D3A1" {alignment = 1 : i64} : !vm.buffer = "hal.executable.format"
    %buffer_12 = vm.rodata.inline "_utf8_cuda_nvptx_fb_B15B42B96FDBACC" {alignment = 1 : i64} : !vm.buffer = "cuda-nvptx-fb"
    %16:2 = vm.call @hal.device.query.i64(%4, %buffer_11, %buffer_12) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_13 = vm.cmp.nz.i64 %16#1 : i64
    %zero_14 = vm.const.i32.zero
    %17 = vm.select.i32 %16#0, %nz_13, %zero_14 : i32
    %c1_15 = vm.const.i32 1
    %18 = vm.select.i64 %17, %zero_0, %c-1 : i64
    %eq_16 = vm.cmp.eq.i64 %18, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_16, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %buffer_17 = vm.rodata.inline "main_dispatch_0_cuda_nvptx_fb" {alignment = 16 : i64} : !vm.buffer = dense<"0xvector<2080xi8>
    %buffer_18 = vm.rodata.inline "_utf8_cuda_nvptx_fb_B15B42B96FDBACC" {alignment = 1 : i64} : !vm.buffer = "cuda-nvptx-fb"
    %null_19 = vm.const.ref.zero : !vm.buffer
    %ref_20 = vm.call @hal.executable.create(%4, %buffer_18, %buffer_17, %null_19) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.br ^bb10(%ref_20 : !vm.ref<!hal.executable>)
  ^bb9:  // pred: ^bb7
    vm.cond_fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    vm.br ^bb10(%null : !vm.ref<!hal.executable>)
  ^bb10(%19: !vm.ref<!hal.executable>):  // 2 preds: ^bb8, ^bb9
    vm.global.store.ref %19, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_21 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_21, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  }
  vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %c3 = vm.const.i64 3
    %c2 = vm.const.i64 2
    %c1 = vm.const.i64 1
    %zero = vm.const.i64.zero
    %c4 = vm.const.i64 4
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %zero_0 = vm.const.i32.zero
    %c3_1 = vm.const.i32 3
    %c4_2 = vm.const.i32 4
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero_0, %c3_1, %c-1, %c4_2) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    %zero_3 = vm.const.i32.zero
    %zero_4 = vm.const.i64 0
    %zero_5 = vm.const.i32.zero
    %c1_6 = vm.const.i32 1
    %c1_7 = vm.const.i32 1
    %c1_8 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %zero_9 = vm.const.i32.zero
    %null_10 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1_11 = vm.const.i32 1
    %null_12 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c2_13 = vm.const.i32 2
    %null_14 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c3_15 = vm.const.i32 3
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero_5, %c1_6, %c1_7, %c1_8, %zero_4, [], [(%zero_3, %zero_9, %null, %zero, %c3136), (%zero_3, %c1_11, %null_10, %zero, %c31360), (%zero_3, %c2_13, %null_12, %zero, %c40), (%zero_3, %c3_15, %null_14, %zero, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    %c28 = vm.const.i32 28
    %c13 = vm.const.i32 13
    %zero_16 = vm.const.i32.zero
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_16) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.ex.file.from_memory(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %access : i32, %buffer : !vm.buffer, %offset : i64, %length : i64, %flags : i32) -> !vm.ref<!hal.file>
  vm.import private @hal.allocator.allocate(%allocator : !vm.ref<!hal.allocator>, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.allocator.import(%allocator : !vm.ref<!hal.allocator>, %try : i32, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %source : !vm.buffer, %offset : i64, %length : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer.subspan(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i64) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer.length(%buffer : !vm.ref<!hal.buffer>) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer.load(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i32) -> i32
  vm.import private @hal.buffer.store(%value : i32, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer_view.element_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.encoding_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.rank(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.dim(%buffer_view : !vm.ref<!hal.buffer_view>, %index : i32) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer_view.trace(%key : !vm.buffer, %operands : !vm.ref<!hal.buffer_view> ...)
  vm.import private @hal.channel.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %flags : i32, %id : !vm.buffer, %group : !vm.buffer, %rank : i32, %count : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.split(%channel : !vm.ref<!hal.channel>, %color : i32, %key : i32, %flags : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.rank_and_count(%channel : !vm.ref<!hal.channel>) -> (i32, i32) attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.begin_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>, %label : !vm.buffer)
  vm.import private @hal.command_buffer.end_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.fill_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32, %pattern : i32, %pattern_length : i32)
  vm.import private @hal.command_buffer.update_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32)
  vm.import private @hal.command_buffer.copy_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer_slot : i32, %target_buffer_slot : i32, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64)
  vm.import private @hal.command_buffer.collective(%command_buffer : !vm.ref<!hal.command_buffer>, %channel : !vm.ref<!hal.channel>, %op : i32, %param : i32, %send_buffer_slot : i32, %recv_buffer_slot : i32, %send_buffer : !vm.ref<!hal.buffer>, %recv_buffer : !vm.ref<!hal.buffer>, %send_offset : i64, %send_length : i64, %recv_offset : i64, %recv_length : i64, %element_count : i64)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.command_buffer.dispatch.indirect(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroups_buffer_slot : i32, %workgroups_buffer : !vm.ref<!hal.buffer>, %workgroups_offset : i64, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.dealloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %buffer : !vm.ref<!hal.buffer>)
  vm.import private @hal.device.queue.fill(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %pattern : i64, %pattern_length : i32, %flags : i64)
  vm.import private @hal.device.queue.update(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.copy(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.read(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_file : !vm.ref<!hal.file>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.write(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_file : !vm.ref<!hal.file>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.execute(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffers : !vm.ref<!hal.command_buffer> ...)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.queue.flush(%device : !vm.ref<!hal.device>, %queue_affinity : i64)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.join(%fences : !vm.ref<!hal.fence> ...) -> !vm.ref<!hal.fence> attributes {nosideeffects}
  vm.import private @hal.fence.query(%fence : !vm.ref<!hal.fence>) -> i32
  vm.import private @hal.fence.signal(%fence : !vm.ref<!hal.fence>)
  vm.import private @hal.fence.fail(%fence : !vm.ref<!hal.fence>, %status : i32)
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1 = vm.const.i64 1
    %zero = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %zero_0 = vm.const.i64.zero
    %c-1_1 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %c553648160 = vm.const.i32 553648160
    %c1_2 = vm.const.i32 1
    %buffer = vm.rodata.inline "_utf8_input0_F74E046E5FFA3735" {alignment = 1 : i64} : !vm.buffer = "input0"
    vm.call.variadic @hal.buffer_view.assert(%arg0, %buffer, %c553648160, %c1_2, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %buffer_4 = vm.rodata.inline "_utf8_tensor_3C6209B4FD120BDC" {alignment = 1 : i64} : !vm.buffer = "tensor"
    %c16 = vm.const.i32 16
    %c3075 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref, %buffer_4, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %buffer_5 = vm.rodata.inline "_utf8_input1_E2E5222C371315B9" {alignment = 1 : i64} : !vm.buffer = "input1"
    vm.call.variadic @hal.buffer_view.assert(%arg1, %buffer_5, %c553648160, %c1_2, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_6 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %buffer_7 = vm.rodata.inline "_utf8_tensor_3C6209B4FD120BDC" {alignment = 1 : i64} : !vm.buffer = "tensor"
    %c16_8 = vm.const.i32 16
    %c3075_9 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref_6, %buffer_7, %ref_3, %c31360, %c16_8, %c3075_9) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %buffer_10 = vm.rodata.inline "_utf8_input2_18A68D379CE18F1A" {alignment = 1 : i64} : !vm.buffer = "input2"
    vm.call.variadic @hal.buffer_view.assert(%arg2, %buffer_10, %c553648160, %c1_2, [%c1, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_11 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %buffer_12 = vm.rodata.inline "_utf8_tensor_3C6209B4FD120BDC" {alignment = 1 : i64} : !vm.buffer = "tensor"
    %c16_13 = vm.const.i32 16
    %c3075_14 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref_11, %buffer_12, %ref_3, %c40, %c16_13, %c3075_14) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %zero_15 = vm.const.i32.zero
    %ref_16 = vm.call @hal.fence.create(%__device_0, %zero_15) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %zero_17 = vm.const.i32.zero
    %c48 = vm.const.i32 48
    %c3075_18 = vm.const.i32 3075
    %ref_19 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_16, %zero_17, %c48, %c3075_18, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %zero_20 = vm.const.i32.zero
    %ref_21 = vm.call @hal.fence.create(%__device_0, %zero_20) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_16, %ref_21, %__main_memoize_result_0_device_0, [(%ref, %zero, %c3136), (%ref_6, %zero, %c31360), (%ref_11, %zero, %c40), (%ref_19, %zero, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_1, [%ref_21]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_fail %0, "failed to wait on timepoint"
    %ref_22 = vm.call.variadic @hal.buffer_view.create(%ref_19, %zero, %c40, %c553648160, %c1_2, [%c1, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_22 : !vm.ref<!hal.buffer_view>
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
}

// -----// IR Dump After mlir::iree_compiler::IREE::VM::HoistInlinedRodataPass (iree-vm-hoist-inlined-rodata) //----- //
vm.module public @module {
  vm.global.ref private @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1_0 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC_1 {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0x0C000000434441310000000006F8FFFF08000000C8000000010000000400000012F8FFFF3C0000002000000001000000010000000800000050000000040000000300000000000000030000000000000003000000000000000200000000000000210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F66333200000082F8FFFF28000000040000008EF8FFFF08000000010000000F000000636F6E762D6C617965722E6D6C697200210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320000000100000004000000E4F8FFFF040000000E0700002F2F0A2F2F2047656E657261746564206279204C4C564D204E56505458204261636B2D456E640A2F2F0A0A2E76657273696F6E20372E360A2E74617267657420736D5F38360A2E616464726573735F73697A652036340A0A092F2F202E676C6F626C096D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320A0A2E76697369626C65202E656E747279206D61696E5F64697370617463685F305F7665636D61745F3130783738345F663332280A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F302C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F312C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F322C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F330A290A2E6D61786E7469642033322C20312C20310A7B0A092E726567202E70726564200925703C333E3B0A092E726567202E623332200925723C323E3B0A092E726567202E663332200925663C31393E3B0A092E726567202E62363420092572643C32323E3B0A0A096D6F762E75333220092572312C20257469642E783B0A09736574702E67742E75333220092570312C202572312C20393B0A0940257031206272612009244C5F5F4242305F343B0A096C642E706172616D2E753634200925726431322C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F335D3B0A096C642E706172616D2E753634200925726431312C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F325D3B0A096C642E706172616D2E753634200925726431302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F315D3B0A096C642E706172616D2E753634200925726432302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F305D3B0A096376742E7536342E7533322009257264312C202572313B0A0973686C2E623634200925726431342C20257264312C20323B0A096164642E733634200925726431352C2025726431342C2025726431303B0A096164642E733634200925726431392C2025726431352C2038303B0A096D6F762E6633322009256631382C20306630303030303030303B0A096D6F762E753634200925726432312C202D343B0A244C5F5F4242305F323A0A096C642E676C6F62616C2E6E632E76342E66333220097B2566342C202566352C202566362C202566377D2C205B25726432305D3B0A096C642E676C6F62616C2E6E632E66333220092566382C205B25726431392B2D38305D3B0A096C642E676C6F62616C2E6E632E66333220092566392C205B25726431392B2D34305D3B0A096C642E676C6F62616C2E6E632E6633322009256631302C205B25726431395D3B0A096C642E676C6F62616C2E6E632E6633322009256631312C205B25726431392B34305D3B0A09666D612E726E2E6633322009256631322C202566382C202566342C20256631383B0A09666D612E726E2E6633322009256631332C202566392C202566352C20256631323B0A09666D612E726E2E6633322009256631342C20256631302C202566362C20256631333B0A09666D612E726E2E6633322009256631382C20256631312C202566372C20256631343B0A096164642E733634200925726432312C2025726432312C20343B0A096164642E733634200925726432302C2025726432302C2031363B0A096164642E733634200925726431392C2025726431392C203136303B0A09736574702E6C742E75363420092570322C2025726432312C203738303B0A0940257032206272612009244C5F5F4242305F323B0A096164642E733634200925726431372C2025726431312C2025726431343B0A096C642E676C6F62616C2E6E632E6633322009256631352C205B25726431375D3B0A096164642E726E2E6633322009256631362C20256631382C20256631353B0A096D61782E4E614E2E6633322009256631372C20256631362C20306630303030303030303B0A096164642E733634200925726431382C2025726431322C2025726431343B0A0973742E676C6F62616C2E66333220095B25726431385D2C20256631373B0A244C5F5F4242305F343A0A097265743B0A0A7D0A000006000800040008000C000400080012001C000000040008000000000014001800"> : vector<2080xi8>
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC_2 {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.initializer {
    %null = vm.const.ref.zero : !vm.ref<!hal.executable>
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1 = vm.const.i64 1
    %null_1 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_1 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %req = vm.cmp.eq.ref %4, %null_1 : !vm.ref<!hal.device>
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %5 = vm.and.i32 %req, %slt : i32
    vm.cond_br %5, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %6 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%6) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %7:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %7#1 : i64
    %zero_2 = vm.const.i32.zero
    %8 = vm.select.i32 %7#0, %nz, %zero_2 : i32
    %c1_3 = vm.const.i32 1
    vm.cond_br %8, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %9:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_4 = vm.cmp.nz.i64 %9#1 : i64
    %zero_5 = vm.const.i32.zero
    %10 = vm.select.i32 %9#0, %nz_4, %zero_5 : i32
    %c1_6 = vm.const.i32 1
    vm.br ^bb4(%10 : i32)
  ^bb4(%11: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %12 = vm.select.i64 %11, %c1, %zero_0 : i64
    %13 = vm.add.i64 %3, %12 : i64
    %14 = vm.and.i32 %11, %eq : i32
    %ref_7 = vm.select.ref %14, %ref, %null_1 : !vm.ref<!hal.device>
    %15 = vm.add.i64 %2, %c1 : i64
    vm.br ^bb1(%15, %13, %ref_7 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %req, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.cond_fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<"cuda", [#hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    vm.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %_utf8_hal_executable_format_EAB228F999C2D3A1_0 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1_0 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_1 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC_1 : !vm.buffer
    %16:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_0, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_1) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_8 = vm.cmp.nz.i64 %16#1 : i64
    %zero_9 = vm.const.i32.zero
    %17 = vm.select.i32 %16#0, %nz_8, %zero_9 : i32
    %c1_10 = vm.const.i32 1
    %18 = vm.select.i64 %17, %zero_0, %c-1 : i64
    %eq_11 = vm.cmp.eq.i64 %18, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_11, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_2 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC_2 : !vm.buffer
    %null_12 = vm.const.ref.zero : !vm.buffer
    %ref_13 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_2, %main_dispatch_0_cuda_nvptx_fb, %null_12) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.br ^bb10(%ref_13 : !vm.ref<!hal.executable>)
  ^bb9:  // pred: ^bb7
    vm.cond_fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    vm.br ^bb10(%null : !vm.ref<!hal.executable>)
  ^bb10(%19: !vm.ref<!hal.executable>):  // 2 preds: ^bb8, ^bb9
    vm.global.store.ref %19, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_14 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_14, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  }
  vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %c3 = vm.const.i64 3
    %c2 = vm.const.i64 2
    %c1 = vm.const.i64 1
    %zero = vm.const.i64.zero
    %c4 = vm.const.i64 4
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %zero_0 = vm.const.i32.zero
    %c3_1 = vm.const.i32 3
    %c4_2 = vm.const.i32 4
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero_0, %c3_1, %c-1, %c4_2) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    %zero_3 = vm.const.i32.zero
    %zero_4 = vm.const.i64 0
    %zero_5 = vm.const.i32.zero
    %c1_6 = vm.const.i32 1
    %c1_7 = vm.const.i32 1
    %c1_8 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %zero_9 = vm.const.i32.zero
    %null_10 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1_11 = vm.const.i32 1
    %null_12 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c2_13 = vm.const.i32 2
    %null_14 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c3_15 = vm.const.i32 3
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero_5, %c1_6, %c1_7, %c1_8, %zero_4, [], [(%zero_3, %zero_9, %null, %zero, %c3136), (%zero_3, %c1_11, %null_10, %zero, %c31360), (%zero_3, %c2_13, %null_12, %zero, %c40), (%zero_3, %c3_15, %null_14, %zero, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    %c28 = vm.const.i32 28
    %c13 = vm.const.i32 13
    %zero_16 = vm.const.i32.zero
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_16) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.ex.file.from_memory(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %access : i32, %buffer : !vm.buffer, %offset : i64, %length : i64, %flags : i32) -> !vm.ref<!hal.file>
  vm.import private @hal.allocator.allocate(%allocator : !vm.ref<!hal.allocator>, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.allocator.import(%allocator : !vm.ref<!hal.allocator>, %try : i32, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %source : !vm.buffer, %offset : i64, %length : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer.subspan(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i64) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer.length(%buffer : !vm.ref<!hal.buffer>) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer.load(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i32) -> i32
  vm.import private @hal.buffer.store(%value : i32, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer_view.element_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.encoding_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.rank(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.dim(%buffer_view : !vm.ref<!hal.buffer_view>, %index : i32) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer_view.trace(%key : !vm.buffer, %operands : !vm.ref<!hal.buffer_view> ...)
  vm.import private @hal.channel.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %flags : i32, %id : !vm.buffer, %group : !vm.buffer, %rank : i32, %count : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.split(%channel : !vm.ref<!hal.channel>, %color : i32, %key : i32, %flags : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.rank_and_count(%channel : !vm.ref<!hal.channel>) -> (i32, i32) attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.begin_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>, %label : !vm.buffer)
  vm.import private @hal.command_buffer.end_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.fill_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32, %pattern : i32, %pattern_length : i32)
  vm.import private @hal.command_buffer.update_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32)
  vm.import private @hal.command_buffer.copy_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer_slot : i32, %target_buffer_slot : i32, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64)
  vm.import private @hal.command_buffer.collective(%command_buffer : !vm.ref<!hal.command_buffer>, %channel : !vm.ref<!hal.channel>, %op : i32, %param : i32, %send_buffer_slot : i32, %recv_buffer_slot : i32, %send_buffer : !vm.ref<!hal.buffer>, %recv_buffer : !vm.ref<!hal.buffer>, %send_offset : i64, %send_length : i64, %recv_offset : i64, %recv_length : i64, %element_count : i64)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.command_buffer.dispatch.indirect(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroups_buffer_slot : i32, %workgroups_buffer : !vm.ref<!hal.buffer>, %workgroups_offset : i64, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.dealloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %buffer : !vm.ref<!hal.buffer>)
  vm.import private @hal.device.queue.fill(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %pattern : i64, %pattern_length : i32, %flags : i64)
  vm.import private @hal.device.queue.update(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.copy(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.read(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_file : !vm.ref<!hal.file>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.write(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_file : !vm.ref<!hal.file>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.execute(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffers : !vm.ref<!hal.command_buffer> ...)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.queue.flush(%device : !vm.ref<!hal.device>, %queue_affinity : i64)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.join(%fences : !vm.ref<!hal.fence> ...) -> !vm.ref<!hal.fence> attributes {nosideeffects}
  vm.import private @hal.fence.query(%fence : !vm.ref<!hal.fence>) -> i32
  vm.import private @hal.fence.signal(%fence : !vm.ref<!hal.fence>)
  vm.import private @hal.fence.fail(%fence : !vm.ref<!hal.fence>, %status : i32)
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC_3 {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC_4 {alignment = 1 : i64} "tensor"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1 = vm.const.i64 1
    %zero = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %zero_0 = vm.const.i64.zero
    %c-1_1 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %c553648160 = vm.const.i32 553648160
    %c1_2 = vm.const.i32 1
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1_2, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    %c16 = vm.const.i32 16
    %c3075 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1_2, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_3 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC_3 : !vm.buffer
    %c16_5 = vm.const.i32 16
    %c3075_6 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_3, %ref_3, %c31360, %c16_5, %c3075_6) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1_2, [%c1, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_7 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_4 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC_4 : !vm.buffer
    %c16_8 = vm.const.i32 16
    %c3075_9 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref_7, %_utf8_tensor_3C6209B4FD120BDC_4, %ref_3, %c40, %c16_8, %c3075_9) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %zero_10 = vm.const.i32.zero
    %ref_11 = vm.call @hal.fence.create(%__device_0, %zero_10) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %zero_12 = vm.const.i32.zero
    %c48 = vm.const.i32 48
    %c3075_13 = vm.const.i32 3075
    %ref_14 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_11, %zero_12, %c48, %c3075_13, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %zero_15 = vm.const.i32.zero
    %ref_16 = vm.call @hal.fence.create(%__device_0, %zero_15) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_11, %ref_16, %__main_memoize_result_0_device_0, [(%ref, %zero, %c3136), (%ref_4, %zero, %c31360), (%ref_7, %zero, %c40), (%ref_14, %zero, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_1, [%ref_16]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_fail %0, "failed to wait on timepoint"
    %ref_17 = vm.call.variadic @hal.buffer_view.create(%ref_14, %zero, %c40, %c553648160, %c1_2, [%c1, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_17 : !vm.ref<!hal.buffer_view>
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
}

// -----// IR Dump After mlir::iree_compiler::IREE::VM::DeduplicateRodataPass (iree-vm-deduplicate-rodata) //----- //
vm.module public @module {
  vm.global.ref private @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0x0C000000434441310000000006F8FFFF08000000C8000000010000000400000012F8FFFF3C0000002000000001000000010000000800000050000000040000000300000000000000030000000000000003000000000000000200000000000000210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F66333200000082F8FFFF28000000040000008EF8FFFF08000000010000000F000000636F6E762D6C617965722E6D6C697200210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320000000100000004000000E4F8FFFF040000000E0700002F2F0A2F2F2047656E657261746564206279204C4C564D204E56505458204261636B2D456E640A2F2F0A0A2E76657273696F6E20372E360A2E74617267657420736D5F38360A2E616464726573735F73697A652036340A0A092F2F202E676C6F626C096D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320A0A2E76697369626C65202E656E747279206D61696E5F64697370617463685F305F7665636D61745F3130783738345F663332280A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F302C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F312C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F322C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F330A290A2E6D61786E7469642033322C20312C20310A7B0A092E726567202E70726564200925703C333E3B0A092E726567202E623332200925723C323E3B0A092E726567202E663332200925663C31393E3B0A092E726567202E62363420092572643C32323E3B0A0A096D6F762E75333220092572312C20257469642E783B0A09736574702E67742E75333220092570312C202572312C20393B0A0940257031206272612009244C5F5F4242305F343B0A096C642E706172616D2E753634200925726431322C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F335D3B0A096C642E706172616D2E753634200925726431312C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F325D3B0A096C642E706172616D2E753634200925726431302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F315D3B0A096C642E706172616D2E753634200925726432302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F305D3B0A096376742E7536342E7533322009257264312C202572313B0A0973686C2E623634200925726431342C20257264312C20323B0A096164642E733634200925726431352C2025726431342C2025726431303B0A096164642E733634200925726431392C2025726431352C2038303B0A096D6F762E6633322009256631382C20306630303030303030303B0A096D6F762E753634200925726432312C202D343B0A244C5F5F4242305F323A0A096C642E676C6F62616C2E6E632E76342E66333220097B2566342C202566352C202566362C202566377D2C205B25726432305D3B0A096C642E676C6F62616C2E6E632E66333220092566382C205B25726431392B2D38305D3B0A096C642E676C6F62616C2E6E632E66333220092566392C205B25726431392B2D34305D3B0A096C642E676C6F62616C2E6E632E6633322009256631302C205B25726431395D3B0A096C642E676C6F62616C2E6E632E6633322009256631312C205B25726431392B34305D3B0A09666D612E726E2E6633322009256631322C202566382C202566342C20256631383B0A09666D612E726E2E6633322009256631332C202566392C202566352C20256631323B0A09666D612E726E2E6633322009256631342C20256631302C202566362C20256631333B0A09666D612E726E2E6633322009256631382C20256631312C202566372C20256631343B0A096164642E733634200925726432312C2025726432312C20343B0A096164642E733634200925726432302C2025726432302C2031363B0A096164642E733634200925726431392C2025726431392C203136303B0A09736574702E6C742E75363420092570322C2025726432312C203738303B0A0940257032206272612009244C5F5F4242305F323B0A096164642E733634200925726431372C2025726431312C2025726431343B0A096C642E676C6F62616C2E6E632E6633322009256631352C205B25726431375D3B0A096164642E726E2E6633322009256631362C20256631382C20256631353B0A096D61782E4E614E2E6633322009256631372C20256631362C20306630303030303030303B0A096164642E733634200925726431382C2025726431322C2025726431343B0A0973742E676C6F62616C2E66333220095B25726431385D2C20256631373B0A244C5F5F4242305F343A0A097265743B0A0A7D0A000006000800040008000C000400080012001C000000040008000000000014001800"> : vector<2080xi8>
  vm.initializer {
    %null = vm.const.ref.zero : !vm.ref<!hal.executable>
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1 = vm.const.i64 1
    %null_1 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_1 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %req = vm.cmp.eq.ref %4, %null_1 : !vm.ref<!hal.device>
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %5 = vm.and.i32 %req, %slt : i32
    vm.cond_br %5, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %6 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%6) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %7:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %7#1 : i64
    %zero_2 = vm.const.i32.zero
    %8 = vm.select.i32 %7#0, %nz, %zero_2 : i32
    %c1_3 = vm.const.i32 1
    vm.cond_br %8, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %9:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_4 = vm.cmp.nz.i64 %9#1 : i64
    %zero_5 = vm.const.i32.zero
    %10 = vm.select.i32 %9#0, %nz_4, %zero_5 : i32
    %c1_6 = vm.const.i32 1
    vm.br ^bb4(%10 : i32)
  ^bb4(%11: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %12 = vm.select.i64 %11, %c1, %zero_0 : i64
    %13 = vm.add.i64 %3, %12 : i64
    %14 = vm.and.i32 %11, %eq : i32
    %ref_7 = vm.select.ref %14, %ref, %null_1 : !vm.ref<!hal.device>
    %15 = vm.add.i64 %2, %c1 : i64
    vm.br ^bb1(%15, %13, %ref_7 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %req, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.cond_fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<"cuda", [#hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    vm.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %_utf8_hal_executable_format_EAB228F999C2D3A1_8 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %16:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_8, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_10 = vm.cmp.nz.i64 %16#1 : i64
    %zero_11 = vm.const.i32.zero
    %17 = vm.select.i32 %16#0, %nz_10, %zero_11 : i32
    %c1_12 = vm.const.i32 1
    %18 = vm.select.i64 %17, %zero_0, %c-1 : i64
    %eq_13 = vm.cmp.eq.i64 %18, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_13, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_14 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %null_15 = vm.const.ref.zero : !vm.buffer
    %ref_16 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_14, %main_dispatch_0_cuda_nvptx_fb, %null_15) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.br ^bb10(%ref_16 : !vm.ref<!hal.executable>)
  ^bb9:  // pred: ^bb7
    vm.cond_fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    vm.br ^bb10(%null : !vm.ref<!hal.executable>)
  ^bb10(%19: !vm.ref<!hal.executable>):  // 2 preds: ^bb8, ^bb9
    vm.global.store.ref %19, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_17 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_17, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  }
  vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %c3 = vm.const.i64 3
    %c2 = vm.const.i64 2
    %c1 = vm.const.i64 1
    %zero = vm.const.i64.zero
    %c4 = vm.const.i64 4
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %zero_0 = vm.const.i32.zero
    %c3_1 = vm.const.i32 3
    %c4_2 = vm.const.i32 4
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero_0, %c3_1, %c-1, %c4_2) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    %zero_3 = vm.const.i32.zero
    %zero_4 = vm.const.i64 0
    %zero_5 = vm.const.i32.zero
    %c1_6 = vm.const.i32 1
    %c1_7 = vm.const.i32 1
    %c1_8 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %zero_9 = vm.const.i32.zero
    %null_10 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1_11 = vm.const.i32 1
    %null_12 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c2_13 = vm.const.i32 2
    %null_14 = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c3_15 = vm.const.i32 3
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero_5, %c1_6, %c1_7, %c1_8, %zero_4, [], [(%zero_3, %zero_9, %null, %zero, %c3136), (%zero_3, %c1_11, %null_10, %zero, %c31360), (%zero_3, %c2_13, %null_12, %zero, %c40), (%zero_3, %c3_15, %null_14, %zero, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    %c28 = vm.const.i32 28
    %c13 = vm.const.i32 13
    %zero_16 = vm.const.i32.zero
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero_16) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.ex.file.from_memory(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %access : i32, %buffer : !vm.buffer, %offset : i64, %length : i64, %flags : i32) -> !vm.ref<!hal.file>
  vm.import private @hal.allocator.allocate(%allocator : !vm.ref<!hal.allocator>, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.allocator.import(%allocator : !vm.ref<!hal.allocator>, %try : i32, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %source : !vm.buffer, %offset : i64, %length : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer.subspan(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i64) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer.length(%buffer : !vm.ref<!hal.buffer>) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer.load(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i32) -> i32
  vm.import private @hal.buffer.store(%value : i32, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer_view.element_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.encoding_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.rank(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.dim(%buffer_view : !vm.ref<!hal.buffer_view>, %index : i32) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer_view.trace(%key : !vm.buffer, %operands : !vm.ref<!hal.buffer_view> ...)
  vm.import private @hal.channel.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %flags : i32, %id : !vm.buffer, %group : !vm.buffer, %rank : i32, %count : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.split(%channel : !vm.ref<!hal.channel>, %color : i32, %key : i32, %flags : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.rank_and_count(%channel : !vm.ref<!hal.channel>) -> (i32, i32) attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.begin_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>, %label : !vm.buffer)
  vm.import private @hal.command_buffer.end_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.fill_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32, %pattern : i32, %pattern_length : i32)
  vm.import private @hal.command_buffer.update_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32)
  vm.import private @hal.command_buffer.copy_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer_slot : i32, %target_buffer_slot : i32, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64)
  vm.import private @hal.command_buffer.collective(%command_buffer : !vm.ref<!hal.command_buffer>, %channel : !vm.ref<!hal.channel>, %op : i32, %param : i32, %send_buffer_slot : i32, %recv_buffer_slot : i32, %send_buffer : !vm.ref<!hal.buffer>, %recv_buffer : !vm.ref<!hal.buffer>, %send_offset : i64, %send_length : i64, %recv_offset : i64, %recv_length : i64, %element_count : i64)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.command_buffer.dispatch.indirect(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroups_buffer_slot : i32, %workgroups_buffer : !vm.ref<!hal.buffer>, %workgroups_offset : i64, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.dealloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %buffer : !vm.ref<!hal.buffer>)
  vm.import private @hal.device.queue.fill(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %pattern : i64, %pattern_length : i32, %flags : i64)
  vm.import private @hal.device.queue.update(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.copy(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.read(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_file : !vm.ref<!hal.file>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.write(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_file : !vm.ref<!hal.file>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.execute(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffers : !vm.ref<!hal.command_buffer> ...)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.queue.flush(%device : !vm.ref<!hal.device>, %queue_affinity : i64)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.join(%fences : !vm.ref<!hal.fence> ...) -> !vm.ref<!hal.fence> attributes {nosideeffects}
  vm.import private @hal.fence.query(%fence : !vm.ref<!hal.fence>) -> i32
  vm.import private @hal.fence.signal(%fence : !vm.ref<!hal.fence>)
  vm.import private @hal.fence.fail(%fence : !vm.ref<!hal.fence>, %status : i32)
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1 = vm.const.i64 1
    %zero = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %zero_0 = vm.const.i64.zero
    %c-1_1 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %c553648160 = vm.const.i32 553648160
    %c1_2 = vm.const.i32 1
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1_2, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    %c16 = vm.const.i32 16
    %c3075 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1_2, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    %c16_6 = vm.const.i32 16
    %c3075_7 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16_6, %c3075_7) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1_2, [%c1, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_8 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_9 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    %c16_10 = vm.const.i32 16
    %c3075_11 = vm.const.i32 3075
    vm.call @hal.buffer.assert(%ref_8, %_utf8_tensor_3C6209B4FD120BDC_9, %ref_3, %c40, %c16_10, %c3075_11) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %zero_12 = vm.const.i32.zero
    %ref_13 = vm.call @hal.fence.create(%__device_0, %zero_12) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %zero_14 = vm.const.i32.zero
    %c48 = vm.const.i32 48
    %c3075_15 = vm.const.i32 3075
    %ref_16 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_13, %zero_14, %c48, %c3075_15, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %zero_17 = vm.const.i32.zero
    %ref_18 = vm.call @hal.fence.create(%__device_0, %zero_17) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_13, %ref_18, %__main_memoize_result_0_device_0, [(%ref, %zero, %c3136), (%ref_4, %zero, %c31360), (%ref_8, %zero, %c40), (%ref_16, %zero, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_1, [%ref_18]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_fail %0, "failed to wait on timepoint"
    %ref_19 = vm.call.variadic @hal.buffer_view.create(%ref_16, %zero, %c40, %c553648160, %c1_2, [%c1, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_19 : !vm.ref<!hal.buffer_view>
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
}

// -----// IR Dump After mlir::iree_compiler::IREE::VM::DropUnusedCallsPass (iree-vm-drop-unused-calls) //----- //
vm.module public @module {
  vm.global.ref private @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.initializer {
    %null = vm.const.ref.zero : !vm.buffer
    %null_0 = vm.const.ref.zero : !vm.ref<!hal.executable>
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_1 = vm.const.i64.zero
    %c1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_1, %zero_1, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %req = vm.cmp.eq.ref %4, %null_2 : !vm.ref<!hal.device>
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %5 = vm.and.i32 %req, %slt : i32
    vm.cond_br %5, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %6 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%6) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %7:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %7#1 : i64
    %8 = vm.select.i32 %7#0, %nz, %zero : i32
    vm.cond_br %8, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %9:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %9#1 : i64
    %10 = vm.select.i32 %9#0, %nz_3, %zero : i32
    vm.br ^bb4(%10 : i32)
  ^bb4(%11: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_1 : i64
    %12 = vm.select.i64 %11, %c1, %zero_1 : i64
    %13 = vm.add.i64 %3, %12 : i64
    %14 = vm.and.i32 %11, %eq : i32
    %ref_4 = vm.select.ref %14, %ref, %null_2 : !vm.ref<!hal.device>
    %15 = vm.add.i64 %2, %c1 : i64
    vm.br ^bb1(%15, %13, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %req, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.cond_fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<"cuda", [#hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    vm.br ^bb7
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %16:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %16#1 : i64
    %17 = vm.select.i32 %16#0, %nz_7, %zero : i32
    %18 = vm.select.i64 %17, %zero_1, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %18, %zero_1 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.br ^bb10(%ref_10 : !vm.ref<!hal.executable>)
  ^bb9:  // pred: ^bb7
    vm.cond_fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    vm.br ^bb10(%null_0 : !vm.ref<!hal.executable>)
  ^bb10(%19: !vm.ref<!hal.executable>):  // 2 preds: ^bb8, ^bb9
    vm.global.store.ref %19, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  }
  vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.ex.file.from_memory(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %access : i32, %buffer : !vm.buffer, %offset : i64, %length : i64, %flags : i32) -> !vm.ref<!hal.file>
  vm.import private @hal.allocator.allocate(%allocator : !vm.ref<!hal.allocator>, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.allocator.import(%allocator : !vm.ref<!hal.allocator>, %try : i32, %queue_affinity : i64, %memory_types : i32, %buffer_usage : i32, %source : !vm.buffer, %offset : i64, %length : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer.subspan(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i64) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer.length(%buffer : !vm.ref<!hal.buffer>) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer.load(%source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %length : i32) -> i32
  vm.import private @hal.buffer.store(%value : i32, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.buffer_view.element_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.encoding_type(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.rank(%buffer_view : !vm.ref<!hal.buffer_view>) -> i32 attributes {nosideeffects}
  vm.import private @hal.buffer_view.dim(%buffer_view : !vm.ref<!hal.buffer_view>, %index : i32) -> i64 attributes {nosideeffects}
  vm.import private @hal.buffer_view.trace(%key : !vm.buffer, %operands : !vm.ref<!hal.buffer_view> ...)
  vm.import private @hal.channel.create(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %flags : i32, %id : !vm.buffer, %group : !vm.buffer, %rank : i32, %count : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.split(%channel : !vm.ref<!hal.channel>, %color : i32, %key : i32, %flags : i32) -> !vm.ref<!hal.channel> attributes {nosideeffects}
  vm.import private @hal.channel.rank_and_count(%channel : !vm.ref<!hal.channel>) -> (i32, i32) attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.begin_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>, %label : !vm.buffer)
  vm.import private @hal.command_buffer.end_debug_group(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.fill_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32, %pattern : i32, %pattern_length : i32)
  vm.import private @hal.command_buffer.update_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %target_buffer_slot : i32)
  vm.import private @hal.command_buffer.copy_buffer(%command_buffer : !vm.ref<!hal.command_buffer>, %source_buffer_slot : i32, %target_buffer_slot : i32, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64)
  vm.import private @hal.command_buffer.collective(%command_buffer : !vm.ref<!hal.command_buffer>, %channel : !vm.ref<!hal.channel>, %op : i32, %param : i32, %send_buffer_slot : i32, %recv_buffer_slot : i32, %send_buffer : !vm.ref<!hal.buffer>, %recv_buffer : !vm.ref<!hal.buffer>, %send_offset : i64, %send_length : i64, %recv_offset : i64, %recv_length : i64, %element_count : i64)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.command_buffer.dispatch.indirect(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroups_buffer_slot : i32, %workgroups_buffer : !vm.ref<!hal.buffer>, %workgroups_offset : i64, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.dealloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %buffer : !vm.ref<!hal.buffer>)
  vm.import private @hal.device.queue.fill(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %pattern : i64, %pattern_length : i32, %flags : i64)
  vm.import private @hal.device.queue.update(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.buffer, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.copy(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i64)
  vm.import private @hal.device.queue.read(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_file : !vm.ref<!hal.file>, %source_offset : i64, %target_buffer : !vm.ref<!hal.buffer>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.write(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %source_buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %target_file : !vm.ref<!hal.file>, %target_offset : i64, %length : i64, %flags : i32)
  vm.import private @hal.device.queue.execute(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffers : !vm.ref<!hal.command_buffer> ...)
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.queue.flush(%device : !vm.ref<!hal.device>, %queue_affinity : i64)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.join(%fences : !vm.ref<!hal.fence> ...) -> !vm.ref<!hal.fence> attributes {nosideeffects}
  vm.import private @hal.fence.query(%fence : !vm.ref<!hal.fence>) -> i32
  vm.import private @hal.fence.signal(%fence : !vm.ref<!hal.fence>)
  vm.import private @hal.fence.fail(%fence : !vm.ref<!hal.fence>, %status : i32)
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_fail %0, "failed to wait on timepoint"
    %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_11 : !vm.ref<!hal.buffer_view>
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
}

// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %null = vm.const.ref.zero : !vm.buffer
      %null_0 = vm.const.ref.zero : !vm.ref<!hal.executable>
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_1 = vm.const.i64.zero
      %c1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_1, %zero_1, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %req = vm.cmp.eq.ref %4, %null_2 : !vm.ref<!hal.device>
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %5 = vm.and.i32 %req, %slt : i32
      vm.cond_br %5, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %6 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%6) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %7:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %7#1 : i64
      %8 = vm.select.i32 %7#0, %nz, %zero : i32
      vm.cond_br %8, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %9:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %9#1 : i64
      %10 = vm.select.i32 %9#0, %nz_3, %zero : i32
      vm.br ^bb4(%10 : i32)
    ^bb4(%11: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_1 : i64
      %12 = vm.select.i64 %11, %c1, %zero_1 : i64
      %13 = vm.add.i64 %3, %12 : i64
      %14 = vm.and.i32 %11, %eq : i32
      %ref_4 = vm.select.ref %14, %ref, %null_2 : !vm.ref<!hal.device>
      %15 = vm.add.i64 %2, %c1 : i64
      vm.br ^bb1(%15, %13, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %req, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.cond_fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<"cuda", [#hal.executable.target<"cuda", "cuda-nvptx-fb", {iree.gpu.target = #iree_gpu.target<arch = "sm_86", features = "+ptx76", wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
      vm.br ^bb7
    ^bb7:  // 2 preds: ^bb5, ^bb6
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %16:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %16#1 : i64
      %17 = vm.select.i32 %16#0, %nz_7, %zero : i32
      %18 = vm.select.i64 %17, %zero_1, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %18, %zero_1 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.br ^bb10(%ref_10 : !vm.ref<!hal.executable>)
    ^bb9:  // pred: ^bb7
      vm.cond_fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
      vm.br ^bb10(%null_0 : !vm.ref<!hal.executable>)
    ^bb10(%19: !vm.ref<!hal.executable>):  // 2 preds: ^bb8, ^bb9
      vm.global.store.ref %19, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_fail %0, "failed to wait on timepoint"
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::VM::ResolveRodataLoadsPass (iree-vm-resolve-rodata-loads) //----- //
vm.module public @module {
  vm.global.ref private @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.initializer {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
  vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_11 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
  %c13 = vm.const.i32 13
  %c28 = vm.const.i32 28
  %c2 = vm.const.i32 2
  %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
  %c1 = vm.const.i32 1
  %c4 = vm.const.i32 4
  %c3 = vm.const.i32 3
  %zero = vm.const.i32.zero
  %c40 = vm.const.i64 40
  %c31360 = vm.const.i64 31360
  %c3136 = vm.const.i64 3136
  %zero_0 = vm.const.i64.zero
  %c-1 = vm.const.i64 -1
  %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
  %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
  vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
  vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
  vm.return %ref : !vm.ref<!hal.command_buffer>
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.initializer {
  %c1 = vm.const.i32 1
  %null = vm.const.ref.zero : !vm.buffer
  %c14 = vm.const.i32 14
  %c-1 = vm.const.i64 -1
  %c18 = vm.const.i32 18
  %zero = vm.const.i32.zero
  %zero_0 = vm.const.i64.zero
  %c1_1 = vm.const.i64 1
  %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
  %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
  %1 = vm.ext.i32.i64.s %0 : i32 -> i64
  vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
  %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
  %5 = vm.xor.i32 %rnz, %c1 : i32
  %slt = vm.cmp.lt.i64.s %2, %1 : i64
  %6 = vm.and.i32 %5, %slt : i32
  vm.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %7 = vm.trunc.i64.i32 %2 : i64 -> i32
  %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
  %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
  %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
  %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
  %nz = vm.cmp.nz.i64 %8#1 : i64
  %9 = vm.select.i32 %8#0, %nz, %zero : i32
  vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
^bb3:  // pred: ^bb2
  %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
  %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
  %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
  %nz_3 = vm.cmp.nz.i64 %10#1 : i64
  %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
  vm.br ^bb4(%11 : i32)
^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
  %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
  %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
  %14 = vm.add.i64 %3, %13 : i64
  %15 = vm.and.i32 %12, %eq : i32
  %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
  %16 = vm.add.i64 %2, %c1_1 : i64
  vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
^bb5:  // pred: ^bb1
  vm.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
^bb7:  // pred: ^bb5
  %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
  %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
  %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
  %nz_7 = vm.cmp.nz.i64 %17#1 : i64
  %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
  %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
  %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
  vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
  vm.cond_br %eq_8, ^bb8, ^bb9
^bb8:  // pred: ^bb7
  %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
  %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
  %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
  vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
  vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.return
^bb9:  // pred: ^bb7
  vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c48 = vm.const.i32 48
  %zero = vm.const.i32.zero
  %c3075 = vm.const.i32 3075
  %c16 = vm.const.i32 16
  %c1 = vm.const.i32 1
  %c553648160 = vm.const.i32 553648160
  %c28 = vm.const.i64 28
  %c784 = vm.const.i64 784
  %c10 = vm.const.i64 10
  %c1_0 = vm.const.i64 1
  %zero_1 = vm.const.i64.zero
  %c3136 = vm.const.i64 3136
  %c31360 = vm.const.i64 31360
  %c40 = vm.const.i64 40
  %c-1 = vm.const.i64 -1
  %null = vm.const.ref.zero : !vm.ref<!hal.fence>
  %c-1_2 = vm.const.i32 -1
  %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
  %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
  vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
  %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
  %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
  %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
  vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
  %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
  vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
  %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
  %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
  vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
  %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
  vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
  %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
  %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
  vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
  %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
  %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
  %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
  vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
  vm.cond_br %0, ^bb2, ^bb1
^bb1:  // pred: ^bb0
  %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
  vm.return %ref_11 : !vm.ref<!hal.buffer_view>
^bb2:  // pred: ^bb0
  vm.fail %0, "failed to wait on timepoint"
}

// -----// IR Dump After Inliner (inline) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::VM::DropUnusedCallsPass (iree-vm-drop-unused-calls) //----- //
vm.module public @module {
  vm.global.ref private @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.initializer {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
  vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_11 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
}

// -----// IR Dump After SymbolDCE (symbol-dce) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After FoldGlobals (iree-util-fold-globals) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After FuseGlobals (iree-util-fuse-globals) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.initializer {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.global.ref private @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref immutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref immutable @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref immutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::VM::GlobalInitializationPass (iree-vm-global-initialization) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_11 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.br ^bb10
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  ^bb10:  // pred: ^bb8
    vm.return
  }
  vm.export @__deinit
  vm.func private @__deinit() {
    vm.return
  }
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_5 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC_5, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_6 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %_utf8_tensor_3C6209B4FD120BDC_7 = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref_6, %_utf8_tensor_3C6209B4FD120BDC_7, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_9 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_8, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_10 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_8, %ref_10, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_6, %zero_1, %c40), (%ref_9, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_10]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_11 = vm.call.variadic @hal.buffer_view.create(%ref_9, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_11 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
    vm.export @__init
    vm.func private @__init() {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %ref_10 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_9, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_10, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_11 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_11, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.export @__deinit
    vm.func private @__deinit() {
      vm.return
    }
  }
}


// -----// IR Dump After CSE (cse) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_9 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
    vm.export @__init
    vm.func private @__init() {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.export @__deinit
    vm.func private @__deinit() {
      vm.return
    }
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_9 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
    vm.export @__init
    vm.func private @__init() {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
    vm.export @__deinit
    vm.func private @__deinit() {
      vm.return
    }
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::VM::DropEmptyModuleInitializersPass (iree-vm-drop-empty-module-initializers) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
}

// -----// IR Dump After DropCompilerHints (iree-util-drop-compiler-hints) //----- //
module attributes {vm.toplevel} {
  vm.module public @module {
    vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
    vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
    vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
    vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
    vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
    vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
    vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
      %c13 = vm.const.i32 13
      %c28 = vm.const.i32 28
      %c2 = vm.const.i32 2
      %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
      %c1 = vm.const.i32 1
      %c4 = vm.const.i32 4
      %c3 = vm.const.i32 3
      %zero = vm.const.i32.zero
      %c40 = vm.const.i64 40
      %c31360 = vm.const.i64 31360
      %c3136 = vm.const.i64 3136
      %zero_0 = vm.const.i64.zero
      %c-1 = vm.const.i64 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
      vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
      vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
      vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
      vm.return %ref : !vm.ref<!hal.command_buffer>
    }
    vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
    vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
    vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
    vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
    vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
    vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
    vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
    vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
    vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
    vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
    vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
    vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
    vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
    vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
    vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
    vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
    vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
    vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
    vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
    vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
      %c48 = vm.const.i32 48
      %zero = vm.const.i32.zero
      %c3075 = vm.const.i32 3075
      %c16 = vm.const.i32 16
      %c1 = vm.const.i32 1
      %c553648160 = vm.const.i32 553648160
      %c28 = vm.const.i64 28
      %c784 = vm.const.i64 784
      %c10 = vm.const.i64 10
      %c1_0 = vm.const.i64 1
      %zero_1 = vm.const.i64.zero
      %c3136 = vm.const.i64 3136
      %c31360 = vm.const.i64 31360
      %c40 = vm.const.i64 40
      %c-1 = vm.const.i64 -1
      %null = vm.const.ref.zero : !vm.ref<!hal.fence>
      %c-1_2 = vm.const.i32 -1
      %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
      %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
      %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
      vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
      vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
      %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
      vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
      %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
      %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
      vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
      %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
      vm.cond_br %0, ^bb2, ^bb1
    ^bb1:  // pred: ^bb0
      %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
      vm.return %ref_9 : !vm.ref<!hal.buffer_view>
    ^bb2:  // pred: ^bb0
      vm.fail %0, "failed to wait on timepoint"
    }
    vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
    vm.export @__init
    vm.func private @__init() {
      %c1 = vm.const.i32 1
      %null = vm.const.ref.zero : !vm.buffer
      %c14 = vm.const.i32 14
      %c-1 = vm.const.i64 -1
      %c18 = vm.const.i32 18
      %zero = vm.const.i32.zero
      %zero_0 = vm.const.i64.zero
      %c1_1 = vm.const.i64 1
      %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
      %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
      %1 = vm.ext.i32.i64.s %0 : i32 -> i64
      vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
    ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
      %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
      %5 = vm.xor.i32 %rnz, %c1 : i32
      %slt = vm.cmp.lt.i64.s %2, %1 : i64
      %6 = vm.and.i32 %5, %slt : i32
      vm.cond_br %6, ^bb2, ^bb5
    ^bb2:  // pred: ^bb1
      %7 = vm.trunc.i64.i32 %2 : i64 -> i32
      %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
      %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
      %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
      %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz = vm.cmp.nz.i64 %8#1 : i64
      %9 = vm.select.i32 %8#0, %nz, %zero : i32
      vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
    ^bb3:  // pred: ^bb2
      %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_3 = vm.cmp.nz.i64 %10#1 : i64
      %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
      vm.br ^bb4(%11 : i32)
    ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
      %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
      %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
      %14 = vm.add.i64 %3, %13 : i64
      %15 = vm.and.i32 %12, %eq : i32
      %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
      %16 = vm.add.i64 %2, %c1_1 : i64
      vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
    ^bb5:  // pred: ^bb1
      vm.cond_br %5, ^bb6, ^bb7
    ^bb6:  // pred: ^bb5
      vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
    ^bb7:  // pred: ^bb5
      %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
      %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
      %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
      %nz_7 = vm.cmp.nz.i64 %17#1 : i64
      %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
      %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
      %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
      vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
      vm.cond_br %eq_8, ^bb8, ^bb9
    ^bb8:  // pred: ^bb7
      %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
      %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
      vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
      %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
      vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
      vm.return
    ^bb9:  // pred: ^bb7
      vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
    }
  }
}


// -----// IR Dump After mlir::iree_compiler::IREE::VM::GlobalInitializationPass (iree-vm-global-initialization) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.br ^bb10
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  ^bb10:  // pred: ^bb8
    vm.return
  }
  vm.export @__deinit
  vm.func private @__deinit() {
    vm.return
  }
}

// -----// IR Dump After mlir::iree_compiler::IREE::VM::DropEmptyModuleInitializersPass (iree-vm-drop-empty-module-initializers) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.br ^bb10
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  ^bb10:  // pred: ^bb8
    vm.return
  }
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
  %c13 = vm.const.i32 13
  %c28 = vm.const.i32 28
  %c2 = vm.const.i32 2
  %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
  %c1 = vm.const.i32 1
  %c4 = vm.const.i32 4
  %c3 = vm.const.i32 3
  %zero = vm.const.i32.zero
  %c40 = vm.const.i64 40
  %c31360 = vm.const.i64 31360
  %c3136 = vm.const.i64 3136
  %zero_0 = vm.const.i64.zero
  %c-1 = vm.const.i64 -1
  %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
  %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
  vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
  vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
  vm.return %ref : !vm.ref<!hal.command_buffer>
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
  %c48 = vm.const.i32 48
  %zero = vm.const.i32.zero
  %c3075 = vm.const.i32 3075
  %c16 = vm.const.i32 16
  %c1 = vm.const.i32 1
  %c553648160 = vm.const.i32 553648160
  %c28 = vm.const.i64 28
  %c784 = vm.const.i64 784
  %c10 = vm.const.i64 10
  %c1_0 = vm.const.i64 1
  %zero_1 = vm.const.i64.zero
  %c3136 = vm.const.i64 3136
  %c31360 = vm.const.i64 31360
  %c40 = vm.const.i64 40
  %c-1 = vm.const.i64 -1
  %null = vm.const.ref.zero : !vm.ref<!hal.fence>
  %c-1_2 = vm.const.i32 -1
  %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
  %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
  vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
  %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
  %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
  %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
  vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
  %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
  vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
  %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
  vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
  %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
  vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
  %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
  vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
  %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
  %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
  %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
  vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
  vm.cond_br %0, ^bb2, ^bb1
^bb1:  // pred: ^bb0
  %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
  vm.return %ref_9 : !vm.ref<!hal.buffer_view>
^bb2:  // pred: ^bb0
  vm.fail %0, "failed to wait on timepoint"
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.func private @__init() {
  %c1 = vm.const.i32 1
  %null = vm.const.ref.zero : !vm.buffer
  %c14 = vm.const.i32 14
  %c-1 = vm.const.i64 -1
  %c18 = vm.const.i32 18
  %zero = vm.const.i32.zero
  %zero_0 = vm.const.i64.zero
  %c1_1 = vm.const.i64 1
  %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
  %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
  %1 = vm.ext.i32.i64.s %0 : i32 -> i64
  vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
  %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
  %5 = vm.xor.i32 %rnz, %c1 : i32
  %slt = vm.cmp.lt.i64.s %2, %1 : i64
  %6 = vm.and.i32 %5, %slt : i32
  vm.cond_br %6, ^bb2, ^bb5
^bb2:  // pred: ^bb1
  %7 = vm.trunc.i64.i32 %2 : i64 -> i32
  %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
  %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
  %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
  %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
  %nz = vm.cmp.nz.i64 %8#1 : i64
  %9 = vm.select.i32 %8#0, %nz, %zero : i32
  vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
^bb3:  // pred: ^bb2
  %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
  %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
  %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
  %nz_3 = vm.cmp.nz.i64 %10#1 : i64
  %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
  vm.br ^bb4(%11 : i32)
^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
  %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
  %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
  %14 = vm.add.i64 %3, %13 : i64
  %15 = vm.and.i32 %12, %eq : i32
  %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
  %16 = vm.add.i64 %2, %c1_1 : i64
  vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
^bb5:  // pred: ^bb1
  vm.cond_br %5, ^bb6, ^bb7
^bb6:  // pred: ^bb5
  vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
^bb7:  // pred: ^bb5
  %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
  %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
  %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
  %nz_7 = vm.cmp.nz.i64 %17#1 : i64
  %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
  %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
  %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
  vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
  vm.cond_br %eq_8, ^bb8, ^bb9
^bb8:  // pred: ^bb7
  %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
  %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
  vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
  vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.return
^bb9:  // pred: ^bb7
  vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
}

// -----// IR Dump After Inliner (inline) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
}

// -----// IR Dump After CSE (cse) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
}

// -----// IR Dump After Canonicalizer (canonicalize) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
}

// -----// IR Dump After DropCompilerHints (iree-util-drop-compiler-hints) //----- //
vm.module public @module {
  vm.global.ref private mutable @__device_0 : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64} dense<"0x0C000000434441310000000006F8FFFF08000000C8000000010000000400000012F8FFFF3C0000002000000001000000010000000800000050000000040000000300000000000000030000000000000003000000000000000200000000000000210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F66333200000082F8FFFF28000000040000008EF8FFFF08000000010000000F000000636F6E762D6C617965722E6D6C697200210000006D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320000000100000004000000E4F8FFFF040000000E0700002F2F0A2F2F2047656E657261746564206279204C4C564D204E56505458204261636B2D456E640A2F2F0A0A2E76657273696F6E20372E360A2E74617267657420736D5F38360A2E616464726573735F73697A652036340A0A092F2F202E676C6F626C096D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633320A0A2E76697369626C65202E656E747279206D61696E5F64697370617463685F305F7665636D61745F3130783738345F663332280A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F302C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F312C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F322C0A092E706172616D202E753634202E707472202E676C6F62616C202E616C69676E203136206D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F330A290A2E6D61786E7469642033322C20312C20310A7B0A092E726567202E70726564200925703C333E3B0A092E726567202E623332200925723C323E3B0A092E726567202E663332200925663C31393E3B0A092E726567202E62363420092572643C32323E3B0A0A096D6F762E75333220092572312C20257469642E783B0A09736574702E67742E75333220092570312C202572312C20393B0A0940257031206272612009244C5F5F4242305F343B0A096C642E706172616D2E753634200925726431322C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F335D3B0A096C642E706172616D2E753634200925726431312C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F325D3B0A096C642E706172616D2E753634200925726431302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F315D3B0A096C642E706172616D2E753634200925726432302C205B6D61696E5F64697370617463685F305F7665636D61745F3130783738345F6633325F706172616D5F305D3B0A096376742E7536342E7533322009257264312C202572313B0A0973686C2E623634200925726431342C20257264312C20323B0A096164642E733634200925726431352C2025726431342C2025726431303B0A096164642E733634200925726431392C2025726431352C2038303B0A096D6F762E6633322009256631382C20306630303030303030303B0A096D6F762E753634200925726432312C202D343B0A244C5F5F4242305F323A0A096C642E676C6F62616C2E6E632E76342E66333220097B2566342C202566352C202566362C202566377D2C205B25726432305D3B0A096C642E676C6F62616C2E6E632E66333220092566382C205B25726431392B2D38305D3B0A096C642E676C6F62616C2E6E632E66333220092566392C205B25726431392B2D34305D3B0A096C642E676C6F62616C2E6E632E6633322009256631302C205B25726431395D3B0A096C642E676C6F62616C2E6E632E6633322009256631312C205B25726431392B34305D3B0A09666D612E726E2E6633322009256631322C202566382C202566342C20256631383B0A09666D612E726E2E6633322009256631332C202566392C202566352C20256631323B0A09666D612E726E2E6633322009256631342C20256631302C202566362C20256631333B0A09666D612E726E2E6633322009256631382C20256631312C202566372C20256631343B0A096164642E733634200925726432312C2025726432312C20343B0A096164642E733634200925726432302C2025726432302C2031363B0A096164642E733634200925726431392C2025726431392C203136303B0A09736574702E6C742E75363420092570322C2025726432312C203738303B0A0940257032206272612009244C5F5F4242305F323B0A096164642E733634200925726431372C2025726431312C2025726431343B0A096C642E676C6F62616C2E6E632E6633322009256631352C205B25726431375D3B0A096164642E726E2E6633322009256631362C20256631382C20256631353B0A096D61782E4E614E2E6633322009256631372C20256631362C20306630303030303030303B0A096164642E733634200925726431382C2025726431322C2025726431343B0A0973742E676C6F62616C2E66333220095B25726431385D2C20256631373B0A244C5F5F4242305F343A0A097265743B0A0A7D0A000006000800040008000C000400080012001C000000040008000000000014001800"> : vector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32)
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...)
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>)
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32)
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer>
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence>
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}}
  vm.export @__init
  vm.func private @__init() {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
}

// -----// IR Dump After mlir::iree_compiler::IREE::VM::OrdinalAllocationPass (iree-vm-ordinal-allocation) //----- //
vm.module public @module attributes {ordinal_counts = #vm.ordinal_counts<import_funcs = 17, export_funcs = 2, internal_funcs = 3, global_bytes = 0, global_refs = 3, rodatas = 9, rwdatas = 0>} {
  vm.global.ref private mutable @__device_0 {ordinal = 0 : i32} : !vm.ref<!hal.device>
  vm.rodata private @_utf8_hal_device_id_C1DCB7DBC4F49AE6 {alignment = 1 : i64, ordinal = 0 : i32} "hal.device.id"
  vm.rodata private @_utf8_cuda_EC9D846C9E731CDE {alignment = 1 : i64, ordinal = 1 : i32} "cuda"
  vm.rodata private @_utf8_hal_executable_format_EAB228F999C2D3A1 {alignment = 1 : i64, ordinal = 2 : i32} "hal.executable.format"
  vm.rodata private @_utf8_cuda_nvptx_fb_B15B42B96FDBACC {alignment = 1 : i64, ordinal = 3 : i32} "cuda-nvptx-fb"
  vm.rodata private @main_dispatch_0_cuda_nvptx_fb {alignment = 16 : i64, ordinal = 4 : i32} dense<"0xvector<2080xi8>
  vm.global.ref private mutable @__device_0_executable_0_main_dispatch_0 {ordinal = 1 : i32} : !vm.ref<!hal.executable>
  vm.func private @__main_memoize_apply() -> !vm.ref<!hal.command_buffer> attributes {inlining_policy = #util.inline.never, ordinal = 0 : i32} {
    %c13 = vm.const.i32 13
    %c28 = vm.const.i32 28
    %c2 = vm.const.i32 2
    %null = vm.const.ref.zero : !vm.ref<!hal.buffer>
    %c1 = vm.const.i32 1
    %c4 = vm.const.i32 4
    %c3 = vm.const.i32 3
    %zero = vm.const.i32.zero
    %c40 = vm.const.i64 40
    %c31360 = vm.const.i64 31360
    %c3136 = vm.const.i64 3136
    %zero_0 = vm.const.i64.zero
    %c-1 = vm.const.i64 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__device_0_executable_0_main_dispatch_0 = vm.global.load.ref @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref = vm.call @hal.command_buffer.create(%__device_0, %zero, %c3, %c-1, %c4) : (!vm.ref<!hal.device>, i32, i32, i64, i32) -> !vm.ref<!hal.command_buffer>
    vm.call.variadic @hal.command_buffer.dispatch(%ref, %__device_0_executable_0_main_dispatch_0, %zero, %c1, %c1, %c1, %zero_0, [], [(%zero, %zero, %null, %zero_0, %c3136), (%zero, %c1, %null, %zero_0, %c31360), (%zero, %c2, %null, %zero_0, %c40), (%zero, %c3, %null, %zero_0, %c40)]) : (!vm.ref<!hal.command_buffer>, !vm.ref<!hal.executable>, i32, i32, i32, i32, i64, i32 ..., tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...)
    vm.call @hal.command_buffer.execution_barrier(%ref, %c28, %c13, %zero) : (!vm.ref<!hal.command_buffer>, i32, i32, i32) -> ()
    vm.call @hal.command_buffer.finalize(%ref) : (!vm.ref<!hal.command_buffer>) -> ()
    vm.return %ref : !vm.ref<!hal.command_buffer>
  }
  vm.global.ref private mutable @__main_memoize_result_0_device_0 {ordinal = 2 : i32} : !vm.ref<!hal.command_buffer>
  vm.import private @hal.buffer.assert(%buffer : !vm.ref<!hal.buffer>, %message : !vm.buffer, %allocator : !vm.ref<!hal.allocator>, %minimum_length : i64, %memory_types : i32, %buffer_usage : i32) attributes {ordinal = 0 : i32}
  vm.import private @hal.buffer_view.create(%buffer : !vm.ref<!hal.buffer>, %source_offset : i64, %source_length : i64, %element_type : i32, %encoding_type : i32, %shape : i64 ...) -> !vm.ref<!hal.buffer_view> attributes {nosideeffects, ordinal = 1 : i32}
  vm.import private @hal.buffer_view.assert(%buffer_view : !vm.ref<!hal.buffer_view>, %message : !vm.buffer, %element_type : i32, %encoding_type : i32, %shape : i64 ...) attributes {ordinal = 2 : i32}
  vm.import private @hal.buffer_view.buffer(%buffer_view : !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer> attributes {nosideeffects, ordinal = 3 : i32}
  vm.import private @hal.command_buffer.create(%device : !vm.ref<!hal.device>, %modes : i32, %command_categories : i32, %queue_affinity : i64, %binding_capacity : i32) -> !vm.ref<!hal.command_buffer> attributes {minimum_version = 5 : i32, ordinal = 4 : i32}
  vm.import private @hal.command_buffer.finalize(%command_buffer : !vm.ref<!hal.command_buffer>) attributes {ordinal = 5 : i32}
  vm.import private @hal.command_buffer.execution_barrier(%command_buffer : !vm.ref<!hal.command_buffer>, %source_stage_mask : i32, %target_stage_mask : i32, %flags : i32) attributes {ordinal = 6 : i32}
  vm.import private @hal.command_buffer.dispatch(%command_buffer : !vm.ref<!hal.command_buffer>, %executable : !vm.ref<!hal.executable>, %entry_point : i32, %workgroup_x : i32, %workgroup_y : i32, %workgroup_z : i32, %flags : i64, %constants : i32 ..., %bindings : tuple<i32, i32, !vm.ref<!hal.buffer>, i64, i64> ...) attributes {ordinal = 7 : i32}
  vm.import private @hal.device.allocator(%device : !vm.ref<!hal.device>) -> !vm.ref<!hal.allocator> attributes {nosideeffects, ordinal = 8 : i32}
  vm.import private @hal.device.query.i64(%device : !vm.ref<!hal.device>, %category : !vm.buffer, %key : !vm.buffer) -> (i32, i64) attributes {nosideeffects, ordinal = 9 : i32}
  vm.import private @hal.device.queue.alloca(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %pool : i32, %memory_types : i32, %buffer_usage : i32, %allocation_size : i64) -> !vm.ref<!hal.buffer> attributes {ordinal = 10 : i32}
  vm.import private @hal.device.queue.execute.indirect(%device : !vm.ref<!hal.device>, %queue_affinity : i64, %wait_fence : !vm.ref<!hal.fence>, %signal_fence : !vm.ref<!hal.fence>, %command_buffer : !vm.ref<!hal.command_buffer>, %binding_table : tuple<!vm.ref<!hal.buffer>, i64, i64> ...) attributes {ordinal = 11 : i32}
  vm.import private @hal.devices.count() -> i32 attributes {nosideeffects, ordinal = 12 : i32}
  vm.import private @hal.devices.get(%index : i32) -> !vm.ref<!hal.device> attributes {nosideeffects, ordinal = 13 : i32}
  vm.import private @hal.executable.create(%device : !vm.ref<!hal.device>, %executable_format : !vm.buffer, %executable_data : !vm.buffer, %constants : !vm.buffer) -> !vm.ref<!hal.executable> attributes {nosideeffects, ordinal = 14 : i32}
  vm.import private @hal.fence.create(%device : !vm.ref<!hal.device>, %flags : i32) -> !vm.ref<!hal.fence> attributes {ordinal = 15 : i32}
  vm.import private @hal.fence.await(%timeout_millis : i32, %fences : !vm.ref<!hal.fence> ...) -> i32 attributes {ordinal = 16 : i32, vm.yield}
  vm.rodata private @_utf8_input0_F74E046E5FFA3735 {alignment = 1 : i64, ordinal = 5 : i32} "input0"
  vm.rodata private @_utf8_tensor_3C6209B4FD120BDC {alignment = 1 : i64, ordinal = 6 : i32} "tensor"
  vm.rodata private @_utf8_input1_E2E5222C371315B9 {alignment = 1 : i64, ordinal = 7 : i32} "input1"
  vm.rodata private @_utf8_input2_18A68D379CE18F1A {alignment = 1 : i64, ordinal = 8 : i32} "input2"
  vm.func private @main(%arg0: !vm.ref<!hal.buffer_view>, %arg1: !vm.ref<!hal.buffer_view>, %arg2: !vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer_view> attributes {iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}, ordinal = 1 : i32} {
    %c48 = vm.const.i32 48
    %zero = vm.const.i32.zero
    %c3075 = vm.const.i32 3075
    %c16 = vm.const.i32 16
    %c1 = vm.const.i32 1
    %c553648160 = vm.const.i32 553648160
    %c28 = vm.const.i64 28
    %c784 = vm.const.i64 784
    %c10 = vm.const.i64 10
    %c1_0 = vm.const.i64 1
    %zero_1 = vm.const.i64.zero
    %c3136 = vm.const.i64 3136
    %c31360 = vm.const.i64 31360
    %c40 = vm.const.i64 40
    %c-1 = vm.const.i64 -1
    %null = vm.const.ref.zero : !vm.ref<!hal.fence>
    %c-1_2 = vm.const.i32 -1
    %__device_0 = vm.global.load.ref @__device_0 : !vm.ref<!hal.device>
    %__main_memoize_result_0_device_0 = vm.global.load.ref @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    %_utf8_input0_F74E046E5FFA3735 = vm.const.ref.rodata @_utf8_input0_F74E046E5FFA3735 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg0, %_utf8_input0_F74E046E5FFA3735, %c553648160, %c1, [%c28, %c28]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref = vm.call @hal.buffer_view.buffer(%arg0) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    %ref_3 = vm.call @hal.device.allocator(%__device_0) {nosideeffects} : (!vm.ref<!hal.device>) -> !vm.ref<!hal.allocator>
    %_utf8_tensor_3C6209B4FD120BDC = vm.const.ref.rodata @_utf8_tensor_3C6209B4FD120BDC : !vm.buffer
    vm.call @hal.buffer.assert(%ref, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c3136, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input1_E2E5222C371315B9 = vm.const.ref.rodata @_utf8_input1_E2E5222C371315B9 : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg1, %_utf8_input1_E2E5222C371315B9, %c553648160, %c1, [%c784, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_4 = vm.call @hal.buffer_view.buffer(%arg1) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_4, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c31360, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %_utf8_input2_18A68D379CE18F1A = vm.const.ref.rodata @_utf8_input2_18A68D379CE18F1A : !vm.buffer
    vm.call.variadic @hal.buffer_view.assert(%arg2, %_utf8_input2_18A68D379CE18F1A, %c553648160, %c1, [%c1_0, %c10]) : (!vm.ref<!hal.buffer_view>, !vm.buffer, i32, i32, i64 ...)
    %ref_5 = vm.call @hal.buffer_view.buffer(%arg2) {nosideeffects} : (!vm.ref<!hal.buffer_view>) -> !vm.ref<!hal.buffer>
    vm.call @hal.buffer.assert(%ref_5, %_utf8_tensor_3C6209B4FD120BDC, %ref_3, %c40, %c16, %c3075) : (!vm.ref<!hal.buffer>, !vm.buffer, !vm.ref<!hal.allocator>, i64, i32, i32) -> ()
    %ref_6 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    %ref_7 = vm.call @hal.device.queue.alloca(%__device_0, %c-1, %null, %ref_6, %zero, %c48, %c3075, %c40) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, i32, i32, i32, i64) -> !vm.ref<!hal.buffer>
    %ref_8 = vm.call @hal.fence.create(%__device_0, %zero) : (!vm.ref<!hal.device>, i32) -> !vm.ref<!hal.fence>
    vm.call.variadic @hal.device.queue.execute.indirect(%__device_0, %c-1, %ref_6, %ref_8, %__main_memoize_result_0_device_0, [(%ref, %zero_1, %c3136), (%ref_4, %zero_1, %c31360), (%ref_5, %zero_1, %c40), (%ref_7, %zero_1, %c40)]) : (!vm.ref<!hal.device>, i64, !vm.ref<!hal.fence>, !vm.ref<!hal.fence>, !vm.ref<!hal.command_buffer>, tuple<!vm.ref<!hal.buffer>, i64, i64> ...)
    %0 = vm.call.variadic @hal.fence.await(%c-1_2, [%ref_8]) : (i32, !vm.ref<!hal.fence> ...) -> i32
    vm.cond_br %0, ^bb2, ^bb1
  ^bb1:  // pred: ^bb0
    %ref_9 = vm.call.variadic @hal.buffer_view.create(%ref_7, %zero_1, %c40, %c553648160, %c1, [%c1_0, %c10]) {nosideeffects} : (!vm.ref<!hal.buffer>, i64, i64, i32, i32, i64 ...) -> !vm.ref<!hal.buffer_view>
    vm.return %ref_9 : !vm.ref<!hal.buffer_view>
  ^bb2:  // pred: ^bb0
    vm.fail %0, "failed to wait on timepoint"
  }
  vm.export @main attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = "sync func @main(%input0: tensor<28x28xf32>, %input1: tensor<784x10xf32>, %input2: tensor<1x10xf32>) -> (%output0: tensor<1x10xf32>)"}, ordinal = 0 : i32}
  vm.export @__init attributes {ordinal = 1 : i32}
  vm.func private @__init() attributes {ordinal = 2 : i32} {
    %c1 = vm.const.i32 1
    %null = vm.const.ref.zero : !vm.buffer
    %c14 = vm.const.i32 14
    %c-1 = vm.const.i64 -1
    %c18 = vm.const.i32 18
    %zero = vm.const.i32.zero
    %zero_0 = vm.const.i64.zero
    %c1_1 = vm.const.i64 1
    %null_2 = vm.const.ref.zero : !vm.ref<!hal.device>
    %0 = vm.call @hal.devices.count() {nosideeffects} : () -> i32
    %1 = vm.ext.i32.i64.s %0 : i32 -> i64
    vm.br ^bb1(%zero_0, %zero_0, %null_2 : i64, i64, !vm.ref<!hal.device>)
  ^bb1(%2: i64, %3: i64, %4: !vm.ref<!hal.device>):  // 2 preds: ^bb0, ^bb4
    %rnz = vm.cmp.nz.ref %4 : !vm.ref<!hal.device>
    %5 = vm.xor.i32 %rnz, %c1 : i32
    %slt = vm.cmp.lt.i64.s %2, %1 : i64
    %6 = vm.and.i32 %5, %slt : i32
    vm.cond_br %6, ^bb2, ^bb5
  ^bb2:  // pred: ^bb1
    %7 = vm.trunc.i64.i32 %2 : i64 -> i32
    %ref = vm.call @hal.devices.get(%7) {nosideeffects} : (i32) -> !vm.ref<!hal.device>
    %_utf8_hal_device_id_C1DCB7DBC4F49AE6 = vm.const.ref.rodata @_utf8_hal_device_id_C1DCB7DBC4F49AE6 : !vm.buffer
    %_utf8_cuda_EC9D846C9E731CDE = vm.const.ref.rodata @_utf8_cuda_EC9D846C9E731CDE : !vm.buffer
    %8:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_device_id_C1DCB7DBC4F49AE6, %_utf8_cuda_EC9D846C9E731CDE) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz = vm.cmp.nz.i64 %8#1 : i64
    %9 = vm.select.i32 %8#0, %nz, %zero : i32
    vm.cond_br %9, ^bb3, ^bb4(%zero : i32)
  ^bb3:  // pred: ^bb2
    %_utf8_hal_executable_format_EAB228F999C2D3A1 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %10:2 = vm.call @hal.device.query.i64(%ref, %_utf8_hal_executable_format_EAB228F999C2D3A1, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_3 = vm.cmp.nz.i64 %10#1 : i64
    %11 = vm.select.i32 %10#0, %nz_3, %zero : i32
    vm.br ^bb4(%11 : i32)
  ^bb4(%12: i32):  // 2 preds: ^bb2, ^bb3
    %eq = vm.cmp.eq.i64 %3, %zero_0 : i64
    %13 = vm.select.i64 %12, %c1_1, %zero_0 : i64
    %14 = vm.add.i64 %3, %13 : i64
    %15 = vm.and.i32 %12, %eq : i32
    %ref_4 = vm.select.ref %15, %ref, %null_2 : !vm.ref<!hal.device>
    %16 = vm.add.i64 %2, %c1_1 : i64
    vm.br ^bb1(%16, %14, %ref_4 : i64, i64, !vm.ref<!hal.device>)
  ^bb5:  // pred: ^bb1
    vm.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    vm.fail %c18, "HAL device `__device_0` not found or unavailable: #hal.device.target<\22cuda\22, [#hal.executable.target<\22cuda\22, \22cuda-nvptx-fb\22, {iree.gpu.target = #iree_gpu.target<arch = \22sm_86\22, features = \22+ptx76\22, wgp = <compute =  fp64|fp32|fp16|int64|int32|int16|int8, storage =  b64|b32|b16|b8, subgroup =  shuffle|arithmetic, dot =  dp4xi8toi32, mma = [<WMMA_F32_16x16x16_F16>, <WMMA_F16_16x16x16_F16>], subgroup_size_choices = [32], max_workgroup_sizes = [1024, 1024, 1024], max_thread_count_per_workgroup = 1024, max_workgroup_memory_bytes = 166912, max_workgroup_counts = [2147483647, 65535, 65535]>>}>]>"
  ^bb7:  // pred: ^bb5
    %_utf8_hal_executable_format_EAB228F999C2D3A1_5 = vm.const.ref.rodata @_utf8_hal_executable_format_EAB228F999C2D3A1 : !vm.buffer
    %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6 = vm.const.ref.rodata @_utf8_cuda_nvptx_fb_B15B42B96FDBACC : !vm.buffer
    %17:2 = vm.call @hal.device.query.i64(%4, %_utf8_hal_executable_format_EAB228F999C2D3A1_5, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer) -> (i32, i64)
    %nz_7 = vm.cmp.nz.i64 %17#1 : i64
    %18 = vm.select.i32 %17#0, %nz_7, %zero : i32
    %19 = vm.select.i64 %18, %zero_0, %c-1 : i64
    %eq_8 = vm.cmp.eq.i64 %19, %zero_0 : i64
    vm.global.store.ref %4, @__device_0 : !vm.ref<!hal.device>
    vm.cond_br %eq_8, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %main_dispatch_0_cuda_nvptx_fb = vm.const.ref.rodata @main_dispatch_0_cuda_nvptx_fb : !vm.buffer
    %ref_9 = vm.call @hal.executable.create(%4, %_utf8_cuda_nvptx_fb_B15B42B96FDBACC_6, %main_dispatch_0_cuda_nvptx_fb, %null) {nosideeffects} : (!vm.ref<!hal.device>, !vm.buffer, !vm.buffer, !vm.buffer) -> !vm.ref<!hal.executable>
    vm.global.store.ref %ref_9, @__device_0_executable_0_main_dispatch_0 : !vm.ref<!hal.executable>
    %ref_10 = vm.call @__main_memoize_apply() : () -> !vm.ref<!hal.command_buffer>
    vm.global.store.ref %ref_10, @__main_memoize_result_0_device_0 : !vm.ref<!hal.command_buffer>
    vm.return
  ^bb9:  // pred: ^bb7
    vm.fail %c14, "HAL device `__device_0` does not support any variant of executable `main_dispatch_0`; available formats: [cuda-nvptx-fb]"
  }
}

